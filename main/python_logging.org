:PROPERTIES:
:ID:       345cadc2-52a5-4c91-8de1-a45a98aaa5a8
:mtime:    20231114194829 20230108140200 20230103103309 20221212181558
:ctime:    20221212181558
:END:
#+TITLE: Python Logging
#+DATE: [2022-05-24 Tue 21:21]
#+FILETAGS: :python:programming:statistics:logging:

The [[https://docs.python.org/3/library/logging.html][logging]] core module is pretty complete.

Typically when creating a package I will create a separate module for logging under ~<package>/logs.py~ or
~<package>/logs/logs.py~


#+BEGIN_SRC python :eval no
  """
  Standardise logging.
  """
  import sys
  from pathlib import Path
  from datetime import datetime
  import logging

  # pylint: disable=assignment-from-no-return

  start = datetime.now()
  LOG_CONFIG = logging.basicConfig(
      filename=str(str(Path().cwd()) + "-" + start.strftime("%Y-%m-%d-%H-%M-%S") + ".log"), filemode="w"
  )
  LOG_FORMATTER = logging.Formatter(
      fmt="[%(asctime)s] [%(levelname)-8s] [%(name)s] %(message)s", datefmt="%a, %d %b %Y %H:%M:%S"
  )
  LOG_ERROR_FORMATTER = logging.Formatter(
      fmt="[%(asctime)s] [%(levelname)-8s] [%(name)s] [%(filename)s] [%(lineno)s] %(message)s",
      datefmt="%a, %d %b %Y %H:%M:%S",
  )

  LOGGER_NAME = "topostats"


  def setup_logger(log_name: str = LOGGER_NAME) -> logging.Logger:
      """Setup a standard logger.
      The logger for the module is initialised when the module is loaded (as this functions is called from
      __init__.py). This creates two stream handlers, one for general output and one for errors which are formatted
      differently (there is greater information in the error formatter). To use in modules import the 'LOGGER_NAME' and
      create a logger as shown in the Examples, it will inherit the formatting and direction of messages to the correct
      stream.
      Parameters
      ----------
      log_name : str
          Name under which logging information occurs.
      Returns
      -------
      logging.Logger
          Logger object.
      Examples
      --------
      To use the logger in (sub-)modules have the following.
          import logging
          from topostats.logs.logs import LOGGER_NAME
          LOGGER = logging.getLogger(LOGGER_NAME)
          LOGGER.info('This is a log message.')
      """
      out_stream_handler = logging.StreamHandler(sys.stdout)
      out_stream_handler.setLevel(logging.DEBUG)
      out_stream_handler.setFormatter(LOG_FORMATTER)

      err_stream_handler = logging.StreamHandler(sys.stderr)
      err_stream_handler.setLevel(logging.ERROR)
      err_stream_handler.setFormatter(LOG_ERROR_FORMATTER)

      logger = logging.getLogger(log_name)
      logger.setLevel(logging.INFO)
      if not logger.handlers:
          logger.addHandler(out_stream_handler)
          logger.addHandler(err_stream_handler)

      return logger
#+END_SRC

Then under ~<package>/__init__.py~ I will initialise a logger which means whenever a component of the package is loaded
a logger is started.

#+BEGIN_SRC python :eval no
  """<package>"""
  from pkg_resources import get_distribution, DistributionNotFound

  from <package>.logs.logs import setup_logger

  LOGGER = setup_logger()
#+END_SRC

In each module I wish to use logging I setup a new logger with the ~LOGGER_NAME~ defined in the ~logs.py~ module.

#+BEGIN_SRC python :eval no
  """A Module"""
  from topostats.logs.logs import LOGGER_NAME

  LOGGER = logging.getLogger(LOGGER_NAME)

  LOGGER.info("Yay, we have started logging.")
#+END_SRC

* loguru

An alternative to this is the package [[https://github.com/Delgan/loguru][loguru]] which aims to massively simplify the process of logging, making it as
simple as using ~print()~.

* structlog

The aim of [[https://www.structlog.org/en/stable/][structlog]] is to make log files both human /and/ machine readable. Its designed around functions that take as
input dictionaries and return dictionaries.

* Links

** Software

+ [[https://loguru.readthedocs.io/en/stable/index.html][loguru]]
+ [[https://www.structlog.org/en/stable/][structlog]]
+ [[https://eliot.readthedocs.io/en/stable/quickstart.html][eliot]]

** Articles
+ [[https://realpython.com/python-logging/][Logging in Python â€“ Real Python]]
+ [[https://bitestreams.com/blog/structured_logging/][Structured Logging with Structlog | BiteStreams]]
