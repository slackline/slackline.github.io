:PROPERTIES:
:ID:       d7b0fb90-d668-4e31-bc2d-305f6ee14fc9
:mtime:    20240704163906 20240704153322 20240429121335 20240122164500 20231126083238 20231119210731 20230803212315 20230612165437 20230108213627 20230103103313 20220524211634
:ctime:    20220524211634
:END:
#+TITLE: Numpy
#+DATE: [2022-02-13 Sun 20:49]
#+FILETAGS: :python:programming:statistics:

* Vectorisation is fast

Numpy leverages vectorisation which means it can apply the same function to each element of an array which avoids you
having to write ~for~ loops to repeat tasks. This vectorisation is optimised and therefore very fast. By way of example
lets look at calculating the quantiles on the rows of a matrix.


#+BEGIN_SRC python :eval no
  import timeit
  import numpy as np

  ROWS = 1000
  COLS = 1000
  rng = np.random.default_rng()
  test = rng.integers(low=0, high=1e6, size=(ROWS, COLS))

  def calculate_row_quantiles_by_loop(matrix: np.array=test) -> np.array:
      """Calculate the quantiles by row using a for loop."""
      # Create empty array to hold the values
      quantiles = np.zeros((matrix.shape[0], 3))
      # Loop over rows calculating the quantiles
      for i in range(matrix.shape[0]):
          quantiles[i] = np.quantile(matrix[i,:], [0.25, 0.5, 0.75])
      return quantiles

  def calculate_row_quantiles_by_axis(matrix: np.array=test) -> np.array:
      """Calculate the quantiles by row using axis."""
      return np.quantile(matrix, [0.25, 0.5, 0.75], axis=1).T
  # First we want to check we get the same results
  quantiles_by_loop = calculate_row_quantiles_by_loop()
  quantiles_by_axis = calculate_row_quantiles_by_axis()
  np.testing.assert_array_equal(quantiles_by_loop, quantiles_by_axis)
  # We now run tests timing to see how long it takes to running
  N_RUNS = 1000
  results = timeit.timeit(stmt='calculate_row_quantiles_by_loop()', globals=globals(), number=N_RUNS)
  print(f'Execution time using loops is {results / N_RUNS} seconds')

  # Now time it using vectorised
  results = timeit.timeit(stmt='calculate_row_quantiles_by_axis()', globals=globals(), number=N_RUNS)
  print(f'Execution time using axis is {results / N_RUNS} seconds')
#+END_SRC

This shows that its faster to use the vectorisation approach than to loop over the rows of an array.

* Tips and Tricks

** Lexical sorting

[[https://numpy.org/doc/stable/reference/generated/numpy.lexsort.html][~np.lexsort()~]] is a neat way to lexically sort arrays, useful if you want to change the order of co-ordinates from say
~np.argwhere~.

** Printing Arrays

If you need to print all of an array and not have columns or rows truncated you [[https://stackoverflow.com/questions/1987694/how-do-i-print-the-full-numpy-array-without-truncation][can]].

#+begin_src python
  import sys
  import numpy as np

  # Prints everything regardless
  with np.printoptions(threshold=np.inf):
      print(array)

  # More respectful of system capacity
  with np.printoptions(threshold=sys.maxsize):
      print(array)
#+end_src

** JSON Woes

You can't write Numpy arrays to JSON files directly. A neat solution is to use the [[https://github.com/hmallen/numpyencoder][numpyencoder]] package and pass it as
an argument to ~json.dump()~ (see [[https://stackoverflow.com/a/61903895/1444043][solution]]), or you can just use the ~default=str~ option if you don't ever want to read
the lists back in (they lose their delimiters using the later method).

* Links

** Books

+ [[https://www.labri.fr/perso/nrougier/from-python-to-numpy/][From Python to Numpy]] by Nicholas Rougier (focuses on vectorisation)

** Speed

+ [[https://pythonspeed.com/articles/speeding-up-numba/?s=35][Understanding CPUs can help speed up Numba and NumPy code]]
+ [[https://pythonspeed.com/articles/numpy-is-slow/][When NumPy is too slow]]

** Misc

+ [[https://labs.quansight.org/blog/building-scipy-with-flang][The 'eu' in eucatastrophe â€“ Why SciPy builds for Python 3.12 on Windows are a minor miracle | Labs]]
