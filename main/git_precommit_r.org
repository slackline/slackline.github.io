:PROPERTIES:
:ID:       f00b1609-ba04-4ec2-bbd2-6dec08148776
:mtime:    20230910190757
:ctime:    20230910190757
:END:
#+TITLE: Pre-commit R
#+FILETAGS: :git:hooks:pre-commit:r:

This post is aimed at getting you up and running with the R [[https://cran.r-project.org/web//packages/precommit/vignettes/precommit.html][precommit]] Package. This shouldn't be confused with the
Python [[https://ns-rse.github.io/pre-commit][pre-commit]] Package although as you might suspect they are closely related.

The R package (=precommit=) consists of a number of R specific hooks that are run by =pre-commit= before commits are
made and check various aspects of your code for compliance with certain style and coding standards (mostly aspects of R
packages and I'll be posting more on R packaging in due course).

A major part of this post is about getting things setup on Windows, I've only given a light overview of some of the
hooks and common problems encountered as I've gone about using and learning R packaging because not everyone uses
Windows.

Most of the work on the R package is by [[https://github.com/lorenzwalthert/][Lorenz Walthert]], if you find it useful consider sponsoring his work, these
things take a lot of time and effort and whilst they can be used for free are worth supporting.

#+caption: [[https://flickr.com/photos/slackline/52985095726/][Erwin
Wurm sculpture at Yorkshire Sculpture Park]] by me [[https://live.staticflickr.com/65535/52985095726_49c5b394f1_k.jpg]]

* pre-commit
:PROPERTIES:
:CUSTOM_ID: pre-commit
:END:
I love using [[id:c76767c4-2a49-42f8-a323-a6d6105e0bce][Pre-commit]] in my development pipelines and have [[https://ns-rse.github.io/#category=pre-commit][blogged about it]] a few times already. It saves so much
hassle (once you are used to it) not just for yourself but also your collaborators who are reviewing your Pull
Requests. The [[https://github.com/lorenzwalthert/precommit][R precommit package]] comes with a set of hooks that can be enabled and configured individually. I've
recently and reason to start making and R package and as I've not used R much for a few years and this was my first time
attempting to develop a package, I decided to use the hooks to impose the various style standards and checks that are
expected.

I opted to enable /all/ of the hooks. I've not covered them all here in detail (yet) but describe some of them below and
show how to use some additional hooks from the [[https://usethis.r-lib.org][usethis]] package too.

** codemetar
:PROPERTIES:
:CUSTOM_ID: codemetar
:END:
There is a hook for checking the [[https://codemeta.github.io/][Codemeta]], which is in JSON-LD format is created correctly. The R package [[https://cran.r-project.org/web//packages//codemetar/vignettes/codemetar.html][codemetar]]
facilitates creating this and pulls metadata from the =DESCRIPTION=, =README.Rmd= and other aspects of your package to
format them in JSON Codemeta. It comes with a handy function to write the file for you, so after installing you can just
run =codemetar::write_codemeta()= which will create the =codemeta.json= for you. Remember to run this each and every
time you update and of the files from which the metadata is created (although keep an eye on [[https://github.com/lorenzwalthert/precommit/issues/491][#491]] which suggests
updating automatically)

** roxygenize
:PROPERTIES:
:CUSTOM_ID: roxygenize
:END:
[[https://roxygen2.r-lib.org/][Roxygen2]] is a package for making the documentation to go with your package, it does this by parsing the documentation
strings ("docstrings" for short) that you adorn your functions with that describe the arguments and show example
usages. This hook requires additional configuration in ~.pre-commit-config.yaml~ as you have to install your package
dependencies. Fortunately there is a helper function in the ~precommit~ package so you can just run
~precommit::snippet_generate("additional-deps-roxygenize")~ and it will output the YAML that you need to add to your
~.pre-commit-config.yaml~.  It might look something like the following.

#+begin_example
    hooks:
    - id: no-debug-statement
    - id: roxygenize
      additional_dependencies:
        -    data.table
        -    dplyr
        -    dtplyr
        -    duckdb
        -    IMD
        -    lubridate
        -    stringr
#+end_example

** style-files
:PROPERTIES:
:CUSTOM_ID: style-files
:END:
The ~style-files~ hook runs the [[https://styler.r-lib.org/][styler]] package against your code to ensure it follows the [[https://style.tidyverse.org/][tidyverse style guide]] by
default, although it can be configured to use a custom style guide of your own creation.

** lintr
:PROPERTIES:
:CUSTOM_ID: lintr
:END:
The [[https://lintr.r-lib.org/][lintr]] package lints your code automatically. It can be configured by adding a ~.lintr~ configuration file to your
repository, a simple example is shown below. Note the indented closing parenthesis is important you get a complaint
about that and any other formatting issues.

#+begin_src R
linters: linters_with_defaults(
         line_length_linter(120),
         object_name_linter ~ NULL,
         object_usage_linter ~ NULL
  )
#+end_src

** ~spell-check~
:PROPERTIES:
:CUSTOM_ID: spell-check
:END:
This is a useful hook that checks your spelling and adds unusual words to a custom dictionary ~inst/WORDLIST~.

** ~deps-in-desc~
:PROPERTIES:
:CUSTOM_ID: deps-in-desc
:END:
This hook ensures that all dependencies that are loaded by your package are listed in the ~DESCRIPTION~ file so that
when the package is installed the necessary dependencies are also pulled in, fairly
essential..

** usethis package
:PROPERTIES:
:CUSTOM_ID: usethis-package
:END:
The [[https://usethis.r-lib.org][usethis]] package is a compliment to the [[https://devtools.r-lib.org][devtools]] package that has a lot of very useful helper functions. Some of
these enable additional ~pre-commit~ hooks whilst others enable GitHub actions, which are part of Continuous Integration
piplelines and I would highly recommend enabling them.

** ~README.Rmd~
:PROPERTIES:
:CUSTOM_ID: readme.rmd
:END:
The [[https://usethis.r-lib.org/reference/use_readme_rmd.html][~user_readme_rmd()~]] function automatically generates a ~README.Rmd~ template and will also create a ~pre-commit~
hook that keeps it synchronised with ~README.md~ whenever you update it. This is useful because the later,
plain-markdown, file is automatically rendered by GitHub/GitLab/Codeberg as your repositories front-page.

** ~use_github_action()~
:PROPERTIES:
:CUSTOM_ID: use_github_action
:END:
Invoking ~use_github_action()~ within your package repository will
prompt you for the type of action you wish to add to it. There are, as
of writing, three options.

#+begin_src R
    > use_github_action()
    Which action do you want to add? (0 to exit)
    (See <https://github.com/r-lib/actions/tree/v2/examples> for other options)

    1: check-standard: Run `R CMD check` on Linux, macOS, and Windows
    2: test-coverage: Compute test coverage and report to https://about.codecov.io
    3: pr-commands: Add /document and /style commands for pull requests
#+end_src

Selecting one will write a file to ~/.github/workflows/<FILENAME>.yaml~ and then print out code to add a badge to your
repository.

#+begin_src R
Selection: 1
    ✔ Adding '*.html' to '.github/.gitignore'
    ✔ Creating '.github/workflows/'
    ✔ Saving 'r-lib/actions/examples/check-standard.yaml@v2' to '.github/workflows/R-CMD-check.yaml'
    • Learn more at <https://github.com/r-lib/actions/blob/v2/examples/README.md>.
    • Copy and paste the following lines into 'README.Rmd':
      <!-- badges: start -->
      [![R-CMD-check](https://github.com/CUREd-Plus/cuRed/actions/workflows/R-CMD-check.yaml/badge.svg)](https://github.com/CUREd-Plus/cuRed/actions/workflows/R-CMD-check.yaml)
      <!-- badges: end -->
      [Copied to clipboard]
#+end_src

** Badges
:PROPERTIES:
:CUSTOM_ID: badges
:END:
Most of the GitHub Action functions described above include output that
can be copy and pasted into ~README.Rmd~ to include badges in your
GitHub front page. Again the
[[https://usethis.r-lib.org/reference/badges.html][usethis]] has you
covered and can generate the necessary code for the different badges it
supports.

* Gotchas
:PROPERTIES:
:CUSTOM_ID: gotchas
:END:
When starting out I found that I regularly didn't pass the ~pre-commit~ hooks first time. This can be jarring and
confusing to start with but its not something to worry about, they are there to ensure your code and package meet the
standards required. If you ever come to submit to [[https://cran.r-project.org][CRAN]] you will be grateful to have adhered to these standards.

Below I detail common "gotchas" I encountered when developing the package, what they mean and how to resolve them.

*** ~The following spelling errors were found:~
:PROPERTIES:
:CUSTOM_ID: the-following-spelling-errors-were-found
:END:
The ~spell-check~ hook /will/ fail if you've introduced new words that aren't in standard dictionaries with messages
similar to the those shown below. Sometimes these will be new words, sometimes they might be catching tpyos you have
made. In the example below ~famiy~ should be ~family~ so you need to correct the source of the tpyo (and you're told
where this is, in this case it was line 27 of ~CITATION.cff~), or if the new word should be added to the dictionary you
will have to stage the updated ~inst/WORDLIST~ file for inclusion in your commit.

#+begin_src sh
spell-check..............................................................Failed
- hook id: spell-check
- exit code: 1
- files were modified by this hook

ℹ Using R 4.3.1 (lockfile was generated with R 4.2.1)
ℹ Using R 4.3.1 (lockfile was generated with R 4.2.1)
The following spelling errors were found:
  WORD    FOUND IN
famiy   CITATION.cff:27
All spelling errors found were copied to inst/WORDLIST assuming they were not spelling errors and will be ignored in the future. Please  review the above list and for each word that is an actual typo:
 - fix it in the source code.
 - remove it again manually from inst/WORDLIST to make sure it's not ignored in the future. Then, try committing again.
Error: Spell check failed
Execution halted
#+end_src

** ~! codemeta.json is out of date~
:PROPERTIES:
:CUSTOM_ID: codemeta.json-is-out-of-date
:END:
If you modify the ~DESCRIPTION~ or ~CITATION.cff~ then the ~codemeta-description-updated~ hook /will/ fail with error
messages similar to the following.

#+begin_src sh
  codemeta-description-updated.............................................Failed - hook id: codemeta-description-updated
  - exit code: 1

  ℹ Using R 4.3.1 (lockfile was generated with R 4.2.1) ℹ Using R 4.3.1 (lockfile was generated with R 4.2.1) Error: !
  codemeta.json is out of date; please re-run codemetar::write_codemeta().  Backtrace: ▆ 1. └─rlang::abort("codemeta.json
  is out of date; please re-run codemetar::write_codemeta().")  Execution halted
#+end_src

This means yo need to update the ~codemeta.json~ with

#+begin_src R
  codemetar::write_codemeta()
#+end_src

*** ~Warning: Undocumented code objects:~
:PROPERTIES:
:CUSTOM_ID: warning-undocumented-code-objects
:END:
If this error arises its because there is a ~.Rd~ file missing. You can generate these by ensuring you have the
appropriate docstring definition prior to your function and then use the ~roxygen2::reoxygenise()~ function to generate
the documentation automatically. Don't forget to ~git stage~ and ~git commit~ the files to your repository, pushing if
needed (e.g. a Continuous Integration pipeline is failing).

* Windows
:PROPERTIES:
:CUSTOM_ID: windows
:END:
I haven't used Windows for about 23 years but I often have colleagues who do and that was the case with the R package
that I have started developing so I needed to get all members of the team up and running with the ~precommit~ R
package/pipeline.

Windows doesn't come with Python by default, but [[https://pre-commit.com][pre-commit]] is written in Python and so an environment is required in
order to run the above pre-commit hooks.  There are many options for this, including using [[https://learn.microsoft.com/en-us/windows/wsl/install][Windows Subsystem for Linux
(WSL)]]. I opted to try the solution provided in the [[https://cran.r-project.org/web/packages/precommit/vignettes/precommit.html][precommit vignette]]. This shows how to use the [[https://rstudio.github.io/reticulate/][reticulate]] package
which acts as a glue between [[https://r-project.org][R]] and [[https://python.org][Python]], to handle installing a [[https://docs.conda.io/en/latest/miniconda.html][Miniconda]] environment and setting up
~precommit~/~pre-commit~.


The following runs you through the things you need to install (R, RStudio, GitBash), setting up GitHub with [[https://ns-rse.github.io/#category=ssh][SSH]] keys and
enabling ~precommit~ for your R package locally.

** Install [[https://www.r-project.org][R]]
:PROPERTIES:
:CUSTOM_ID: install-r
:END:
When installing the defaults are fine, request admin permissions if required.

** Install [[https://posit.co/downloads/][Rstudio]]
:PROPERTIES:
:CUSTOM_ID: install-rstudio
:END:
Defaults are fine, request admin permissions if required.

** Install [[https://git-scm.com/download/win][GitBash]]
:PROPERTIES:
:CUSTOM_ID: install-gitbash
:END:
During installation you'll be asked a number of questions, if you're unsure how to respond to any of them the following
provides guidance.

1. *Text Editor* - Configure with your choice of editor, obviously you'll want to have
   [[https://www.gnu.org/software/emacs/][Emacs]] available and select that! :wink:
2. *Adjust your PATH environment* - At the bare minimum go with the =Recommended= option and allow /Git from the command
   line and also from 3rd-party software/. Optionally I would recommend the third option of /Use Git and optional UNIX
   tools from the Command Prompt/, particularly if you are either a) familiar with UNIX commands or b) not at all
   familiar with them (as you won't have to re-learn the Windows commands, learn the Bash commands they are more widely
   applicable).
3. *Use Bundled SSH library* - Use the bundled SSH library.
4. *Use Bundled OpenSSL library* - Use the bundled OpenSSL library.
5. *Checkout Windows-style, commit Unix-style line endings* - This is fine, it just changes the internal representation
   of the carriage return to be more universal.
6. *Use MinTTY* - The default terminal of MSYS2 is fine and more functional than the Windows' default console window.
7. *Default Merge behaviour* - The default (fast-forward or merge) this is fine.
8. *Choose a credential helper* - Select /None/ here, we will let RStudio manage these.
9. *Configure Extra Options* - Defaults are fine.
10. *Configuring experimental options* - No need to enable any of these.

** Configure Git
:PROPERTIES:
:CUSTOM_ID: configure-git
:END:
Start a GitBash shell and configure your email address and name.

#+begin_src sh
  git config --global user.email "you@example.com" git config --global user.name "Your Name"
#+end_src

** Configure RStudio/GitHub with SSH keys
:PROPERTIES:
:CUSTOM_ID: configure-rstudiogithub-with-ssh-keys
:END:
1. Start RStudio
2. Create SSH key - Navigate to /Tools > General Options > Git/SVN > Create SSH Key/ and under /SSH key type/ select the
   default (/ED25519/) this is a [[https://blog.g3rt.nl/upgrade-your-ssh-keys.html][very secure elliptic curve algorithm]] and is supported by GitHub. Use a secure password
   (i.e. long), do *not* change the location it is created at.
3. Once created select /View public key/ and use /Ctrl + c/ to copy this to your clipboard.
4. Navigate to [[https://github.com/][GitHub]] and login then click on your avatar in the top right and select /Settings > SSH and GPG keys > New
   SSH Key/.
5. Give the key a name and paste into the box below where indicated/instructed then click on /Add SSH key/.

** Clone Repository
:PROPERTIES:
:CUSTOM_ID: clone-repository
:END:
Its likely that you will have an existing repository that you wish to work on with this pipeline, if so you will have to
clone it locally so you can work on it with the ~precommit~ pipeline. The following assumes you have added your SSH key
to your GitHub account as described above.

1. Navigate to the repository you wish to clone (e.g. [[https://github.com/CUREd-Plus/cuRed/]]) and click on the /Code/
   button then select /SSH/ under the /Local/ tab in the box that appears.
2. Click on the box that has two small squares to the right of some text to copy the URL to clipboard.
3. Return to RStudio and start a new project with /File > New Project > Version Control > Git/ and paste the URL into
   the /Repository URL/.  Select a location to clone to under /Create project as subdirectory of:/,
   e.g. ~c:/Users/<username>/work/cuRed~ (replacing ~<username>~ with /your/ username).
4. If prompted for password enter it. If asked to answer /Yes\/No/ answer /Yes/ and then if prompted to /Store password
   for this session/ answer /Yes/.
5. You should now have cloned the repository and have a project to work on.

** Install ~pre-commit~
:PROPERTIES:
:CUSTOM_ID: install-pre-commit
:END:
As mentioned above ~pre-commit~ refers to two things, primarily it is the Python package
[[https://pre-commit.com][~pre-commit~]] that does all the work of running Linting, Tests etc. before making commits. It
also refers to an R package [[https://cran.r-project.org/web//packages/precommit/vignettes/precommit.html][precommit]]
(note the omission of the hyphen ~-~) that works with the Python package to enable use of various R packages that carry
out such checks. Because it is a Python package it needs a Python Virtual Environment to run.  This may sound unfamiliar
but don't worry the R ~precommit~ package and documentation guides you through doing so, what follows is a rehash of the
[[https://cran.r-project.org/web//packages/precommit/vignettes/precommit.html][official documentation]].

** Install ~precommit~ and ~reticulate~
:PROPERTIES:
:CUSTOM_ID: install-precommit-and-reticulate
:END:
From RStudio install the ~remotes~ and ~reticulate~ package, then install the most recent version of ~precommit~
directly from GitHub.

#+begin_src R
  install.packages(c("remotes", "reticulate")) remotes::install_github("lorenzwalthert/precommit")
#+end_src

**** Install Miniconda environment
:PROPERTIES:
:CUSTOM_ID: install-miniconda-environment
:END:
You can now use ~reticulate~ to install a [[https://docs.conda.io/en/latest/miniconda.html][Miniconda]] virtual
environment framework for R to run Python packages (i.e. ~pre-commit~).

#+begin_src R
  options(timeout~600) reticulate::install_miniconda()
#+end_src

**** Install ~pre-commit~ framework
:PROPERTIES:
:CUSTOM_ID: install-pre-commit-framework
:END:
This step now installs the Python package [[https://pre-commit.com][~pre-commit~]] within a new Miniconda virtual
environment (by default ~r-precommit~). There will be a fair bit of output here as all the dependencies in Python for
~pre-commit~ are downloaded.

#+begin_src R
  precommit::install_precommit() precommit::autoupdate()
#+end_src

**** Use ~precommit~ with the existing project
:PROPERTIES:
:CUSTOM_ID: use-precommit-with-the-existing-project
:END:
You should have cloned the repository you wish to enable ~precommit~ to use (see above). You now need to enable
~precommit~ for this local copy of the repository. This will place a script in ~.git/hooks/pre-commit~ that says which
Miniconda environment to use (~r-precommit~) and will activate this whenever a commit is made, the ~install_hooks ~
TRUE~ ensures that the R specific hooks and their required environments are installed (under ~\~/.config/pre-commit/~).

Make sure you have opened the ~.Rproj~ file in RStudio, this ensures you are within the project directory that you want
to install ~precommit~ to (alternatively used ~setwd()~).

#+begin_src R
  precommit::use_precommit(install_hooks ~ TRUE)
#+end_src

* Links
:PROPERTIES:
:CUSTOM_ID: links
:END:
- [[https://r-pkgs.org/][R Packages book by Hadley Wickham and Jenny Bryan]]
- [[https://happygitwithr.com][Happy Git and GitHub for the userR by Jenny Bryan]]

** R Packages
:PROPERTIES:
:CUSTOM_ID: r-packages
:END:
- [[https://devtools.r-lib.org/][devtools]]
- [[https://usethis.r-lib.org][usethis]]
- [[https://roxygen2.r-lib.org/][roxygen2]]
- [[https://cran.r-project.org/web//packages/precommit/vignettes/precommit.html][R precommit]]
- [[https://github.com/lorenzwalthert/precommit][GitHub | lorenzwalthert/precommit]] check the [[https://github.com/lorenzwalthert/precommit/issues][Issues]], can be useful
  for troubleshooting.

** Python
:PROPERTIES:
:CUSTOM_ID: python
:END:
- [[https://docs.conda.io/en/latest/miniconda.html][Miniconda]]

** Pre-commit
:PROPERTIES:
:CUSTOM_ID: pre-commit-1
:END:
- [[https://pre-commit.com][pre-commit]]
- [[https://pre-commit.ci][pre-commit.ci]]
- [[https://ns-rse.github.io/#category~pre-commit][ns-rse | pre-commit]] blog posts I've made about ~pre-commit~.
