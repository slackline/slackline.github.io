:PROPERTIES:
:ID:       708f5d99-6040-4306-a323-306d39ce45c3
:mtime:    20250413173540 20250205224152 20241206212307 20241203232124 20241203220011 20240715163129 20240709204003 20240611153339 20240331202209 20240225185002 20240206201930 20240118162910 20231113221350 20230621183025 20230511204503 20230215095632 20230129085036 20230114084505 20230103103311 20221209211925
:ctime:    20221209211925
:END:
#+TITLE: Emacs Lisp
#+DATE: [2022-12-09 Fri 21:06]
#+FILETAGS: :emacs:lisp:programming:

Emacs LISP is a [[id:ea1499ab-dab2-49b1-8479-cb5a2fbd38bc][Programming]] language specifically for using under [[id:754f25a5-3429-4504-8a17-4efea1568eba][Emacs]] and it has developed and evolved in tandem with
Emacs itself. The easiest way of getting started with Emacs is to use the built-in /An Introduction to Programming in
Emacs Lisp/ that is available from within Emacs using ~C-h i m Emacs Lisp Intro~

* [[https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html][An Introduction to Programming in Emacs Lisp]]

** [[https://www.gnu.org/software/emacs/manual/html_node/eintr/List-Processing.html][Chapter 1 - List Processing]]

*** Syntax
+ A list is anything in parentheses.
+ Lists consist of atoms, indivisible units, separated by white space.
+ /symbolic expressions/ (/s-expressions/ or /sexp/) are the printed representation of atoms and lists.
+ The first element of a list is treated as a function e.g. in ~(+ 21 34)~ the ~+~ is a function (for addition) and it
  acts on the remaining elements of the list.
+ Prefixing a list  with a single quote ~'~ (~'(something else in a list)~) prevents the first element of the list being
  treated as a function.
+ Evaluating a list where the first element isn't a function (e.g. ~(not a list that begins with a function)~) results
  in an error and the debugger is started automatically.
+ If a symbol (typically an atom in a list) is not a function then the place it should hold the details of the function
  is "void" hence the ~void-function~ error message.
+ The list ~(+ 21 34)~ the ~+~ is a function and has a set of instructions associated with it that tell the interpreter
  what to do with the remainder of the list.

*** Lisp Interpreter

Works from left to right and...

1. Looks for quote at start, if found returns the list.
2. Looks for function associated with first element (atom) of the list, if found carries out the instructions.
3. If 1. and 2. are not met an error message is printed (and the debugger may be started).

The result of evaluation are that a value is returned, or some other side-effect takes place (e.g. copying
files). Printing the results is considered a side-effect but one that is widely used.

+ Nested or "inner" lists are evaluated first and their returned value used in the outer list.
+ You can evaluate the nested list in place and see its returned value by placing the cursor after the closing
  parentheses.
+ You can evaluate numbers.

**** Exceptions

+ Lisp interpreter can evaluate symbols that are not quoted or lack parentheses and treats these as "variables".
+ Some functions don't behave the same as other functions.
+ Macros aren't functions they translate a Lisp expression into another expression that is evaluated instead.
+ If the first argument of a list is itself a list it is evaluated first.

*** Variables

+ Symbols can have either a function definition attached or a value, or both.
+ Having a value associated with a symbol is what makes it a variable.
+ To find the value associated with a variable simply evaluate it.
+ You can set the value of a variable(/symbol) using ~setq~, remembering that we place the function first in parentheses
  followed by the symbol and then a quoted list we can.

#+begin_src elisp
  (setq our_cats '(george cali carrot coco))
#+end_src

...sets ~our_cats~ to be the list. After evaluating you can check the value of ~our_cats~.

**** Errors with Symbols/Variables

+ If you try to evaluate a variable as a function when it has no function associated with it a ~void-function~ error is
  raised and the debugger entered. This can easily happen if the variable/symbol is the first argument within
  parentheses.
+ Similarly if you attempt to evaluate a symbol that has a function but no value associated with it you will see a
  ~void-variable~ error is raised.

* Commands

+ Evaluate the previous list using ~C-x C-e~ when the cursor is after the last parentheses.
+ Exit the debugger with ~q~.

* Tips and Tricks

** Back Ticks and Commas

Backticks (~`~) allow you to selectively evaluate sections of a list that are preceded with a comma (~,~). The list ~`(1
2 (3 +4))~ and ~'(1 2 (3 + 4))~ both return nothing as they are not evaluated, but ~`(1 2 ,(3 + 4))~ returns ~`(1 2 7)~
as the list after the comma is evaluated (but only if a back-tick is used) ([[https://fosstodon.org/@dliden@emacs.ch/111884927150599744][source]] / [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html][manual]]).

* Links

+ [[https://github.com/p3r7/awesome-elisp][p3r7/awesome-elisp: üèµÔ∏è A curated list of Emacs Lisp development resources]]

** Articles

+ [[https://yoo2080.wordpress.com/2011/12/31/lexical-scoping-and-dynamic-scoping-in-emacs-lisp/][lexical scoping and dynamic scoping in Emacs Lisp | Yoo Box]]

** Learning Resources

+ [[https://protesilaos.com/emacs/emacs-lisp-elements][Emacs Lisp Elements | Protesilaos Stavrou]]
+ [[https://github.com/kickingvegas/elisp-for-python][kickingvegas/elisp-for-python: Elisp Cheatsheet for Python Programmers]]
+ [[https://emacs.stackexchange.com/a/47320/10100][How Can I Start Learning Emacs Lisp]] - useful answers on [[https://emacs.stackexchange.com/][emacs.stackexchange.com]]
+ [[https://craft-of-emacs.kebab-ca.se/index.html][The Craft of Emacs]]
+ [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oPQtn7FQEF3D7sroZbXuPZ7][Learning Emacs Lisp - SystemCrafters]] / [[https://systemcrafters.net/learning-emacs-lisp/][System Crafters - Learning Emacs Lisp]]
+ [[https://yt.artemislena.eu/watch?v=x9Qws7ZOksc][Learning Elisp - 1 - intro - Invidious]]
+ [[https://www.youtube.com/playlist?list=PL9KxKa8NpFxKGctwh4-BqjQvdSRhh4NV-][learning-elisp - YouTube]]


*** Gavin Freeborn

+ [[https://piped.video/watch?v=NocDm4zzToo][LEARN EMACS LISP - Mostly The Strange Parts - Piped]]
+ [[https://piped.video/watch?v=AfY_zGR_QBI][Why Lisp Is One Of The Most Productive Programming Languages]]
+ [[https://piped.video/watch?v=1y__2IK-aLM][Learn Emacs Lisp in 30 Minutes]]


** Documentation

+ [[https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html][An Introduction to Programming in Emacs Lisp]]
+ [[http://landoflisp.com/][Land of Lisp]]
+ [[https://cl-cookbook.sourceforge.net/index.html][The Common Lisp Cookbook]]
+ [[https://www.gnu.org/software/emacs/casting-spels-emacs/html/casting-spels-emacs-1.html][Casting SPELs in Lisp]]

** History

+ [[https://www.theregister.com/2023/12/25/the_war_of_the_workstations/][The war of the workstations ‚Ä¢ The Register]]
+ [[https://dl.acm.org/doi/10.1145/3386324][Evolution of Emacs Lisp | Proceedings of the ACM on Programming Languages]]

** Debugging

+ [[https://xenodium.com/inline-previous-result-and-why-you-should-edebug/][Inline previous result and why you should edebug]]
