:PROPERTIES:
:ID:       2b7bd9a6-cf65-460b-a080-bf865d14be9b
:mtime:    20241116094759
:ctime:    20241116094759
:END:
#+TITLE: R Maintenance
#+FILETAGS: :r:foss:statistics:admin:

* Configuration

By default R looks for ~\~/.Rprofile~ on starting to load options and configuration. There are, as always, caveats to
this. For example the ~\~/.R/Makevars~ file defines options for compiling packages from source and may look like the
following which enables multiple cores to be used by ~gcc~ when building from source.

#+begin_src r
    CFLAGS=-O3 -Wall -pedantic -march=native -mtune=native -pipe
    CXXFLAGS=-O3 -Wall -pedantic -march=native -mtune=native -pipe
    MAKEOPTS=-j$(nproc)
#+end_src

* Installing Packages

It's easy to install packages from CRAN with

#+begin_src r
packages_to_install <- c("tidyverse", "tidymodels", "ggplot2")
> install.packages(packages_to_install)
#+end_src


** R Universe

** GitHub

** Gotchas

Sometimes if installation of a package fails it leaves around a ~00LOCK-<pkg>~ directory which can prevent subsequent
upgrades/installs these can be safely deleted.

The V8 package has an external system dependency on ~libv8~, it gives advice on how to install it on some systems but
not all. Under [[id:44b32b4e-1bef-49eb-b53c-86d9129cb29a][Gentoo]] there doesn't appear to be such a package but there is advice given, which is to set the
environment variable ~DOWNLOAD_STATIC_LIBV8=1~ so you can...

#+begin_src r
Sys.setenv(DOWNLOAD_STATIC_LIBV8=1)
update.packages(ask = FALSE)
#+end_src

...and it will download the library that is required.


* Updating Packages
You can update packages with

#+begin_src r
update.packages(ask = FALSE)
#+end_src

** Force update all packages

You can force updating all packages, e.g. after a major R version update with

#+begin_src r
install.packages(
    lib  = lib <- .libPaths()[1],
    pkgs = as.data.frame(installed.packages(lib), stringsAsFactors=FALSE)$Package,
    type = 'source'
)
#+end_src

* Connectivity

Some packages, by their nature (e.g. ~{googlesheets}~) require network connectivity to work, but not all do. You can
check whether a given package needs network connectivity (under GNU/Linux at least) with

#+begin_src: bash
unshare --net --ipc -r R CMD check {package}_0.1.0.tar.gz
#+end_src
