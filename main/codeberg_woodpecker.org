:PROPERTIES:
:ID:       284615e5-516f-4b04-a3d8-2a5ea9480f8e
:mtime:    20250920202254 20250920075930 20250917072819
:ctime:    20250917072819
:END:
#+TITLE: Codeberg Woodpecker CI
#+FILETAGS: :git:codeberg:forge:ci:

[[https://ci.codeberg.org/][Codeberg Woodpecker CI]] is an instance of [[https://woodpecker-ci.org/][Woodpecker CI]] that authorised users of Codeberg are allowed to access. Unlike
[[id:52b4db29-ba21-4a8a-9b83-6e9a8dc02f41][GitHub]] [[id:240b85db-27c9-4848-9d3f-c3be841a193b][Codeberg]] is a non-profit and don't have unlimited resources to offer for free. To apply for access [[https://codeberg.org/Codeberg-e.V./requests/issues/new?template=ISSUE_TEMPLATE%2fWoodpecker-CI.yaml][fill out this
form]]. I found turn around was pretty quick and was granted access within a couple of hours.


* Configuration

At [[https://ci.codeberg.org/repos/add][ci.codeberg.org/repos/add]] you see a list of the repositories, select which ones you wish to Enable and you will be
taken to the pipeline's page showing you the results of running the different pipelines you have configured for that
repository.

You have to provide a token that permits

** SSH Keys

You need to generate [[id:ae1e9b97-feb0-4f1a-b804-b89edaf5a790][SSH]] keys and add the private key to ~Secrets~ on ~ci.codeberg.org/user/secrets~ and the public key
to your account on ~codeberg.org~ so that pushes can be made. As these will run automatically they should be
password-less.

#+begin_src
ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/codeberg_ed25519
#+end_src

Once generated copy your private key to your account on [[https://ci.codeberg.org/user/secrets][ci.codeberg/user/secrets]] with the name
~codeberg_push_from_ci_priv_key~ and add the public to your account on Codeberg itself (under /Settings > SSH / GPG
keys/).

* Pipelines

Configuration files live in the ~.woodpecker/~ directory and are, as with [[id:52b4db29-ba21-4a8a-9b83-6e9a8dc02f41][GitHub]] and [[id:7cbd61f2-d6a5-4e67-af72-2a13a5e86faa][GitLab]], [[id:fac7a695-9bdf-4a79-9ec3-9945e9a0cba4][YAML]] files.

** Templates

There is a useful repository of [[https://codeberg.org/Codeberg-CI/examples][Codeberg CI examples]] that can be perused for inspiration. Useful one's I've spotted so
far are...

+ [[https://codeberg.org/Codeberg-CI/examples/src/branch/main/Python/.woodpecker/mkdocs.yaml][Python/.woodpecker/mkdocs.yaml]] - Static Site Generator mkdocs example
+ [[https://codeberg.org/Codeberg-CI/examples/src/branch/main/Python/.woodpecker/code-quality.yaml][Python/.woodpecker/code-quality.yaml]] - Standard CI pipeline to test Python packages code on multiple Python distributions.
+ [[https://codeberg.org/Codeberg-CI/examples/src/branch/main/Typst/.woodpecker.yaml][R/.woodpecker.yaml]] - Installs R package dependencies and runs R CMD check

** Examples

*** Build and deploy mkdocs

See also [[id:3150b126-53ea-43db-b726-981ad0d314eb][Codeberg Pages]].

*** Python Test Suite

Copy the  [[https://codeberg.org/Codeberg-CI/examples/src/branch/main/Python/.woodpecker/code-quality.yaml][Python/.woodpecker/code-quality.yaml]] to your repositories ~.woodpecker/tests.yaml~ (or other similarly named
file). I tweaked this a bit and ended up with the following.

#+begin_src yaml
# This config shows how to handle Python-CI focusing on code quality
# was taken from https://codeberg.org/sail.black/serial-sphinx/src/branch/main/.woodpecker.yml
# check there for license information

steps:
  standardize:
    image: python:3.9-buster
    when:
      event: pull_request
      branch: main
    commands:
      - python -m pip install --upgrade pip
      # Edit this based on your project.optional-dependencies defined in pyproject.toml
      - python -m pip install -e .[tests,docs,dev,pypi]

  build:
    image: python:${TAG}-buster
    when:
      event: pull_request
      branch: main

    commands:
      - ls
      - python -m venv venv
      - /bin/bash -c "source venv/bin/activate"
      - python -m pip install --upgrade pip
      - python -m pip install -e .[tests,docs,dev,pypi]
      - pytest

matrix:
  TAG:
    - 3.10
    - 3.11
    # - 3.12
    # - 3.13

#+end_src

I tried changing ~standardize~ and ~build~ step names but they didn't seem to then run for some reason.

*** Pre-commit checks

I wanted to run pre-commit checks on Pull Requests in a similar vein to [[id:8c412a9d-c7ff-4afc-bc05-7bec3f06aa41][Pre-commit CI]] so knocked up the following.

#+begin_src yaml
# This config shows how to handle Python-CI focusing on code quality
# was taken from https://codeberg.org/sail.black/serial-sphinx/src/branch/main/.woodpecker.yml
# check there for license information

steps:
  standardize:
    image: python:3.9-buster
    when:
      event: pull_request
      branch: main
    commands:
      - python -m pip install --upgrade pip
      # Edit this based on your project.optional-dependencies defined in pyproject.toml
      - python -m pip install -e .[tests,docs,dev,pypi]

  build:
    image: python:${TAG}-buster
    when:
      event: pull_request
      branch: main

    commands:
      - ls
      - python -m venv venv
      - /bin/bash -c "source venv/bin/activate"
      - python -m pip install --upgrade pip
      # Edit this based on your project.optional-dependencies defined in pyproject.toml
      - python -m pip install -e .[tests,docs,dev,pypi]
      - pre-commit run --all-files

matrix:
  TAG:
    - 3.11
    # - 3.12
    # - 3.13

#+end_src

This works in so much as it runs but because I have the ~no-commit-to-branch~ check enabled which protects the
~main~/~master~ branches from commits it will always fail on pull requests that target these branches. Can't think of a
way around this at present.

** Running Manually

Whilst Woodpecker allows triggering pipelines manually they may not necessarily run as expected because of the
~when.event:~ configuration in the files.
