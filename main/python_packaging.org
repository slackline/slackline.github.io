:PROPERTIES:
:ID:       bb57f65e-58f4-45de-9620-901dc998f6d6
:mtime:    20230312225913 20230311130516 20230301211740 20230301095721 20230227221806 20230207111629 20230103103312 20221228113913 20230103103309
:ctime:    20221228113913 20230103103309
:END:
#+TITLE: Python Packaging
#+DATE: [2022-04-27 Wed 07:38]
#+FILETAGS: :python:programming:packaging:pip:

This page describes steps in creating a [[id:5b5d1562-ecb4-4199-b530-e7993723e112][Python]] package. If you are looking for information on installing packages this
is done using [[id:47543a76-a873-4c07-b30d-926f50b31fca][Python PIP]].

[[id:5b5d1562-ecb4-4199-b530-e7993723e112][Python]] packaging is it seems in a constant state of flux. There is the official [[https://packaging.python.org/en/latest/][Python Packaging User Guide]] from the
[[https://www.pypa.io/en/latest/][Python Packaging Authority]] which is probably the best resource to read but things change, and often quickly. This
document focuses on [[https://setuptools.pypa.io/en/latest/index.html][Setuptools]] which works with Python >= 3.7, but you may wish to consider other packages such as
[[id:8aed2c14-86e7-4b0e-bfe6-e783831bfca2][Poetry]] or [[id:37748065-f956-4d0c-9301-c4d51439b1b4][PDM]] which offer some advantages but with additional learning.

* Package Structure

You should place your code within a Git version controlled directory for your project. It is then normal to place all
files in an organised hierarchy with a sub-directory of the same name for Python code, tests under ~tests~

#+BEGIN_SRC sh eval: no
  .
  ├── ./build
  ├── ./dist
  ├── ./
  ├── ./topostats
  ├── ./topostats/__init__.py
  ├── ./topostats/filters.py
  ├── ./topostats/grains.py
  └── ./tests
      ├── ./tests/conftest.py
      ├── ./tests/resources
      └── ./tests/tracing
#+END_SRC

** \__init\__.py

In older versions of Python (<3.3) a ~__init__.py~ was required in every directory and sub-directory that was to be a
module/sub-module. In more recent versions of Python (>\=3.3) they are not essential though as Python uses [[https://docs.python.org/3/reference/import.html#namespace-packages][namespace
packages]]. But in most cases its simpler to include such a file in the top level of your directory.  ~__init__.py~ files
can be completely empty or they can contain code that is used throughout your package, such as setting up a logger or
setting the package version.

#+CAPTION: Example ~__init__.py~ that sets up logging and sets the ~__version__~
#+BEGIN_SRC python :eval no
  """Topostats"""
  from .logs.logs import setup_logger
  from . import _version

  LOGGER = setup_logger()

  __version__ = _version.get_versions()["version"]
#+END_SRC



* Configuration

Package configuration has been and is in a state of flux, there was original [[id:9187a00f-e287-4e1c-9f33-bd439e7f6cf2][setup.py]] which was then complemented and
gradually replaced by [[id:7cc9d18e-e161-4eec-8e03-c99968294a9f][setup.cfg]]. The new method on the block though is ~pyproject.toml~ which, with a little tweaking
and judicious choice of packages can handle everything.

** pyproject.toml

Setuptools is shifting towards using ~pyproject.toml~ and whilst it is still under development although its already
highly functional. Its written in [[https://toml.io/en/][Tom's Obvious Minimal Language]] and isn't too dissimilar in structure to ~setup.cfg~.

A useful reference for writing your configuration in ~pyproject.toml~ is [[https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html][Configuring setuptools using pyproject.toml
files]]. It is based around [[https://peps.python.org/pep-0621/][PEP 621 – Storing project metadata in pyproject.toml | peps.python.org]]

A bare-bones ~pyproject.toml~ file should reside in the top level of your directory with the following (**NB** This
includes the minimum versions and ~setuptools_scm~ extension for dynamically setting package version)...

*** Build System
#+CAPTION: ~build-system~ section of ~pyproject.toml~ from [[https://github.com/AFM-SPM/TopoStats/blob/main/pyproject.toml][TopoStats]].
#+begin_src conf
  [build-system]
  requires = ["setuptools>=45", "setuptools_scm[tools]>=6.2"]
  build-backend = "setuptools.build_meta"
#+end_src

Traditionally configuration of meta-data such as author, code repository and license was made via ~setup.py~ but you can
either specify some (or most) of this in ~pyproject.toml~ or a concurrent ~setup.cfg~.

*** Project

This is the main body of the project description detailing ~name~, ~authors~, ~description~, ~readme~, ~license~,
~keywords~, ~classifiers~, ~dependencies~ and ~version~ amongst other things.

All other sections are considered tools and are defined under their own heading with ~tool.<package>[.<options>]~.

*** Setuptools

*** Pytest Options

#+CAPTION: ~tool.versioneer~ section of ~pyproject.toml~ from [[https://github.com/AFM-SPM/TopoStats/blob/main/pyproject.toml][TopoStats]].
#+begin_src conf
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "--cov --mpl"
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning"
]

#+end_src

*** Black Options

#+CAPTION: ~tool.black~ section of ~pyproject.toml~ from [[https://github.com/AFM-SPM/TopoStats/blob/main/pyproject.toml][TopoStats]].
#+begin_src toml
[tool.black]
line-length = 120
target-version = ['py38']
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.venv
  )/
)
'''

#+end_src

*** Flake8

The developers of Flake8 will not be supporting ~pyproject.toml~ for configuration. This is a shame but a work around is
available in the form of [[https://github.com/john-hen/Flake8-pyproject][Flake8-pyproject]].

#+begin_src toml
  [tool.flake8]
  ignore = ['E231', 'E241']
  per-file-ignores = [
      '__init__.py:F401',
  ]
  max-line-length = 120
  count = true
#+end_src

*** setuptools_scm

[[https://github.com/pypa/setuptools_scm/][setuptools_scm]] is a simple to use extension to setuptools that dynamically sets the package version based on the version
control data.

You _must_
*** Entry Points

These are defined under ~project.scripts~

#+CAPTION: Defining entry points in ~pyproject.toml~
#+begin_src toml
  [project.scripts]
  tcx2gpx = "tcx2gpx:process"
#+end_src

*** Versioneer Options [DEPRECATED]

You can configure Versioneer from ~pyproject.toml~ but I would highly recommend using ~setuptools_scm~ instead, its far
simpler.

#+CAPTION: ~build-system~ section of ~pyproject.toml~ from [[https://github.com/AFM-SPM/TopoStats/blob/main/pyproject.toml][TopoStats]].
#+begin_src toml
[tool.versioneer]
VCS = "git"
style = "pep440"
versionfile_source = "topostats/_version.py"
versionfile_build = "topostats/_version.py"
tag_prefix = "v"
parentdir_prefix = ""
#+end_src



* Building your Package

** Generate Distribution Archive

In your package directory you can create a distribution of your package with the latest versions of ~setuptools~ and ~wheel~. To do
this in your virtual environment run the following. The documentation for how to do this is at [[https://setuptools.pypa.io/en/latest/setuptools.html][Building and Distributing
Packages with Setuptools]].

You should as mentioned above have the following in ~pyproject.toml~

#+begin_src :eval no
  [build-system]
  requires = [
    "setuptools >= 65.6.3",
    "wheel",
  ]
  build-backend = "setuptools.build_meta"
#+end_src

The package can now be built locally with...

#+begin_src bash :eval no
  python -m pip install --upgrade setuptools wheel
  python -m build
#+end_src

...and the resulting package will be generated in the ~dist/~ directory.

* Versioning

Typically the version is defined in the ~__version__~ value in the top-level ~__init__.py~ or as a value in ~[metadata]~
of either ~setup.cfg~ or ~pyproject.toml~ but this has some downsides in that you have to remember to update the string
manually when you are ready for a release and it doesn't tie in with using tags in Git to tag versions of your commits.

It is worth taking a moment to read and understand about [[https://semver.org/][Semantic Versioning]] which you are likely to use in versioning
your software.

** Setuptools_scm
[[https://github.com/pypa/setuptools_scm][pypa/setuptools_scm]] is a newer tool compared to [[id:32bdd209-92be-454e-9741-b1d453d1c0e2][versioneer]] but is simpler as it relies solely on configuration via
~pyproject.toml~ rather than being dependent on now deprecated ~setup.py~.


** Step-by-step

1. ~pip install versioneer~
2. Modify ~pyproject.toml~ or ~setup.cfg~ (I use the later). It is /vital/ that the ~tag_prefix~ is correct.
   #+BEGIN_SRC python :eval no
   [versioneer]
   VCS = git
   style = pep440
   versionfile_source = clarity/_version.py
   versionfile_build = clarity/_version.py
   tag_prefix = v
   parentdir_prefix =
   #+END_SRC
3. If using non-vendored mode further modify ~pyproject.toml~
4. Add ~import versioneer~ and additional lines to obtain version to ~setup.py~
   #+BEGIN_SRC python :eval no
     """Package setup"""
     from setuptools import setup
     import versioneer

     setup(
         version=versioneer.get_version(),
         cmdclass=versioneer.get_cmdclass(),
     )
   #+END_SRC
5. Run ~versioneer install --[no-]vendor~ (I have used ~--no-vendor~ so far).
6. Add ~versioneer~ to the ~[pypi]~ requirements section of ~setup.cfg~
   #+BEGIN_SRC python :eval no
   [options.extras_require]
   pypi =
     build
     versioneer
   #+END_SRC
7. ~pip install .[pypi]~
8. Add the ~pypi.yaml~ to ~\~/.github/workflows/~ directory.

9. Add new repository secrets for [[https://pypi.org/][PYPI_API_TOKEN]] and [[https://test.pypi.org][TEST_PYPI_API_TOKEN]] under /Settings > Secrets > Actions/ you have
   to generate the tokens on both PyPI and Test PyPI.


* Publishing to [[https://pypi.org][PyPI]]

Before pushing the package to the main PyPi server it is prudent to test things out on  [[https://test.pypi.org/][TestPyPI]] first. You must first
generate an API Token from your account settings page. It needs a name and the scope should be `Entire account (all
projects)`. This token will be shown once so do *not* navigate away from the page until you have copied it.


You use [[https://twine.readthedocs.io/en/latest/][twine]] to upload the package and should create a ~.pypirc~ file in the root of the packages directory that
contains your API key and the username ~__token__~

#+begin_src conf :eval no
  [testpypi]
    username = __token__
    password = pypi-dfkjh9384hdszfkjnkjahkjfhd3YAJKSHE0089asdf0lkjsjJLLS_-0942358JKHDKjhkljna39o854yurlaoisdvnzli8yw459872jkhlkjsdfkjhdfJZZZZZF
#+end_src

Once this is in place you are ready to use ~twine~ to upload the package using the configuration file you have just
created.

#+begin_src bash :eval no
  twine upload --config-file ./.pypirc --repository testpypi dist/*
#+end_src

** Testing Download

After having uploaded your package to the TestPyPI server you should create a clean virtual environment and try
installing the package from where you have just uploaded it. You can do this using ~pip~ and the ~--index-url~ and
~--extra-index-url~, the former installs your package from TestPyPI, the later installs dependencies from PyPI.

#+begin_src bash :eval no
  pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ your-package
#+end_src

Once installed you can try running the code, scripts or notebooks associated with the package as you would normally.

** Repeat for PyPI

Once you are happy this is working you can repeat the process on the main [[https://pypi.org][PyPI]] server. You can add the token that you
generate to ~/.pypirc~ under a separate heading.

#+begin_src conf :eval no
  [testpypi]
    username = __token__
    password = pypi-dfkjh9384hdszfkjnkjahkjfhd3YAJKSHE0089asdf0lkjsjJLLS_-0942358JKHDKjhkljna39o854yurlaoisdvnzli8yw459872jkhlkjsdfkjhdfJZZZZZF
  [pypi]
    username = __token__
    password = pypi-dfkjh9384hdszfkjnkjahkjfhd3YAJKSHE0089asdf0lkjsjJLLS_-0942358JKHDKjhkljna39o854yurlaoisdvnzli8yw459872jkhlkjsdfkjhdfJZZZZZF
#+end_src


** GitHub Action

Manually uploading is somewhat time consuming and tedious. Fortunately though with versioneer in place and tokens
generated we can automate the process of building and uploading packages to PyPI using the GitHub Action
[[https://github.com/pypa/gh-action-pypi-publish][gh-action-pypi-publish]] (read more about [[id:e19b6eb6-46b2-440a-ba35-be29feb33407][GitHub Actions]]). You will have already generated [[https://pypi.org/help/#apitoken][generate a PYPI token]] (and
similarly one for [[https://test.pypi.org][test PyPI]]) and these can stored on the projects GitHub account under /Settings > Secrets > Actions/
with the names ~PYPI_API_TOKEN~ and ~TEST_PYPI_API_TOKEN~ respectively.  You can then include the following GitHub
Action under ~.github/workflow/pypi.yaml~.

#+BEGIN_SRC yaml :eval no
name: Publish package to PyPi

on:
  push:
    tags:
      - v*
jobs:
  build-release:
    runs-on: ubuntu-latest
    name: Publish package to PyPi
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v4.3.0
        with:
          python-version: 3.9
      - name: Installing the package
        run: |
          pip3 install versioneer
          pip3 install .
          pip3 install .[pypi]
      - name: Build package
        run: |
          python -m build --no-isolation
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
#+END_SRC


** Releasing via GitHub
:PROPERTIES:
:mtime:    20230103103311
:ctime:    20230103103311
:END:

With [[#versioneer][versioneer]] in place and a [[id:5e1f167e-5c0c-4206-b2ac-6694e08524d8][GitHub Action]] setup and configured it is now possible to make a release to PyPI via
GitHub Releases.

1) Go to the Releases page (its linked from the right-hand side of the front-page).
2) Draft a New release.
3) Create a new tag using semantic versioning and select "Create new tag v#.#.# on publish".
4) Click the "Generate Release Notes" button, this adds all the titles for all Pull Requests, I'll often remove all
   these but leave the link to the ~ChangeLog~ that is generated for the release.
5) Write your release notes.
6) Select "Set as latest release".
7) Select "Create a discussion for this releases" and select "Announcements".
8) Click on "Publish Release".

* PDM
:PROPERTIES:
:ID:       37748065-f956-4d0c-9301-c4d51439b1b4
:mtime:    20221228113913 20230103103309
:ctime:    20221228113913
:END:


[[https://pdm.fming.dev/latest/][PDM]] (Python package and Dependency Manager) handles all stages of setting up and creating a package and managing its
dependencies. In essence its a tool for interactively generating the configuration files described above.


* Poetry
:PROPERTIES:
:ID:       8aed2c14-86e7-4b0e-bfe6-e783831bfca2
:END:

[[https://python-poetry.org/][Poetry]] is another package for managing packaging and dependencies.

* Links

+ [[https://setuptools.pypa.io/en/latest/userguide/index.html][PyPA : Building and Distributing Packages with Setuptools]]
+ [[https://packaging.python.org/en/latest/specifications/][PyPA : Specifications]]
+ [[https://packaging.python.org/en/latest/tutorials/packaging-projects/][Packaging Python Projects]]
+ [[https://github.com/wimglenn/resources-example][Packaging Data files in a Python Distribution]]
+ [[https://pdm.fming.dev/latest/][PDM - Python package and Dependency Manager]]
+ [[https://blog.ganssle.io/articles/2021/10/setup-py-deprecated.html][Why you shouldn't invoke setup.py directly]]
+ [[https://github.com/python-versioneer/python-versioneer][python-versioneer/python-versioneer: version-string management for VCS-controlled trees]]
+ [[https://github.com/pypa/setuptools_scm][pypa/setuptools_scm: the blessed package to manage your versions by scm tags]]
