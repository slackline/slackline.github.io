:PROPERTIES:
:ID:       bb57f65e-58f4-45de-9620-901dc998f6d6
:mtime:    20240218135759 20240121220239 20240117072308 20231117101119 20231015151206 20230919101558 20230811133355 20230811112305 20230714185857 20230629212250 20230509145004 20230331162046 20230329204528 20230319195324 20230319124004 20230318215853 20230318205506 20230316065623 20230312225913 20230311130516 20230301211740 20230301095721 20230227221806 20230207111629 20230103103312 20221228113913 20230103103309
:ctime:    20221228113913 20230103103309
:END:
#+TITLE: Python Packaging
#+DATE: [2022-04-27 Wed 07:38]
#+FILETAGS: :python:programming:packaging:pip:

This page describes steps in creating a [[id:5b5d1562-ecb4-4199-b530-e7993723e112][Python]] package. If you are looking for information on installing packages this
is done using [[id:47543a76-a873-4c07-b30d-926f50b31fca][Python PIP]].

[[id:5b5d1562-ecb4-4199-b530-e7993723e112][Python]] packaging is in a constant state of flux. There is the official [[https://packaging.python.org/en/latest/][Python Packaging User Guide]] and the
[[https://www.pypa.io/en/latest/][Python Packaging Authority]] (PyPA) which is probably the best resource to read but things change, and often quickly. The
focus here is on the PyPA [[https://setuptools.pypa.io/en/latest/index.html][Setuptools]] using ~pyproject.toml~ which works with Python >= 3.7, but you may wish to consider
other packages such as [[id:8aed2c14-86e7-4b0e-bfe6-e783831bfca2][Poetry]] or [[id:37748065-f956-4d0c-9301-c4d51439b1b4][PDM]] which offer some advantages but with additional learning.

A few examples of Python packages that I have packaged are listed below, most have also been released to [[https://pypi.org/][PyPI]].

+ [[https://pypi.org/project/tcx2gpx/][tcx2gpx]] (personal)
+ [[https://github.com/AFM-SPM/TopoStats/][TopoStats]] (professional)
+ [[https://github.com/claritychallenge/clarity][clarity]] (professional)
+ [[https://github.com/Mesnage-Org/pgfinder][pgfinder]] (professional)

* Package Structure

You should place your code within a Git version controlled directory for your project. It is then normal to place all
files in an organised hierarchy with a sub-directory of the same name for Python code, known as a "flat" structure and
tests under ~tests~ directory. It is possible to have more than one directory containing code but for now I'm sticking
to the flat structure.

#+BEGIN_SRC sh eval: no
  .
  ├── ./build
  ├── ./dist
  ├── ./
  ├── ./my_package
  ├── ./my_package/__init__.py
  ├── ./my_package/module_a.py
  ├── ./my_package/module_b.py
  ├── ./my_package/something/module_c.py
  └── ./tests
      ├── ./tests/conftest.py
      ├── ./tests/resources
      ├── ./tests/test_module_a.py
      ├── ./tests/test_module_b.py
      └── ./tests/something/test_module_c.py
#+END_SRC

** ~__init__.py~

In older versions of Python (<3.3) a ~__init__.py~ was required in every directory and sub-directory that was to be a
module/sub-module. In more recent versions of Python (\>\\=3.3) they are not essential though as Python uses [namespace
packages](https://docs.python.org/3/reference/import.html#namespace-packages). But in most cases its simpler to include
such a file in the top level of your directory. ~__init__.py~ files can be completely empty or they can contain code
that is used throughout your package, such as setting up a logger.

* Configuration ~pyproject.toml~

Package configuration has been and is in a state of flux, there was original [[id:9187a00f-e287-4e1c-9f33-bd439e7f6cf2][setup.py]] which was then complemented and
gradually replaced by [[id:7cc9d18e-e161-4eec-8e03-c99968294a9f][setup.cfg]]. The new method on the block though is ~pyproject.toml~ which, with a little tweaking
and judicious choice of packages can handle everything.

Setuptools is shifting towards using ~pyproject.toml~ and whilst it is still under development although its already
highly functional. Its written in [[https://toml.io/en/][Tom's Obvious Minimal Language]] and isn't too dissimilar in structure to ~setup.cfg~.

A useful reference for writing your configuration in ~pyproject.toml~ is [[https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html][Configuring setuptools using pyproject.toml
files]]. It is based around [[https://peps.python.org/pep-0621/][PEP 621 – Storing project metadata in pyproject.toml | peps.python.org]]

A bare-bones ~pyproject.toml~ file should reside in the top level of your directory with the following (**NB** This
includes the minimum versions and ~setuptools_scm~ extension for dynamically setting package version)...

** ~build-system~

#+CAPTION: ~build-system~ section of ~pyproject.toml~ from [[https://github.com/AFM-SPM/TopoStats/blob/main/pyproject.toml][TopoStats]].
#+begin_src conf
  [build-system]
  requires = ["setuptools>=65.6.3", "setuptools_scm[tools]>=6.2", "wheel"]
  build-backend = "setuptools.build_meta"
#+end_src

Traditionally configuration of meta-data such as author, code repository and license was made via ~setup.py~ but you can
either specify some (or most) of this in ~pyproject.toml~ or a concurrent ~setup.cfg~.

** ~project~

This is the main body of the project description detailing ~name~, ~authors~, ~description~, ~readme~, ~license~,
~keywords~, ~classifiers~, ~dependencies~ and ~version~ amongst other things.

The type of ~license~ you have chosen to apply to your package. For guidance see [[https://choosealicense.com/][Choose an Open Source License]].

~readme~ defines the ~README~ of your package which may be in [[id:0c371287-128d-4e46-8128-b2d4f5fc604c][Markdown]] or Restructured Text.

Sets the components of your package which are set dynamically. In this example we only set the version dynamically using
~setuptools_scm~.

Your package ~dependencies~ are those that are required for running the code. They should not include packages that are
required for development (e.g. ~black~. ~flake8~, ~ruff~, ~pre-comit~, ~pylint~ etc.), nor those required for testing
(e.g. ~pytest~, ~pytest-regtest~, ~pytest-cov~ etc.), documentation (e.g. ~Sphinx~, ~numpydoc~, ~sphinx_markdown_table~,
~sphinx-autodoc-typehints~, ~sphinxcontrib-mermaid~ etc.) as these are defined in a separate section.

#+CAPTION: ~project~ section of ~pyproject.toml~
#+begin_src conf
  [project]
  ...
  name = "my_package"
  authors = [
    {name = "Author 1", email="author1@somewhere.com"},
    {name = "Author 2", email="author2@somewhere.com"},
    {name = "Author 3", email="author3@somewhere.com"},
  ]
  description = "A package that does some magic!"
  license = "GNU GPLv3 only"
  readme = "README.md"
  dynamic = ["version"]
  dependencies = [
    "numpy",
    "pandas",
    "tqdm",
  ]
#+end_src

All other sections are considered subsections, either of ~project~ or ~tools~ and are defined under their own heading
with ~[project|tool].<package>[.<options>]~.



** ~project.urls~

These are important as they define where people can find the ~Source~, ~Documentation~ and ~Bug_Tracker~ amongst other
things. There may be more fields that can be configured here but I've not used the yet. Substitute these to reflect
where your package is hosted, your username and the package name.

#+CAPTION: ~project.urls~ section.
#+begin_src conf
  [project.urls]
  Source = "https://gitlab.com/username/my_package"
  Source = "https://gitlab.com/username/my_package/issues"
  Source = "https://username.gitlab.com/my_package"
#+end_src

*** ~project.optional-dependencies~

This is where you list dependencies that are not required for running a package but are required for different aspects
such as development, documentation, publishing to PyPI, additional Notebooks and so forth, the options are limitless.

#+CAPTION: ~project.optional-dependencies~
#+begin_src conf
  [project.optional-dependencies]
  dev = [
    "black",
    "flake8",
    "Flake8-pyproject",
    "pre-commit",
    "pylint",
    "ruff",
  ]
  docs = [
    "Sphinx",
    "myst-parser",
    "numpydoc",
    "pydata_sphinx_theme",
    "sphinx-autodoc-typehints",
    "sphinx_markdown_tables",
    "sphinxcontrib-mermaid",
  ]
  pypi = [
    "build",
    "pytest-runner",
    "setuptools-lint",
    "setuptools_scm",
    "twine",
    "wheel"
  ]
  test = [
   "pytest",
   "pytest-cov",
  ]
  notebooks = [
    "ipython",
    "ipywidgets",
    "jupyter_contrib_nbextensions",
    "jupyterthemes",
  ]
#+end_src

*** ~project.scripts~ (Entry Points)

Entry points or ~scripts~ are a neat method of providing a simple command line interface to your package that links
directly into a specific module to provide a command line interface to your programme.

These are defined under ~project.scripts~ section.

#+CAPTION: Defining entry points in ~pyproject.toml~
#+begin_src toml
  [project.scripts]
  tcx2gpx = "tcx2gpx:process"
#+end_src

** ~tool~

*** ~tool.setuptools~

[[https://setuptools.pypa.io/en/latest/index.html][setuptools]] is perhaps the most common package for configuring
Python packages and is the one that is being exposed here. Its configuration is multi-level depending on which
component you are configuring.

**** ~tool.setuptools.packages.find~


Uses the ~find~ utility to search for packages to include, based on my understanding it looks for ~__init__.py~ in a
directory and includes it (see above note about these no longer being required in every directory). Typically you would
want to exclude ~tests/~ from a package you are making as most users won't need to run the test suite (if they do they
would clone from the source repository).

#+CAPTION: ~tool.setuptools.packages.find~ of ~pyproject.toml~
#+begin_src toml
[tool.setuptools.packages.find]
where = ["."]
include = ["tcx2gpx"]
exclude = ["tests"]
#+end_src

**** ~tool.setuptools.package-data~

This allows additional, non ~.py~ files to be included, they are listed on a per package basis and are a table (in toml
parlance, list in Python terms).

#+CAPTION: ~tool.setuptools.packages-data~ of ~pyproject.toml~
#+begin_src toml
  [tool.setuptools.packages-data]
  tcx2gpx = ["*.yaml", "*.json"]
#+end_src


*** ~tool.pytest~

#+CAPTION: ~tool.pytest~ section of ~pyproject.toml~ from [[https://github.com/AFM-SPM/TopoStats/blob/main/pyproject.toml][TopoStats]].
#+begin_src conf
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "--cov --mpl"
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning"
]

#+end_src

*** ~tool.black~

#+CAPTION: ~tool.black~ section of ~pyproject.toml~ from [[https://github.com/AFM-SPM/TopoStats/blob/main/pyproject.toml][TopoStats]].
#+begin_src toml
[tool.black]
line-length = 120
target-version = ["py38", "py39", "py310", "py311"]
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.venv
  )/
)
'''

#+end_src

*** ~tool.flake8~

The developers of Flake8 will not be supporting ~pyproject.toml~ for configuration. This is a shame but a work around is
available in the form of [[https://github.com/john-hen/Flake8-pyproject][Flake8-pyproject]]. Make sure to add this to your requirements section to ensure it is installed
when people use ~pre-commit~.

#+CAPTION: ~tools.flake8~ configuration example.
#+begin_src conf
  [tool.flake8]
  ignore = ['E231', 'E241']
  per-file-ignores = [
      '__init__.py:F401',
  ]
  max-line-length = 120
  count = true
#+end_src

*** ~tool.setuptools_scm~

[[https://github.com/pypa/setuptools_scm/][setuptools_scm]] is a simple to use extension to setuptools that dynamically sets the package version based on the version
control data. It is important to note that by default ~setuptools_scm~ will attempt to bump the version of the
release. The following configuration forces the use of the current ~git tag~.

You _must_

#+CAPTION: ~tools.flake8~ configuration example.
#+begin_src conf
  [tool.setuptools_scm]
  write_to = "tcx2gpx/_version.py"
  version_scheme = "post-release"
  local_scheme = "no-local-version"
  git_describe_command = "git describe --tags"
#+end_src

*** ~tool.ruff~

[[https://github.com/charliermarsh/ruff][ruff]] is a Python linter written in
[[id:3469c33e-7c61-46c7-b01e-655695f3b93c][Rust]] which is therefore very fast. It provides the same functionality as
~black~, ~flake8~ and ~pylint~ and can auto-correct many issues if configured to do so. A
[[id:e19b6eb6-46b2-440a-ba35-be29feb33407][GitHub Actions]] is also available. I'd recommend checking it out.

#+CAPTION: ~tool.ruff~ configuration example.
#+begin_src conf
  [tool.ruff]
  exclude = [
      ".bzr",
      ".direnv",
      ".eggs",
      ".git",
      ".hg",
      ".mypy_cache",
      ".nox",
      ".pants.d",
      ".pytype",
      ".ruff_cache",
      ".svn",
      ".tox",
      ".venv",
      "__pypackages__",
      "_build",
      "buck-out",
      "build",
      "dist",
      "node_modules",
      "venv",
      ]
line-length = 120
select = ["B", "E", "F", "I001", "W"]
  fixable = ["A", "B", "C", "D", "E", "F", "R", "S", "W", "U"]
  unfixable = []
#+end_src





* Versioning

Typically the version is defined in the ~__version__~ variable/object in the top-level ~__init__.py~ or as a value in
~[metadata]~ of either ~setup.cfg~ or ~pyproject.toml~ but this has some downsides in that you have to remember to
update the string manually when you are ready for a release and it doesn't tie in with using tags in Git to tag versions
of your commits.

It is worth taking a moment to read and understand about [[https://semver.org/][Semantic Versioning]] which you are likely to use when tagging
versions of your software to work with ~setuptools_scm~

** Setuptools_scm
[[https://github.com/pypa/setuptools_scm][setuptools_scm]] is a newer tool compared to [[id:32bdd209-92be-454e-9741-b1d453d1c0e2][versioneer]] but is simpler as it relies solely on configuration via
~pyproject.toml~ rather than being dependent on now deprecated ~setup.py~. As shown above you should have set the
minimum versions of ~"setuptools>=45"~ and ~"setuptools_scm[toml]>=6.2"~, ~dynamic = ["version"]~ under ~project~ and
set the ~write_to = "pkg/_version.py"~ (**NB** substitute ~pkg~ for your package directory, whether its ~src~ or the
package name).

#+CAPTION: Minimum requirements for using ~setuptools_scm~
#+begin_src toml
  [build-system]
  requires = ["setuptools>=45", "setuptools_scm[toml]>=6.2"]

  [project]
  dynamic = ["version"]

  [tool.setuptools_scm]
  write_to "pkg/_version.py"
#+end_src

*** Including Version in Sphinx Documentation

If you have Sphinx documentation you can add the following to ~docs/conf.py~

#+CAPTION: Configuring Sphinx ~docs/conf.py~ to use ~setuptools_scm~.
#+begin_src python
  from importlib.metadata import version
  release = version("myproject")
  version = ".".join(release.split(".")[:2])
#+end_src

** Versioneer

The first time I went through this process I was unaware of ~setuptools_scm~ and instead stumbled across [[id:32bdd209-92be-454e-9741-b1d453d1c0e2][versioneer]] and
used that. Old notes are archived [[id:6eac0573-f8e1-4014-92b3-2ba786ec8937][here]].


* Building your Package

** Generate Distribution Archive

In your package directory you can create a distribution of your package with the latest versions of ~setuptools~ and
~wheel~. To do this in your virtual environment run the following. The documentation for how to do this is at [[https://setuptools.pypa.io/en/latest/setuptools.html][Building and Distributing
Packages with Setuptools]].

You should as mentioned above have the following in ~pyproject.toml~

#+begin_src toml
  [build-system]
  requires = [
    "setuptools >= 65.6.3",
    "wheel",
  ]
  build-backend = "setuptools.build_meta"
#+end_src

The package can now be built locally with...

#+begin_src bash
  python -m pip install --upgrade setuptools wheel
  python -m build --no-isolation
#+end_src

...and the resulting package will be generated in the ~dist/~ directory.



* Data

If you have data as part of your package that you don't want to include as part of your package or [[id:0859ef9e-834d-4e84-8e67-fa7593a61e0b][Git]] repository you
can use [[https://github.com/fatiando/pooch][pooch]] to help with fetching datasets.

* Publishing to [[https://pypi.org][PyPI]]

Before pushing the package to the main PyPi server it is prudent to test things out on  [[https://test.pypi.org/][TestPyPI]] first. You must first
generate an API Token from your account settings page. It needs a name and the scope should be ~Entire account (all
projects)~. This token will be shown once so do *not* navigate away from the page until you have copied it.


You use [[https://twine.readthedocs.io/en/latest/][twine]] to upload the package and should create a ~.pypirc~ file in the root of the package directory that
contains your API key and the username ~__token__~. For the TestPyPI server it follows the following format.

#+begin_src conf
  [testpypi]
    username = __token__
    password = pypi-dfkjh9384hdszfkjnkjahkjfhd3YAJKSHE0089asdf0lkjsjJLLS_-0942358JKHDKjhkljna39o854yurlaoisdvnzli8yw459872jkhlkjsdfkjhasdfadsfasdf
#+end_src

Once this is in place you are ready to use ~twine~ to upload the package using the configuration file you have just
created.

#+begin_src bash
  twine upload --config-file ./.pypirc --repository testpypi dist/*
#+end_src

** Testing Download

After having uploaded your package to the TestPyPI server you should create a clean virtual environment and try
installing the package from where you have just uploaded it. You can do this using ~pip~ and the ~--index-url~ and
~--extra-index-url~, the former installs your package from TestPyPI, the later installs dependencies from PyPI.

#+begin_src bash
  pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ your-package
#+end_src

Once installed you can try running the code, scripts or notebooks associated with the package as you would normally.

** Repeat for PyPI

Once you are happy this is working you can repeat the process on the main [[https://pypi.org][PyPI]] server. You can add the token that you
generate to ~/.pypirc~ under a separate heading.

#+begin_src conf
  [testpypi]
    username = __token__
    password = pypi-dfkjh9384hdszfkjnkjahkjfhd3YAJKSHE0089asdf0lkjsjJLLS_-0942358JKHDKjhkljna39o854yurlaoisdvnzli8yw459872jkhlkjsdfkjhdfJZZZZZF
  [pypi]
    username = __token__
    password = pypi-dfkjh9384hdszfkjnkjahkjfhd3YAJKSHE0089asdf0lkjsjJLLS_-0942358JKHDKjhkljna39o854yurlaoisdvnzli8yw459872jkhlkjsdfkjhdfJZZZZZF
#+end_src


** GitHub Action
:PROPERTIES:
:mtime:    20230319200113
:ctime:    20230319200113
:END:

Manually uploading is somewhat time consuming and tedious. Fortunately though with ~setuptools_scm~ in place and tokens
generated we can automate the process of building and uploading packages to PyPI can be automated using the GitHub Action
[[https://github.com/pypa/gh-action-pypi-publish][gh-action-pypi-publish]] (read more about [[id:e19b6eb6-46b2-440a-ba35-be29feb33407][GitHub Actions]]). You will have already generated a [[https://pypi.org/help/#apitoken][PYPI token]] (and
similarly one for [[https://test.pypi.org][test PyPI]]) and these can stored on the projects GitHub account under /Settings > Secrets > Actions/
with the names ~PYPI_API_TOKEN~ and ~TEST_PYPI_API_TOKEN~ respectively.  You can then add the following GitHub Action
under ~.github/workflow/pypi.yaml~.

#+BEGIN_SRC yaml
name: Publish package to PyPi

on:
  push:
    tags:
      - v*
jobs:
  build-release:
    runs-on: ubuntu-latest
    name: Publish package to PyPi
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v4.3.0
        with:
          python-version: 3.9
          cache: 'pip'
      - name: Installing the package
        run: |
          pip3 install .
          pip3 install .[pypi]
      - name: Build package
        run: |
          python -m build --no-isolation
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
#+END_SRC


** Releasing via GitHub
:PROPERTIES:
:mtime:    20230103103311
:ctime:    20230103103311
:END:

With ~setuptools_scm~ in place and a [[id:5e1f167e-5c0c-4206-b2ac-6694e08524d8][GitHub Action]] setup and configured it is now possible to make a release to PyPI via
GitHub Releases.

1) Go to the Releases page (its linked from the right-hand side of the front-page).
2) Draft a New release.
3) Create a new tag using semantic versioning and select "Create new tag v#.#.# on publish".
4) Click the "Generate Release Notes" button, this adds all the titles for all Pull Requests, I'll often remove all
   these but leave the link to the ~ChangeLog~ that is generated for the release.
5) Write your release notes.
6) Select "Set as latest release".
7) Select "Create a discussion for this releases" and select "Announcements".
8) Click on "Publish Release".

* Packaging Frameworks

There are some frameworks that are meant to ease the pain of this process and make it easier. I'm yet to test these for
two reasons. Firstly I wanted to understand what is going on rather than learn another framework. Secondly it was an
additional framework to learn.

** PDM
:PROPERTIES:
:ID:       37748065-f956-4d0c-9301-c4d51439b1b4
:mtime:    20221228113913 20230103103309
:ctime:    20221228113913
:END:


[[https://pdm.fming.dev/latest/][PDM]] (Python package and Dependency Manager) handles all stages of setting up and creating a package and managing its
dependencies. In essence its a tool for interactively generating the configuration files described above. I've not yet
used it yet as I wanted


** Poetry
:PROPERTIES:
:ID:       8aed2c14-86e7-4b0e-bfe6-e783831bfca2
:END:

[[https://python-poetry.org/][Poetry]] is another package for managing packaging and dependencies. Again, I've not yet used it.

* Checking

A really useful tool for checking your package and [[id:55581960-395e-443c-bd5d-bc00c496b6ae][linting]] configuration is available from the [[https://learn.scientific-python.org/development/][Scientific Python Library
Development Guide]] which has a [[https://learn.scientific-python.org/development/guides/repo-review/][Repo Review]] tool to check a GitHub hosted project against their guidelines. You might
not want to follow all of their guidelines but most are very sensible and the tools used are highly configurable and so
can be configured to your own preferences.

* Links

+ [[https://setuptools.pypa.io/en/latest/userguide/index.html][PyPA : Building and Distributing Packages with Setuptools]]
+ [[https://packaging.python.org/en/latest/specifications/][PyPA : Specifications]]
+ [[https://packaging.python.org/en/latest/tutorials/packaging-projects/][Packaging Python Projects]]
+ [[https://www.pyopensci.org/python-package-guide/package-structure-code/intro.html][Python package structure information — pyOpenSci Python Packaging Guide]]
+ [[https://github.com/wimglenn/resources-example][Packaging Data files in a Python Distribution]]
+ [[https://pdm.fming.dev/latest/][PDM - Python package and Dependency Manager]]
+ [[https://github.com/pypa/hatch/graphs/contributors?from=2023-01-01&to=2023-12-31&type=c][Hatch]]
+ [[https://blog.ganssle.io/articles/2021/10/setup-py-deprecated.html][Why you shouldn't invoke setup.py directly]]
+ [[https://github.com/python-versioneer/python-versioneer][python-versioneer/python-versioneer: version-string management for VCS-controlled trees]]
+ [[https://github.com/pypa/setuptools_scm][pypa/setuptools_scm: the blessed package to manage your versions by scm tags]]
+ [[https://github.com/mitsuhiko/rye][rye: an experimental alternative to poetry/pip/pipenv/pyenv/venv/virtualenv/pdm/hatch/…]]
+ [[https://docs.pypi.org/trusted-publishers/][Publishing to PyPI with a Trusted Publisher]]
+ [[https://pepy.tech/][PyPI statistics]]
+ [[https://learn.scientific-python.org/development/][Scientific Python Library Development Guide]] ([[https://learn.scientific-python.org/development/guides/repo-review/][Repo Review Tool]])
+ [[https://www.pyopensci.org/python-package-guide/tutorials/intro.html][pyOpenSci - Python Packaging 101]]
+ [[https://discuss.python.org/c/packaging/14][Python Packaging Discourse]]
+ [[https://pydevtools.com/blog/][Python Developer Tooling Handbook]]

** PyPI Authentication

+ [[https://docs.pypi.org/trusted-publishers/][Publishing to PyPI with a Trusted Publisher]]
+ [[https://docs.pypi.org/trusted-publishers/adding-a-publisher/][Adding a Trusted Publisher to an Existing PyPI Project - PyPI Docs]]

** Dependencies

+ [[https://www.wheelodex.org/projects/][Wheelodex]] look up dependencies (including reverse dependencies by adding ~/<PKGNAME>/rdepends/~ to end of URL)
+ [[https://libraries.io/pypi/][libraries.io]] another tool for summarising packages and dependencies.

** Miscellaneous

+ [[https://contributing.streamlit.app/][CONTRIBUTING.info]] - Check your contributing guidelines.
+ [[https://www.toptal.com/developers/gitignore][gitignore.io]] - Create Useful .gitignore Files For Your Project
+ [[https://pypi.org/project/gitlab2zenodo/][gitlab2zenodo · PyPI]]
+ [[https://github.com/marketplace/actions/zenodo-upload][GitHub Actions Marketplace | Zenodo Upload]]

** Blogs on Packaging

+ [[https://chriswarrick.com/blog/2024/01/15/python-packaging-one-year-later/][Python Packaging, One Year Later: A Look Back at 2023 in Python Packaging | Chris Warrick]]
