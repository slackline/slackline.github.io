:PROPERTIES:
:ID:       f8e9d58f-e729-483a-b008-489cd30f0f6a
:mtime:    20230726160101 20230725131456 20230725111137 20230725074429 20230724221634 20230724202915 20230724174025 20230724125754 20230718173528 20230718155804 20230711095842 20230705103745 20230704213845 20230704200624
:ctime:    20230704200624
:END:
#+TITLE: R Packages
#+FILETAGS: :R:packaging:development:software:

The first thing you should read when developing R packages is  [[https://r-pkgs.org/][R Packages (2e) by Hadley Wickham and Jenny Bryan]] its
excellent and covers most common scenarios to get up and running.

* devtools

The [[https://devtools.r-lib.org/][devtools]] package should be your starting point for package development and has a bunch of useful functions for
initialising and working with packages.

To create a package use ~create_package()~, you can then activate [[id:0859ef9e-834d-4e84-8e67-fa7593a61e0b][Git]] for the repository using ~use_git()~, connect to
[[id:52b4db29-ba21-4a8a-9b83-6e9a8dc02f41][GitHub]] using ~use_github()~ and set up automated package checks with ~use_github_action()~ or if you are using [[id:7cbd61f2-d6a5-4e67-af72-2a13a5e86faa][GitLab]]
you can ~use_gitlab_ci()~. Creation of a package sets up the basic structure, not all of the files/directories below are
created automatically though, but are included as they should be used/developed.

#+begin_src
DESCRIPTION
NAMESPACE
NEWS.md
README.Rmd
R/
tests/
man/
vignettes/
data/
tests/
#+end_src

** ~DESCRIPTION~ file

This is a file containing important meta-data about your package, it includes various fields such as package name,
title, version, URL, BugReports URL, authors (and allows inclusion of authors [[https://orcid.org/][ORCiD]]), a description, the license, and
importantly the imports that are required for the package to work.

** ~NAMESPACE~ file

This file /isn't/ created automatically on package creation but will be generated by [[https://roxygen2.r-lib.org/][roxygen2]] for you.

** ~man/~ directory

This directory holds documentation files. Some of it will be generated automatically from the documentation strings
written for functions and there are ~pre-commit~ hooks that ensure these are always kept up-to-date.

** ~vignettes/~ directory

Vignettes are short form (or longer) articles describing how to use the package.

** GitHub Actions

There are helper functions to add [[id:e19b6eb6-46b2-440a-ba35-be29feb33407][GitHub Actions]] to your repository.

*** ~use_github_action()~

Invoking ~use_github_action()~ within your package repository will prompt you for the type of action you wish to add to
it. There are, as of writing, three options.

#+begin_src
> use_github_action()
Which action do you want to add? (0 to exit)
(See <https://github.com/r-lib/actions/tree/v2/examples> for other options)

1: check-standard: Run `R CMD check` on Linux, macOS, and Windows
2: test-coverage: Compute test coverage and report to https://about.codecov.io
3: pr-commands: Add /document and /style commands for pull requests
#+end_src

Selecting one will write a file to ~/.github/workflows/<FILENAME>.yaml~ and then print out code to add a badge to your
repository.

#+begin_src
Selection: 1
✔ Adding '*.html' to '.github/.gitignore'
✔ Creating '.github/workflows/'
✔ Saving 'r-lib/actions/examples/check-standard.yaml@v2' to '.github/workflows/R-CMD-check.yaml'
• Learn more at <https://github.com/r-lib/actions/blob/v2/examples/README.md>.
• Copy and paste the following lines into 'README.Rmd':
  <!-- badges: start -->
  [![R-CMD-check](https://github.com/CUREd-Plus/cuRed/actions/workflows/R-CMD-check.yaml/badge.svg)](https://github.com/CUREd-Plus/cuRed/actions/workflows/R-CMD-check.yaml)
  <!-- badges: end -->
  [Copied to clipboard]
#+end_src

** Websites with ~pkgdown~

There is the ~use_pkgdown_github_pages()~ function which will setup ~pkgdown~ and configure [[id:e19b6eb6-46b2-440a-ba35-be29feb33407][GitHub Actions]] and pages. If
you're using [[id:7cbd61f2-d6a5-4e67-af72-2a13a5e86faa][GitLab]] ~pkgdown~ can be configured with ~use_pkgdown()~ instead (build locally with
~pkgdown::build_site()~).

** Badges

Most of the GitHub Action functions described above include output that can be copy and pasted into `README.Rmd` to
include badges in your GitHub front page.

* pre-commit

I love using ~pre-commit~ in my development pipelines, it saves so much hassle (once you are used to it). For R there is
the excellent [[https://github.com/lorenzwalthert/precommit][precommit package]] which comes with a set of hooks you can enable. These took a little figuring out to get
them working.

** codemetar

There is a hook for checking the [[https://codemeta.github.io/][Codemeta]], which is in JSON-LD format is created correctly. The R package [[https://cran.r-project.org/web//packages//codemetar/vignettes/codemetar.html][codemetar]]
facilitates creating this and pulls metadata from the ~DESCRIPTION~, ~README.Rmd~ and other aspects of your package to
format them in JSON Codemeta. It comes with a handy function to write the file for you, so after installing you can just
run ~codemetar::write_codemeta()~.

** roxygenize

Roxygen2 is a package for making the documentation to go with your package. This hook requires additional configuration
in ~.pre-commit-config.yaml~ as you have to install your package dependencies. Fortunately there is a helper function in
the ~precommit~ package so you can just run ~precommit::snippet_generate("additional-deps-roxygenize")~ and it will
output the YAML that you need to add.

** styler

The [[https://styler.r-lib.org/][styler]] package ensures your code follows the [[https://style.tidyverse.org/][tidyverse style guide]] by default, although it can be configured to use
a custom style guide of your own creation.

** lintr

The [[https://lintr.r-lib.org/][lintr]] package lints your code automatically. It can be configured by adding a ~.lintr~ configuration file to your
repository, a simple example is shown below. Note the indented closing parenthesis is important you get a complaint
about that and any other formatting issues.

#+begin_src
linters: linters_with_defaults(
         line_length_linter(120),
         object_name_linter = NULL,
         object_usage_linter = NULL
  )

#+end_src

** Gotchas

When starting out I found that I regularly didn't pass the ~pre-commit~ hooks first time. This can be jarring and
confusing to start with but its not something to worry about, they are there to ensure your code and package meet the
standards required for R packages, if you ever come to submit to [[https://cran.r-project.org][CRAN]] you will be grateful to have adhered to these
standards.

Below I detail common "gotchas" I encountered when developing the package, what they mean and how to resolve them.

*** ~spell-check~

The ~spell-check~ hook will fail if you've introduced new words with messages similar to the following. Sometimes these
will be new words, sometimes they might be catching tpyos you have made. In the example below ~famiy~ should be ~family~
so you need to correct the source of the tpyo (and you're told where this is, in this case it was line 27 of
~CITATION.cff~), or if the new word should be added to the dictionary you will have to stage the ~inst/WORDLIST~ file
for inclusion in your commit.

#+begin_src bash
spell-check..............................................................Failed
- hook id: spell-check
- exit code: 1
- files were modified by this hook

ℹ Using R 4.3.1 (lockfile was generated with R 4.2.1)
ℹ Using R 4.3.1 (lockfile was generated with R 4.2.1)
The following spelling errors were found:
  WORD    FOUND IN
famiy   CITATION.cff:27
All spelling errors found were copied to inst/WORDLIST assuming they were not spelling errors and will be ignored in the future. Please  review the above list and for each word that is an actual typo:
 - fix it in the source code.
 - remove it again manually from inst/WORDLIST to make sure it's not
   ignored in the future.
 Then, try committing again.
Error: Spell check failed
Execution halted

#+end_src

*** ~codemeta-description-updated~

If you modify the ~DESCRIPTION~ or ~CITATION.cff~ then the ~codemeta-description-updated~ hook will fail with error
messages similar to the following.

#+begin_src bash
codemeta-description-updated.............................................Failed
- hook id: codemeta-description-updated
- exit code: 1

ℹ Using R 4.3.1 (lockfile was generated with R 4.2.1)
ℹ Using R 4.3.1 (lockfile was generated with R 4.2.1)
Error:
! codemeta.json is out of date; please re-run codemetar::write_codemeta().
Backtrace:
    ▆
 1. └─rlang::abort("codemeta.json is out of date; please re-run codemetar::write_codemeta().")
Execution halted
#+end_src

This means yo need to update
#+begin_src R
    codemetar::write_codemeta()
#+end_src

*** ~Warning: Undocumented code objects:~

If this error arises its because there is a ~.Rd~ file missing. You can generate these by ensuring you have the
appropriate docstring definition prior to your function and then use the ~roxygen2:reoxygenise()~ function to generate
the documentation automatically.  Don't forget to ~git stage~ and ~git commit~ the files to your repository, pushing if
needed (e.g. a Continuous Integration pipeline is failing).

** Windows

Windows doesn't come with Python by default, but [[https://pre-commit.com][pre-commit]] is written in Python and so an environment is required in
order to run the above pre-commit hooks. There are many options for this, including using [[https://learn.microsoft.com/en-us/windows/wsl/install][Windows Subsystem for Linux
(WSL)]]. The solution is provided in the [[https://cran.r-project.org/web/packages/precommit/vignettes/precommit.html][precommit vignette]] and uses the [[https://rstudio.github.io/reticulate/][reticulate]] package (which interfaces [[id:de9a18a7-b4ef-4a9f-ac99-68f3c76488e5][R]] with
[[id:5b5d1562-ecb4-4199-b530-e7993723e112][Python]]) to handle installing  a [[id:183b7521-1025-44d5-8107-c7f4e75cc6cf][Miniconda]] environment.

1. Install R - As of writing ~precommit~ works with R-4.2.1 and problems were encountered with newer version. When
   installing the defaults are fine, request admin permissions if required.

2. Install Rstudio - Defaults are fine, request admin permissions if required.

3. Install GitBash

  3.1 **Text Editor** Configure with your choice of editor, obviously you'll want to have [[id:754f25a5-3429-4504-8a17-4efea1568eba][Emacs]] available and select that! ;-)
  3.2 **Adjust your PATH environment** At the bare minimum go with the ~Recommended~ option and allow /Git from the
   command line and also from 3rd-party software/. Optionally I would recommend the third option of /Use Git and
   optional UNIX tools from the Command Prompt/, particularly if you are either a) familiar with UNIX commands or b) not
   at all familiar with them (as you won't have to re-learn the Windows commands, just learn the Bash commands they are
   more widely applicable).
  3.3 **Use Bundled SSH library** this is fine.
  3.4 **Use Bundled OpenSSL library** this is fine.
  3.5 **Checkout Windows-style, commit Unix-style line endings** this is fine, it just changes the internal
   representation of the carriage return to be more universal.
  3.6 **Use MinTTY (the default terminal of MSYS2)** this is fine and more functional than the **Windows' default
   console window**.
  3.7 **Default (fast-forward or merge)** this is fine.
  3.8 **Choose a credential helper** select **None** here, we will let RStudio manage these.
  3.9 **Configure Extra Options** defaults are fine.
  3.10 **Configuring experimental options** no need to enable any of these.
  3.11 **Configure Git** Start a GitBash shell and configure your email address and name.

#+begin_src bash
  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"
#+end_src

4. Configure RStudio/GitHub with SSH keys

  4.1 Start RStudio
  4.2 Create SSH key - Navigate to /Tools > General Options  > Git/SVN > Create SSH Key/ Under /SSH key
   type/ select the default (/ED25519/) this is a [[https://blog.g3rt.nl/upgrade-your-ssh-keys.html][very secure elliptic curve algorithm]] and is supported by GitHub. Use a
   secure password, do **not** change the location it is created at.
  4.3 Once created select /View public key/ and use /Ctrl + c/ to copy this to your clipboard.
  4.4 Navigate to [[https://github.com/][GitHub]] and login then click on your avatar in the top right and select /Settings > SSH and GPG keys >
   New SSH Key/.
  4.5 Give the key a name and paste into the box below where indicated/instructed then click on /Add SSH key/.

5. Clone Repository

  5.1 Navigate to the repository you wish to clone (e.g. [[https://github.com/CUREd-Plus/cuRed/][https://github.com/CUREd-Plus/cuRed/]]) and click on the /Code/
   button then select /SSH/ under the /Local/ tab in the box that appears.
  5.2 Click on the box that has two small squares to the right of some text to copy the URL to clipboard.
  5.3 Return to RStudio and start a new project with /File > New Project > Version Control > Git/ and paste the URL into
   the /Repository URL/. Select a location to clone to under /Create project as subdirectory of:/,
   e.g. ~c:/Users/<username>/work/cuRed~ (replacing ~<username>~ with /your/ username).
  5.4 If prompted for password enter it. If asked to answer /Yes\/No/ answer /Yes/ and then if prompted to /Store
   password for this session/ answer /Yes/.
  5.5 You should now have cloned the repository and have a project to work on.

6. Install ~pre-commit~

   ~pre-commit~ refers to two things, primarily it is the Python package [[https://pre-commit.com][~pre-commit~]] that does all the work of running
   Linting, Tests etc. before making commits. It also refers to an R package [[https://cran.r-project.org/web//packages/precommit/vignettes/precommit.html][precommit]] that works with the Python
   package to enable use of various R packages that carry out such checks. Because it is a Python package it needs a
   Python Virtual Environment to run. This may sound unfamiliar but don't worry the R ~precommit~ package and
   documentation guides you through doing so, what follows is a rehash of the  [[https://cran.r-project.org/web//packages/precommit/vignettes/precommit.html][official documentation]].

  6.1 Install ~precommit~ and ~reticulate~

#+begin_src R
  install.packages(c("remotes", "reticulate"))
  remotes::install_github("lorenzwalthert/precommit")
#+end_src

  6.2 Install Miniconda environment

  **NB** This installs a [[https://docs.conda.io/en/latest/miniconda.html][Miniconda]] virtual environment framework for R to run Python packages (i.e. ~pre-commit~).

#+begin_src R
  options(timeout=600)
  reticulate::install_miniconda()
#+end_src

  6.3 Install ~pre-commit~ framework

  **NB** This installs the Python package [[https://pre-commit.com][~pre-commit~]] within a new Miniconda virtual environment (~r-precommit~), there
  will be a fair bit of output here as all the dependencies in Python for ~pre-commit~ are downloaded.

#+begin_src R
  precommit::install_precommit()
  precommit::autoupdate()
#+end_src

  6.4 Use ~precommit~ with the existing project

  You should have cloned the repository you wish to enable ~precommit~ to use (see above). You now need to enable
  ~precommit~ for this local copy of the repository. This will place a script in ~.git/hooks/pre-commit~ that says which
  Miniconda environment to use (~r-precommit~) and will activate this whenever a commit is made, the ~install_hooks =
  TRUE~ ensures that the R specific hooks and their required environments are installed (under ~\~/.config/pre-commit/~).

#+begin_src R
  precommit::use_precommit(install_hooks = TRUE)
#+end_src


* Links

+ [[https://r-pkgs.org/][R Packages book by Hadley Wickham and Jenny Bryan]]
+ [[https://cran.r-project.org/web//packages/precommit/vignettes/precommit.html][R precommit]] ([[https://github.com/lorenzwalthert/precommit][GitHub | lorenzwalthert/precommit]] check the [[https://github.com/lorenzwalthert/precommit/issues][Issues]], can be useful for troubleshooting)
+ [[https://docs.conda.io/en/latest/miniconda.html][Miniconda]]
+ [[https://usethis.r-lib.org/reference/use_readme_rmd.html][Create README files — use_readme_rmd • usethis]]
