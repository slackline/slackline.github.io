:PROPERTIES:
:ID:       e620a918-3c87-4abf-a94e-5b358759e91d
:mtime:    20250313083847 20250212091320
:ctime:    20250212091320
:END:
#+TITLE: Google Calendar
#+FILETAGS: :google:calendar:scheduling:

I wanted to create a Google Calendar from a spreadsheet that I could share with the rest of the [[https://peakclimbingclub.co.uk][Peak Climbing Club]].

* Data

The schedule of events was created in a spreadsheet and shared a CSV with me.

** Tidying Spreadsheet

After importing the spreadsheet to Google Docs some work was required to tidy it up and get it ready to work.

+ Format date as Date/Time with format ~YYYY-MM-DD~
+ Add a start time and end time ensure they are recognised as times
+ Generate ~EventStart~ and ~EventEnd~ column using formula ~=A2 + B2~
+ Generate ~EventName~ by Concatenating Primary and Backup Venue with formula ~=IF(G2 = "", F2, CONCATENATE(F2, "
  (Limestone : ", G2,")"))~
+ Generate ~EventDetails~ by concatenating ~Pub~ and ~Notes~ with formula ~=IF(J2 = "", I2, CONCATENATE("Pub : ",I2,
  CHAR(10), CHAR(10), J2))~ (~CHAR(10)~ is carriage return to give space).

** Scripting Events

Scripting events requires using Googles [[https://script.google.com/][Apps Script]] which leverages JavaScript. I setup the following based on a [[https://github.com/ryanrwatkins/Google-Sheet-to-Calendar/blob/master/script][Gist]] I
found. Work use a much more complicated system that [[https://opengist.nshephard.dev/nshephard/a3a260ed0f1d4be78eea18df261532f0][links]] form submissions to Sheets and books calendar events.

#+begin_src
// Documentation
// https://developers.google.com/apps-script/reference/spreadsheet/sheet
// https://developers.google.com/apps-script/reference/calendar
// Based on : https://github.com/ryanrwatkins/Google-Sheet-to-Calendar/blob/master/script
// Useful : https://opengist.nshephard.dev/nshephard/a3a260ed0f1d4be78eea18df261532f0
// Settings
var commiteeEmails = ["nshephard@protonmail.com",
                      "secretary.peakclimbingclub@gmail.com"]
var pccCalID = "3412ff22d718172b3eccf2e345bb09be43f8c46771e10dc29f9f8d085fa2a053@group.calendar.google.com";
var sheetID = "14bFheHdIk8RrWQsDYKMBgmciu9zmjT80zzLd8skBSug";
var sheetNameID = "schedule";
// Column indexes (starting from 1)
var eventStart = 9;
var eventEnd = 10;
var eventName = 11;
var eventDetails = 12;

// This creates a new menu in the menu bar of the Spreadsheet, and then inserts menu item for running the script.
//function onOpen() {
//  var ui = SpreadsheetApp.getUi();
//  ui.createMenu('Sync to Calendar')
//      //.addItem('Update Calendar', 'FunctionGWcodersSchedule')
//      .addItem('Update Calendar', 'schedule')
//      .addToUi();
//}

function schedule() {

  // Get the spreadsheet and sheet/tab within, then get the calendar ID from the spreadsheet, and get the calendar
  var spreadsheet = SpreadsheetApp.openById(sheetID).getSheetByName(sheetNameID);
  // Get the event calendar based on the ID
  var eventCal = CalendarApp.getCalendarById(pccCalID);

  // We get the data from row 1, column eventStart for 100 rows and 4 columns
  var topics = spreadsheet.getRange(1, eventStart, 100, 4).getValues();  //Get the section of the spreadsheet we are using

  // Since we don't want duplicates, we first delete all the events and then we will replace them with the edited events
  // Date function starts at 0 for the month (January=0)
  var fromDate = new Date(2025,0,1); //This is January 1, 2025 at 00h00'00"
  var toDate = new Date(2030,0,1);   //This is January 1, 2022 at 00h00'00"

  function clearEvents(calendar, start, end) {
    var events = calendar.getEvents(start, end);   //Get all events in the time range

    for(var i=0; i<events.length;i++)
    {
      var ev = events[i];   // Get each individual event
      ev.deleteEvent();     // delete the event
    }
  }
  clearEvents(eventCal, fromDate, toDate)

  // now we create the new events one at a time
  for (x=0; x<topics.length; x++){

    var meetup = topics[x];   // Get each event, row, from the Sheet

    var begin = meetup[0];    // Assign a variable to each column
    var end = meetup[1];
    var venue = meetup[2];
    var description = meetup[3];

    // Check if all necessary fields have valid data
    // if (!isNaN(begin.getTime()) && !isNaN(end.getTime()) && venue && presenter) {

    // Convert start and end strings to Date/Time

    //Create the event
    eventCal.createEvent(venue,
                         new Date(begin),
                         new Date(end)).addPopupReminder(30).setDescription(description);

    // Pause briefly since you can only edit the ccalendar so many times per sec
    Utilities.sleep(2000);
  //}
  }

}
#+end_src

A few iterations and it seems to have worked and populated my calendar. I need to uncomment the ~onOpen()~ function and
get it deployed/linked to the spreadsheet. Long term I need to setup a system that everyone can use without making it
too awkward.

* Links

+ [[https://gbtimes.com/how-to-create-calendar-events-from-google-sheets/][How to create calendar events from Google sheets? - GB Times]]
+ [[https://scribe.rip/@ppraveen2150/how-to-automate-google-calendar-events-creation-from-google-sheets-using-google-apps-script-9951f9cd7adf][How to Automate Google Calendar Events Creation from Google Sheets using Google Apps Script]]
+ [[https://github.com/ryanrwatkins/Google-Sheet-to-Calendar][Google-Sheet-to-Calendar]]

** Apps Script Docs

+ [[https://developers.google.com/apps-script/reference/calendar][Calendar]]
+ [[https://developers.google.com/apps-script/reference/spreadsheet/][Spreadsheets]]
