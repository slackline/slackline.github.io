:PROPERTIES:
:ID:       ff8ee302-7518-4179-9bcb-63b13199f897
:mtime:    20250512091234 20250225095909 20250224214920 20241024163702 20240417065736 20231222084359 20230912203338 20230802131215 20230702160646 20230412135517 20230309070314 20230305214004 20230221192929
:ctime:    20230221192929
:END:
#+TITLE: Emacs Packages
#+FILETAGS: :emacs:packages:elpa:melpa:usepackage:elpaca:

Packages for [[id:754f25a5-3429-4504-8a17-4efea1568eba][Emacs]] are distributed via Emacs Lisp Package Archives (ELPA) and there are a few different
repositories. The following sets these in order of preference.

#+begin_src elisp
  (setq package-archives
      '(("GNU ELPA"	. "https://elpa.gnu.org/packages/")
        ("NonGNU ELPA"  . "https://elpa.nongnu.org/nongnu/")
        ("MELPA Stable" . "https://stable.melpa.org/packages/")
        ("MELPA"	. "https://melpa.org/packages/"))
      package-archive-priorities
      '(("MELPA" . 10)
        ("GNU ELPA"	. 5)
        ("NonGNU ELPA"	. 5)
        ("MELPA Stable"	. 0)))
#+end_src

* Managing Packages

There are a few different package management systems, I tend to use [[https://github.com/jwiegley/use-package][use-package]] as it is simple and
declarative. Recently I came across the new [[https://github.com/progfolio/elpaca][elpaca: An elisp package manager]]. The following from [[https://ianyepan.github.io/posts/setting-up-use-package/][A Quick Tutorial on
Use-package for Emacs | Ian Y.E. Pan]] ensures ~use-package~ is installed, if not it will install and then load it.

** ~use-package~

#+begin_src elisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-and-compile
  (setq use-package-always-ensure t
        use-package-expand-minimally t))
#+end_src

Best resource for learning is the [[https://github.com/jwiegley/use-package][official documentation]] which covers everything. What follows is my understanding and I
may have missed or misunderstood some things.

One of the nice features of ~use-package~ is that it will install a package for you if its not present on a
system. Common commands that speed up loading are ~:defer t~.

** elpaca

A new kid on the block [[https://github.com/progfolio/elpaca][elpaca]] is an asynchronous package manager which means that unlike others it can be started and
then run in the background, freeing you to use Emacs as desired whilst it updates/installs.

* Hooks

Hooks are a really useful way to customise different modes in Emacs.

* Binaries

Some packages (e.g. EmacSQL) build and install binaries from source code. With EmacSQL in particular this sometimes
fails. The following is the sort of call made to build the binary and may be run manually to do so.

#+begin_src bash
  /usr/bin/cc -I/home/neil/.config/emacs/elpa/emacsql-sqlite-20230225.2205/sqlite -O2 -DSQLITE_THREADSAFE=0 \
  -DSQLITE_DEFAULT_FOREIGN_KEYS=1 -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_FTS4 -DSQLITE_ENABLE_FTS3_PARENTHESIS \
  -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_JSON1 -DSQLITE_SOUNDEX /home/neil/.config/emacs/elpa/ \
  emacsql-sqlite-20230225.2205/sqlite/sqlite3.c /home/neil/.config/emacs/elpa/emacsql-sqlite-20230225.2205/sqlite/ \
  emacsql.c -lm -ldl -o /home/neil/.config/emacs/elpa/emacsql-sqlite-20230225.2205/sqlite/emacsql-sqlite
#+end_src

* ~.elc~ byte compiled files

Emacs byte-compiles ~.el~ files to ~.elc~ which are binaries and run faster. You can force compilation of a specific
directory with using ~M-: (byte-recompile-directory package-user-dir nil 'force)~ which will [[https://stackoverflow.com/a/1217249][force compilation]].

You can do a single directory interactively with ~C-u 0 M-x byte-recompile-directory~ and enter the directory that yu
want to recompile when prompted.

For more on this see [[https://stackoverflow.com/questions/1217180/how-do-i-byte-compile-everything-in-my-emacs-d-directory][this thread]].

** ~package-recompile-all~

Does what it says on the tin and (supposedly) recompiles all installed packages.

* Trouble Shooting

Sometimes the [[id:ce08bd82-0146-49cb-8a64-048ffe7210f2][GPG]][[id:ce08bd82-0146-49cb-8a64-048ffe7210f2][GnuPG]] keys won't be in the keyring (looking at you Ubuntu 22.04). To work round this create
~~/.config/emacs/gnupg/gpg.conf~ and add...

#+begin_src
keyserver hkp://keys.gnupg.net
keyserver hkp://keyserver.ubuntu.com
#+end_src

Then get the public key for ELPA using

#+begin_src
gpg --homedir ~/.emacs.d/elpa/gnupg --receive-keys 645357D2883A0966
#+end_src

This still didn't sort things out for me though because ~use-package~ needs to be installed from GNU ELPA and the
signature was not recognised. The solution was to

1. Manually download the tar-ball from [[https://elpa.gnu.org/packages/gnu-elpa-keyring-update.html][ELPA GNU | gnu-elpa-keyring-update]]
2. Disable signature checking ~M-: (setq package-check-signature nil)~.
3. Manually install from file ~M-: package-install-file~ and give it the path to the downloaded ~.tar~
4. Enable signature checking ~M-: (setq package-check-signature t)~.

** References

+ [[SO Thread with key from 2024-09-08]]

* Links

+ [[https://github.com/jwiegley/use-package][jwiegley/use-package: A use-package declaration for simplifying your .emacs]]
+ [[https://github.com/progfolio/elpaca][progfolio/elpaca: An elisp package manager]]

** Resources

+ [[https://ianyepan.github.io/posts/setting-up-use-package/][A Quick Tutorial on Use-package for Emacs | Ian Y.E. Pan]]
+ [[https://emacsnotes.wordpress.com/2023/07/02/migrating-to-use-package-tip-1-do-not-use-a-naive-macroexpand-to-grok-a-use-package-declaration-use-this-wrapper-instead/][Migrating to `use-package’—TIP 1: Do NOT use a naive `macroexpand’ to grok a `use-package’ declaration; use this wrapper instead – Emacs Notes]]
+ [[https://www.danliden.com/posts/20231217-emacs-hooks.html][Introduction to Emacs Hooks]]
