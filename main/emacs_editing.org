:PROPERTIES:
:ID:       00092001-9bac-4434-b098-a72d6b00385a
:mtime:    20251017161408 20250923222042 20250919195630 20250721171112 20250225094538 20240113162844
:ctime:    20240113162844
:END:
#+TITLE: Emacs Editing
#+FILETAGS: :emacs:editing:

* Searching

You can search for strings with ~C-s~ which allows interactive searching but a more powerful mode exists in the form of
~occur-mode~ which searches for regular expressions and shows matching lines in a buffer.

* Tips and Tricks

** Line Wrapping

To hard line-wrap a whole buffer to a fixed number of character use ~fill-region~.

** Indenting Regions

White space not only makes it easier to read code but in Python it has meaning and nesting should use four spaces. This
is great when writing code but sometimes if you have ~try: ... except: ...~ statements you want to disable them to find
out where errors are occurring and this requires you to comment out the  ~try: ... except: ...~ and de-indent the neste
region. For too long I've wasted my time deleting white space then putting it back in or doing a find and replace to
remove excessive white spaces. Then I [[https://stackoverflow.com/a/2585406/1444043][learnt]] about ~C-c <~ / ~C-c >~ w
left or right respectively. Another simple command that has been around for ages but has passed me by but will now make
a big difference and improve my efficiency.

** Use Elisp in Replacement String

You can use Elisp functions in the replacement string of regular expressions which is quite useful. See [[https://susam.net/maze/elisp-in-replacement-string.html][Elisp in
Replacement String]] for examples.

** ~replace-regexp-as-diff~

This is a neat way of looking at what a regular expression would change in form of a [[https://christiantietze.de/posts/2025/02/preview-mass-text-replacements-with-emacs-30-1-replace-regexp-as-diff/][diff]]. A neat consequence is that
you can then choose hunk-by-hunk whether to make the change.

** Indenting

You can use ~M-x indent-region~ to correctly indent a selected region. Handy when removing conditionals or loops in
Python files and for generally linting.

* Yanking and Pasting

Emacs has a sophisticated kill-ring/history that stores lots of things when you want to paste something you can use
~C-y~ to paste from this ring and the last item will go in. If you want the second from last ~C-x 2 C-y~ and so on. BUt
that gets challenging to remember everything that is in the history, instead using ~M-y~ and a mini-buffer opens showing
the history and you can navigate through them and select what you want to insert.

** Rectangles

Rectangle select in Emacs is magic, how anyone survives without it I don't know. However, the default behaviour is to
insert as is, at the point of pasting, over-writing lines below. I found a [[https://emacs.stackexchange.com/a/46352/10100][neat solution]] that allows you to push rows
down so that the rectangle gets inserted in its entirety.

#+begin_src elisp
(defun my-insert-rectangle-push-lines ()
  "Yank a rectangle as if it was an ordinary kill."
  (interactive "*")
  (when (and (use-region-p) (delete-selection-mode))
    (delete-region (region-beginning) (region-end)))
  (save-restriction
    (narrow-to-region (point) (mark))
    (yank-rectangle)))

(global-set-key (kbd "C-x r C-y") #'my-insert-rectangle-push-lines)
#+end_src
* Links

+ [[https://susam.net/maze/elisp-in-replacement-string.html][Elisp in Replacement String - Susam's Maze]]
+ [[https://www.masteringemacs.org/article/searching-buffers-occur-mode][Searching and Editing in Buffers with Occur Mode - Mastering Emacs]]
+ [[https://christiantietze.de/posts/2025/02/preview-mass-text-replacements-with-emacs-30-1-replace-regexp-as-diff/][Preview Mass Text Replacements with Emacs 30.1 replace-regexp-as-diff • Christian Tietze]]
+ [[https://emacs.dyerdwelling.family/emacs/20250826095622-emacs--a-better-way-to-indent-your-entire-buffer-in-emacs/][A Better Way to Indent Your Entire Buffer in Emacs? · Emacs@ Dyerdwelling]]
