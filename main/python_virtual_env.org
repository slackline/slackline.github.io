:PROPERTIES:
:ID:       4bf1c297-d00a-4857-9339-8017c27138c6
:mtime:    20240306165409 20230915090808 20230319231135
:ctime:    20230319231135
:END:
#+TITLE: Python Virtual Environments
#+FILETAGS: :python:virtual environment:

* ~venv~

* ~virtualenvwrapper~

My preferred method of working with virtual environments is [[https://virtualenvwrapper.readthedocs.io/en/latest/][virtualenvwrapper]] as once installed and setup it provides
convenient command line arguments for creating, activating, deactivating and switching between Virtual Environments.

* Configuring

Prevent ~pip~ installing outside of a virtualenv by adding the following to ~.zshrc~ / ~.bashrc~.

#+begin_src bash
export PIP_REQUIRE_VIRTUALENV=true
#+end_src

Can also add the following to ~.config/pip/pip.conf~

#+begin_src
[global]
require-virtualenv = true
#+end_src

* Updating

Over time the packages in your venv will become dated. Unfortunately ~pip~ doesn't currently have an option to update
all installed packages. But a little magic can be used to achieve this.

#+begin_src bash
pip list --outdated --format=json | jq -r '.[] | .name'  | xargs -n1 pip install -U
#+end_src

* Conda

[[https://www.anaconda.com/][Anaconda]] provides a number of different levels of packages, including many system libraries which can be useful if you
don't have system administration rights. I tend to prefer and advocate using [[https://docs.conda.io/en/latest/miniconda.html][Miniconda]] if all you need is a plain Python
environment.

* Links

+ [[https://www.anaconda.com/][Anaconda | The World's Most Popular Data Science Platform]]
+ [[https://docs.conda.io/en/latest/miniconda.html][Miniconda]]
+ [[https://virtualenvwrapper.readthedocs.io/en/latest/][virtualenvwrapper]]

** Links

+ [[https://snarky.ca/how-virtual-environments-work/][How virtual environments work]]
+ [[https://docs.python-guide.org/dev/pip-virtualenv/][Further Configuration of pip and Virtualenv â€” The Hitchhiker's Guide to Python]]
