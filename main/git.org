:PROPERTIES:
:ID:       3c905838-8de4-4bb6-9171-98c1332456be
:END:
#+TITLE: Git
#+DATE: <2022-05-24 Tue 22:07>
#+FILETAGS: :git:programming:documentation:version control:

[[https://git-scm.com][Git]] is the defacto standard for version control of code (and more) these days. Whether you write code in [[id:5b5d1562-ecb4-4199-b530-e7993723e112][Python]], [[id:de9a18a7-b4ef-4a9f-ac99-68f3c76488e5][R]],
scripts for [[id:ab2f5dfb-e355-4dbb-8ca0-12845b82e38a][Literate Programming]], Go, Rust, C++, Java, [[id:9c6257dc-cbef-4291-8369-b3dc6c173cf2][Bash]] or want to keep critical files such as your dotfiles,
~/etc/~, or GPG encrypted passwords backed up you should consider using Git (or some other version control system, but
Git is the most popular for now).

It can be daunting facing another whole new area to tackle as you are only just getting to grips with a programming
language having to learn a bunch of unfamiliar concepts that seem of little value, I know I've been there, but it really
does pay dividends to invest time learning how to use Git.

* Concepts

A repository is placed under version control when you ~git init~ within in but before doing so you need to set some
variables such as the ~user~ and ~email~. These can be done on a global scale which will apply across all repositories
you create or a local, per-repository basis (local settings in a repository over-ride global so they don't conflict).

* Setup
** Global Configuration

First thing to do is setup Git with your name and email address and a
few other common default settings.

#+begin_src sh
git config user.name 'My Username'
git config user.email 'my@email.org'
git config --global push.default upstream # Syncs pull/push to the same branch (https://stackoverflow.com/a/42642628/1444043)
#+end_src

** Local Configuration

Each repository is configured via the file ~./.git/config~

** .gitignore

You can tell Git to automatically ignore certain files by adding file blobs to the file ~.gitignore~ in the root of your
repositories directory (i.e. the highest level). This is useful as you can exclude temporary files that your test editor
might create (e.g. Emacs leaves behind ~*~~ files) and if you're working with patient data then its quite likely that
this shouldn't be shared in a public repository such as GitHub. The [[https://github.com/github/gitignore][github/gitignore]] repository has a number of
skeleton/example files for different languages including [[https://github.com/github/gitignore/blob/master/R.gitignore][R]], I modify this to include all ~*.RData~ files to exclude any
and all R Data objects and also Emacs temporary files ~*~~. There is also [[https://www.gitignore.io/][gitignore.io]] which generates configs
automatically.

* Usage

** Initialise a repository

How you initialise a repository depends on whether you are doing it locally first or cloning a repository from a
[[#git-forge]]. If you bring a directory under git version control before setting up an online repository you can always
configure the remote (~origin~) afterwards.

*** Cloning a Remote Repository

Cloning a remote repository is straight-forward. On the front page of all forges (GitHub, GitLab, Codeberg etc.) is a
button above the listing of files to **Clone**. There are two methods of cloning, one uses ~https~ the other ~ssh~. To
use the later you will have had to add your SSH credentials to your user account on that forge.

#+CAPTION: Clonging a Git repository
#+NAME: git-clone
#+begin_src sh :eval no
  git clone
#+end_src

*** Locally

It is straight-forward to initialise a directory to be under git version control simply...


#+CAPTION: Initialising a local repository to bring it under Git version contorl.
#+NAME: git-local-init
#+begin_src sh :eval no
  git init
#+end_src

** Adding Files

#+CAPTION: Adding files within a git repository
#+NAME: git-add
#+begin_src sh :eval no
  git add file1.py tests/file2.py
#+end_src

** Making a commit

Typically a commit message should complete the sentence /This commit.../ and be succinct and informative. You can always
add additional information to commits but the title should be short /and/ informative.

#+CAPTION: Git commit with a message
#+NAME: git-commit
#+begin_src sh :eval no
  git commit -m "Adding first files to the repository"
#+end_src

** Pushing and Pulling

#+CAPTION: Git Workflow by [[https://nikkiandchris.io][nikkiandchris.io]]
[[./img/git/git_pull_push.jpg]]


** Fetch v Pull

Whether you work on a project collaboratively or simply use GitHub/GitLab to keep personal repositories in sync between
systems you will at some point have to use ~git pull~ to get your changes onto your local computer. But what is ~git
fetch~ and how does it differ from ~git pull~? The simplest answer to this is provided by this excellent cartoon from
[[https://allisonhorst.com/git-github][Allison Horst]].

#+CAPTION: ~git fetch~ v ~git pull~ by [[https://allisonhorst.com/git-github][Allison Horst]]
#+NAME: fig:git-fetch-v-git-pull

[[./img/git/git_fetch_v_pull.png]]

* Hooks


* Forges
:PROPERTIES:
:CUSTOM_ID: git-forge
:END:

Forges are places where Git repositories are hosted online for collaborative work. If public then others can view, fork
(make a copy online), clone (make a local copy) and then change the code themselves and if its useful submit a Pull
Request to have their changes incorporated into the original body of code for a project.

| Forge    | Description                                                                                                                      |
|----------+----------------------------------------------------------------------------------------------------------------------------------|
| [[id:52b4db29-ba21-4a8a-9b83-6e9a8dc02f41][GitHub]]   | Perhaps the largest and most widely used forge. Purchased my Micro$oft a few years ago.                                          |
| [[id:7cbd61f2-d6a5-4e67-af72-2a13a5e86faa][GitLab]]   | Comparable services with strong CI/CD functionality. Its also a free, open source piece of software so you can host it yourself. |
| [[https://xethub.com/][XetHub]]   | /A collaboration platform for accessing, exploring and iterating on large-scale repositories, backed by the power of Git./       |
| Codeberg |                                                                                                                                  |
| Gitea    |                                                                                                                                  |


* Commit History

Git keeps a detailed history of commits that contain metadata and other useful information.

** Git Log

There are many options for viewing and formatting the log history.

*** Git Short Log

A simple way to get the list of contributors is to

#+begin_src sh :eval no
  git shortlog -s -n -e
#+end_src

It can also be used to summarise contributions by combining with come command [[id:9c6257dc-cbef-4291-8369-b3dc6c173cf2][command line utilities]]. The following
formats commits by date (~YYYY-MM~), ~sorts~ them and then counts the number of ~uniq~ observations (from [[https://github.blog/2022-12-12-highlights-from-git-2-39/][here]]).

#+begin_src sh :eval no
  $ git log v2.38.0.. --date='format:%Y-%m' --format='%cd' | sort | uniq -c
#+end_src



** Blame


** Git Rebase



* IDE Integration
** Emacs Magit

If you use [[id:754f25a5-3429-4504-8a17-4efea1568eba][Emacs]] (and why wouldn't you?) then you should use [[https:magit.vc][Magit]] to manage your Git repository and interactions with
forges such as GitHub and GitLab. It includes the ability to synchronise locally details of issues and pull requests
from the repositories forge (but this requires a little extra work that is well documented).

** RStudio

[[id:fbe4e0bc-038d-4aeb-aa48-e312f469678e][RStudio]] has support for Git and GitHub baked in.

** GitKraken
[[https://www.gitkraken.com/][GitKraken]] is dedicated to working with your Git repositories and interacting with forges. It has some basic IDE features
for editing your code but it is really focused on helping you work with Git.

* Links
+ [[https://git-scm.com][Git]]
+ [[https:magit.vc][Magit]]
+ [[https://www.gitkraken.com/][GitKraken]]

** Tools

+ [[http://gitignore.io/][gitignore.io]]

** Learning Resources

+ [[http://blog.anvard.org/conversational-git/][Conversational Git]]
+ [[https://git-scm.com/book/en/v2][Pro Git]]
+ [[https://gitbetter.substack.com/archive?sort=new][Git Better]]
+ [[https://ohshitgit.com/][Oh Shit, Git!?!]]
+ [[https://ohmygit.org/][Oh My Git!]] - a game for learning Git.
+ [[https://onlywei.github.io/explain-git-with-d3/#clean][Explain Git with D3]]
+ [[https://learngitbranching.js.org/][Learn Git Branching]]

** HowTos

+ [[https://www.howtogeek.com/849210/git-rebase/][Git rebase: Everything You Need to Know]]

*** Branching

+ [[https://datasift.github.io/gitflow/IntroducingGitFlow.html][Introducing GitFlow]]

**  Alternatives

+ [[https://www.monotone.ca/][Monotone]]
