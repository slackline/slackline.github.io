:PROPERTIES:
:ID:       0859ef9e-834d-4e84-8e67-fa7593a61e0b

:mtime
:ctime:    20230222225246
:END:
#+TITLE: Git
#+DATE: <2022-05-24 Tue 22:07>
#+FILETAGS: :git:programming:documentation:version control:

[[https://git-scm.com][Git]] is the defacto standard for version control of code (and more) these days. Whether you write code in [[id:5b5d1562-ecb4-4199-b530-e7993723e112][Python]], [[id:de9a18a7-b4ef-4a9f-ac99-68f3c76488e5][R]],
scripts for [[id:ab2f5dfb-e355-4dbb-8ca0-12845b82e38a][Literate Programming]], Go, Rust, C++, Java, [[id:9c6257dc-cbef-4291-8369-b3dc6c173cf2][Bash]] or want to keep critical files such as your dotfiles,
~/etc/~ (using [[id:48249b0d-eeba-484a-8f00-808a14169692][git_etckeeper]]), or GPG encrypted passwords backed up you should consider using Git (or some other version
control system, but Git is the most popular for now).

It can be daunting facing yet another new area to tackle as you are only just getting to grips with a programming
language having to learn a bunch of unfamiliar concepts that seem of little value, I know I've been there, but it really
does pay dividends to invest time learning how to use Git. You will benefit from having your code backed up off-site,
the ability to work across multiple computers on the same code base, collaborate with others on code development, know
what changes have been made at which point in the history of the code development and in turn benefit from being able to
revert changes that are not required.

If you use [[id:754f25a5-3429-4504-8a17-4efea1568eba][Emacs]] then you should definitely be using [[id:220d7ba9-d30e-4149-a25b-03796e098b0d][Magit]] and if you use Git then you would benefit from using
[[id:c76767c4-2a49-42f8-a323-a6d6105e0bce][Pre-commit]] too, it saves you considerable time and effort in the long run.

#+ATTR_HTML: :width 300px
#+CAPTION: In Case of Fire
[[./img/git_in_case_of_fire.png]]

* Concepts

A repository is placed under version control when you ~git init~ within in but before doing so you need to set some
variables such as the ~user~ and ~email~. These can be done on a global scale which will apply across all repositories
you create or a local, per-repository basis (local settings in a repository over-ride global so they don't conflict).

#+ATTR_HTML: :width 600px
#+CAPTION: Git Workflow by [[https://nikkiandchris.io][nikkiandchris.io]]
[[./img/git/git_pull_push.jpg]]

* Setup
:PROPERTIES:
:ID:       75050201-e41c-40a4-bd65-cd1c0592951c
:mtime:    20230726132229 20230426111505
:ctime:    20230426111505
:END:

** Global Configuration

First thing to do is setup Git with your name and email address and a
few other common default settings.

#+begin_src sh
git config user.name 'My Username'
git config user.email 'my@email.org'
git config --global push.default upstream # Syncs pull/push to the same branch (https://stackoverflow.com/a/42642628/1444043)
#+end_src

*** Default upstream branch

You can set the default upstream branch to be the remote globally using

#+begin_src bash
git config --global push.autoSetupRemote true
#+end_src

This adds the following to your ~\~/.gitconfig~

#+begin_src
[push]
    autoSetupRemote = true
#+end_src
** Local Configuration


*** SSH Configuration

Each repository is configured via the file ~./.git/config~. Sometimes though you have multiple Git accounts
(e.g. personal and work) and you can use a neat [[https://blog.gitguardian.com/8-easy-steps-to-set-up-multiple-git-accounts/][trick]] to keep your configurations separate if you keep such work in
separate directories (e.g. ~~/work/~ and ~~/personal~). Define a separate ~~/work/.gitconfig-work~ and
~~/personal/.gitconfig-personal~  such as...

#+begin_src
[user]
email = your.personal@email.com
name = Your Name

[github]
user = "personal_github_username"

[core]
sshCommand = "ssh -i ~/.ssh/<personal_ssh_key>"
#+end_src

#+begin_src
[user]
email = your.work@email.com
name = Your Name

[github]
user = "work_github_username"

[core]
sshCommand = "ssh -i ~/.ssh/<work_ssh_key>"
#+end_src

In your global ~~/.gitconfig~ you then set the following.

#+begin_src
[includeIf “gitdir:~/personal/”] # include for all .git projects under personnal/
path = ~/personal/.gitconfig-personal

[includeIf “gitdir:~/work/”]
path = ~/work/.gitconfig-work
#+end_src

I've written more on using per-repository SSH keys at [[https://ns-rse.github.io/posts/git-ssh/][Git: Custom SSH credentials for git repositories]].

** Repository Configuration
*** Remote push defaults

Adding the following to your ~.git/config~ will means the first time you attempt to push a new branch from [[id:220d7ba9-d30e-4149-a25b-03796e098b0d][Magit]] you
will not be asked where you want to push to, it will automatically be the ~origin/<branch-name>~.

#+begin_src
[remote]
  pushDefault = origin

#+end_src
*** .gitignore

You can tell Git to automatically ignore certain files by adding file blobs to the file ~.gitignore~ in the root of your
repositories directory (i.e. the highest level). This is useful as you can exclude temporary files that your test editor
might create (e.g. Emacs leaves behind ~*~~ files) and if you're working with patient data then its quite likely that
this shouldn't be shared in a public repository such as GitHub. The [[https://github.com/github/gitignore][github/gitignore]] repository has a number of
skeleton/example files for different languages including [[https://github.com/github/gitignore/blob/master/R.gitignore][R]], I modify this to include all ~*.RData~ files to exclude any
and all R Data objects and also Emacs temporary files ~*~~. There is also [[https://www.gitignore.io/][gitignore.io]] which generates configs
automatically.

Another solution is to have an alias that prefixes the call to Git with the SSH credentials specific to the directory
which is matched based on a regular expression of directories (see [[https://hermitage.utsob.me/writings/technical/how-tos/how-to-manage-multiple-git-credential-for-the-same-provider/][How to Manage Multiple Git Credential for the Same
Provider]]).

** Shell Autocompletion

Git (>2.37.3 at least, perhaps before) ships with the file that automates git completion. Under Gentoo this installs at
~/usr/share/bash-completion/completions/git~ and it includes instructions on how to use it.

* Forges
:PROPERTIES:
:CUSTOM_ID: git-forge
:mtime:    20230102213516
:ctime:    20230102213516
:END:

Forges are places where Git repositories are hosted online for collaborative work. If public then others can view, fork
(make a copy online), clone (make a local copy) and then change the code themselves and if its useful submit a Pull
Request to have their changes incorporated into the original body of code for a project. Read more about each Forge at
the linked pages.

| Forge     | Description                                                                                                                      |
|-----------+----------------------------------------------------------------------------------------------------------------------------------|
| [[id:52b4db29-ba21-4a8a-9b83-6e9a8dc02f41][GitHub]]    | Perhaps the largest and most widely used forge. Purchased my Micro$oft a few years ago.                                          |
| [[id:7cbd61f2-d6a5-4e67-af72-2a13a5e86faa][GitLab]]    | Comparable services with strong CI/CD functionality. Its also a free, open source piece of software so you can host it yourself. |
| [[https://xethub.com/][XetHub]]    | /A collaboration platform for accessing, exploring and iterating on large-scale repositories, backed by the power of Git./       |
| [[https://codeberg.org/][Codeberg]]  | /Codeberg is a collaboration platform and Git hosting for Free and Open Source Software, content and projects./                  |
| [[https://gitea.io][Gitea]]     | A self-hosted Git Forge                                                                                                          |
| [[https://forgejo.org/][Forgejo]]   | A fork of Gitea which aims to allow federation between instances hosted on different servers.                                    |
| [[https://git.zx2c4.com/cgit/about/][cgit]]      | A hyperfast web frontend for git repositories written in C.                                                                      |
| Bare repo | It is also relatively simple to [[https://maddie.info//2023/09/05/simple-and-small-git-hosting.html][self-host over SSH]].                                                                              |
|           |                                                                                                                                  |

The Gittea based offerings have far less complete CI but there is a growing number of tools such as [[https://davejansen.com/publish-to-netlify-using-gitea-actions/][deploying to Netlify]].

* Usage
:PROPERTIES:
:ID:       2e8feb62-b0b0-43d9-9da3-bfba3c9af848
:mtime:    20231122193433
:ctime:    20231122193433
:END:

** Initialise a repository

How you initialise a repository depends on whether you are doing it locally first or cloning a repository from a
[[#git-forge]]. If you bring a directory under git version control before setting up an online repository you can always
configure the remote (~origin~) afterwards.

*** Cloning a Remote Repository

Cloning a remote repository is straight-forward. On the front page of all forges (GitHub, GitLab, Codeberg etc.) is a
button above the listing of files to **Clone**. There are two methods of cloning, one uses ~https~ the other ~ssh~. To
use the later you will have had to add your SSH credentials to your user account on that forge.

#+CAPTION: Clonging a Git repository
#+NAME: git-clone
#+begin_src sh
  git clone
#+end_src

*** Locally

It is straight-forward to initialise a directory to be under git version control simply...


#+CAPTION: Initialising a local repository to bring it under Git version contorl.
#+NAME: git-local-init
#+begin_src sh
  git init
#+end_src

If you then want to bring this under version control for an ~origin~ you create at a Forge you can do so with...

#+begin_src sh
git remote add origin git@work.github.com:work/new-project.git
git push -u origin master
#+end_src

** Adding Files

#+CAPTION: Adding files within a git repository
#+NAME: git-add
#+begin_src sh
  git add file1.py tests/file2.py
#+end_src

** Ignoring Files

You can tell Git to automatically ignore certain files by adding file blobs to the file ~.gitignore~ in the root of your
repositories directory (i.e. the highest level). This is useful as you can exclude temporary files that your test editor
might create (e.g. Emacs leaves behind ~*~~ files) and if you're working with patient data then its quite likely that
this shouldn't be shared in a public repository such as GitHub. The [[https://github.com/github/gitignore][github/gitignore]] repository has a number of
skeleton/example files for different languages including [[https://github.com/github/gitignore/blob/master/R.gitignore][R]], I modify this to include all ~*.RData~ files to exclude any
and all R Data objects and also Emacs temporary files ~*~~. There is also [[https://www.gitignore.io/][gitignore.io]] which generates configs
automatically.

#+begin_src sh
# History files
.Rhistory
.Rapp.history

# All Data files
*.RData

# Example code in package build process
*-Ex.R

# RStudio files
.Rproj.user/

# Emacs tmp files
*~

# produced vignettes
vignettes/*.html
vignettes/*.pdf

# OAuth2 token, see https://github.com/hadley/httr/releases/tag/v0.3
.httr-oauth
#+end_src

** Moving Files
You might rename a file and want delete the original, how to do this in Git? The solution is to ~mv~ your file just as
you would for a normal.
file.

#+begin_src sh
git mv file1.txt file2.txt
git commit -m "Renaming file1.txt > file2.txt"
git push
#+end_src

** Deleting Files
To remove a file complete from a repository *and* delete it locally then use ~rm~.

#+begin_src sh
git rm file1.txt
git commit -m "remove file1.txt"
git push -u origin master
#+end_src

** Removing Files
Sometimes you will want to remove a file from a Git repository but not delete it, to do this use the ~rm --cached~
option.

#+begin_src sh
# Remove a file
git rm --cached file.txt
# Remove a directory
git rm --cached -r directory
#+end_src

** Making a commit

Typically a commit message should complete the sentence /This commit.../ and be succinct and informative. You can always
add additional information to commits but the title should be short /and/ informative.

#+CAPTION: Git commit with a message
#+NAME: git-commit
#+begin_src sh
  git commit -m "Adding first files to the repository"
#+end_src

** Merging


** Pushing and Pulling



*** Fetch v Pull

Whether you work on a project collaboratively or simply use GitHub/GitLab to keep personal repositories in sync between
systems you will at some point have to use ~git pull~ to get your changes onto your local computer. But what is ~git
fetch~ and how does it differ from ~git pull~? The simplest answer to this is provided by this excellent cartoon from
[[https://allisonhorst.com/git-github][Allison Horst]].

#+ATTR_HTML: :width 800px
#+CAPTION: ~git fetch~ v ~git pull~ by [[https://allisonhorst.com/git-github][Allison Horst]]
#+NAME: fig:git-fetch-v-git-pull
[[./img/git/git_fetch_v_pull.png]]

*** Forcing pulls
:PROPERTIES:
:CUSTOM_ID: forcing-pulls
:END:
Sometimes you want to manually force a pull, and whilst it might be
tempting to use =git pull -f= this is not the best approach, rather you
should [[https://stackoverflow.com/a/9589927/1444043][use fetch and
reset]].

#+CAPTION:
#+NAME:
#+begin_src sh
git fetch origin master
git reset --hard FETCH_HEAD
git clean -df
#+end_src


* Branches
The beauty of Git is that it allows multiple people to work on the same software project without interfering with each
others work.  This is done through [[https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging][branching and merging]].

ATTR_HTML: :width 800px
#+CAPTION: Branches mean different things by [[https://jvns.ca/blog/2023/11/23/branches-intuition-reality/][Julia Evans]]
NAME: git-branches
[[./img/git/git_meet_the_branch_julia_evans.png]]


On GitHub/GitLab/BitBucket you will find the option to make a branch of a repository, but its generally cleaner to make
branches on your local machine and then have them pushed and updated to your remote (`origin`).  Create a branch and
switch to it in one step using...


#+CAPTION: Creating and checking out a new branch.
#+NAME:
#+begin_src sh
git checkout -b new_branch
#+end_src

You can see what branches there are now locally and which you are currently on using...

#+CAPTION:
#+NAME:
#+begin_src sh
git branch --list
 * new_branch
  master
#+end_src

If you create a branch locally it will not exist on the remote ~origin~. How does the remote repository know/become
aware of this new branch? If you try to push a ~local~ branch that doesn't exist on ~orogin~ then ~git~ will helpfully
tell you how to push from your ~local~ branch to ~origin~ and create the branch there.

#+CAPTION:
#+NAME:
#+begin_src sh
  git push --set-upstream origin new_branch
#+end_src

 You can push and update all branches on the remote ~origin~ with...


#+CAPTION:
#+NAME:
#+begin_src sh
git push --all -u
#+end_src

** Branching from a specified branch
Sometimes you may be working on a problem with others simultaneously and wish to develop you work together /before/
merging to master. In such an instance you could create a ~development~ branch and push your work to this to ensure
changes you and your colleague make are consistent and work before you merge that to master.

#+CAPTION:
#+NAME:
#+begin_src sh
git branch --list
 development
 master
#+end_src

I want branch from ~development~ rather than ~master~ and so you...

#+CAPTION:
#+NAME:
#+begin_src sh
git checkout -b my_new_branch development
#+end_src

** Move Most Recent Commit to a New Branch
From [[https://stackoverflow.com/a/1628584/1444043][here]]...

#+CAPTION: Move most recent commit from existing branch to a new branch.
#+NAME:
#+begin_src sh
git branch a_new_branch     # This creates a new branch from the existing.
git reset --hard ad1290ai   # Remove the last commit from the current branch
git checkout a_new_branch   # Moves to the new branch which includes the last commit
#+end_src

** Tidying up Merged Branches

Lots of articles out there on [[https://railsware.com/blog/git-housekeeping-tutorial-clean-up-outdated-branches-in-local-and-remote-repositories/][Git housekeeping]] one simple thing to do is use...

#+CAPTION: Prune branches that have been merged on fetching.
#+begin_src sh
git fetch -p
#+end_src

...which will prune branches locally that have been merged on ~origin~.

** Keep up with ~main~

As you work on your feature branch development will likely be on-going in other branches which are merged into ~main~
when complete. To avoid headaches when you commit to submit a Pull Request for your completed feature you should
regularly merge main into your branch.

There are two strategies for this ~merge~ and ~rebase~

*** ~git merge~

#+ATTR_HTML: :width 800px
#+CAPTION: Meet the merge by [[https://wizardzines.com/comics/meet-the-merge/][Julia Evans]]
#+NAME: fig:meet-the-merge
[[./img/git/git_merge_julia_evans.png]]

#+begin_
src sh
  git pull origin main        # Pulls the latest changes from origin/main
  git merge main --squash     # Merge the changes into your feature branch and squash commits
#+end_src

This may result in merge conflicts that you'll have to resolve.

#+ATTR_HTML: :width 800px
#+CAPTION: Meet the merge by [[https://wizardzines.com/comics/meet-the-merge/][Julia Evans]]
#+NAME: fig:meet-the-merge
[[./img/git/git_meet_the_merge_julia_evans.png]]

#+begin_
*** ~git rebase~

Another option to merging  ~main~ onto your branch that may be preferable and that is [[id:57ba7f41-cf41-493c-bbf4-9d1e05a0602d][Git Rebase]]. The
main reason for using ~git rebase main~ over ~git merge main~ is the resolution of conflicts. When using ~git merge
main~ all conflicts have to be dealt with in one go, however with ~git rebase main~ each commit from the ~main~ branch
is merged with your branch in turn and requires any conflicts to be resolved before merging the next commit. This can
make resolving conflicts a lot easier.

#+ATTR_HTML: :width 800px
#+CAPTION: Meet the rebase by [[https://wizardzines.com/comics/meet-the-merge/][Julia Evans]]
#+NAME: fig:meet-the-rebase
[[./img/git/git_rebase_julia_evans.png]]

As with merging you may encounter merge conflicts and because during a rebase each commit is merged individual you are
likely to continue working on your branch it is worthwhile enabling the [[https://git-scm.com/docs/git-rerere][Reuse Recorded Resolution (~rerere~)]] option so
that you do not have to resolve such conflicts in the future (from [[https://samwize.com/2022/12/15/tips-to-resolve-merge-conflicts-for-long-lived-branches/][here]]).

#+begin_src sh
  git config --global rerere.enabled true
#+end_src


#+ATTR_HTML: :width 800px
#+CAPTION: Meet the rebase by [[https://wizardzines.com/comics/meet-the-merge/][Julia Evans]]
#+NAME: fig:meet-the-rebase
[[./img/git/git_meet_the_rebase_julia_evans.png]]


*** Handling Conflicts

Conflicts need careful consideration as its down to you as a developer to decide which version you want to keep. Git
helpfully marks regions to make it clear where each section comes from and what the conflict is and you typically
manually edit/remove the unwanted section (and the demarcation markup).

Occasionally you may know which source you want to use in advance in which case you can resolve conflicts using the
~--ours~ / ~--theirs~ flags (see [[https://dev.to/waylonwalker/git-merge-ours-k82][here]]). After initiating a merge and being told there are conflicts you can ~git
checkout~ the branch you want to keep and then continue.

#+begin_src bash
  git checkout --ours .
  git merge --continue
#+end_src

** Copy files between branches

This isn't particularly advisable as you lose history which is the antithesis of Git, but sometimes you may wish to pull
a file from one branch to another. This can be done by checking out the destination branch (e.g. ~new_feature~) and the
using ~git checkout~ to pull from the branch where the file exists. **WARNING** This can be destructive as it will
over-write the file on ~new_feature~ with what ever is on the other branch. It is therefore only wise to do this with
new files or if you are absolutely certain that you have made no changes to the file on your ~new_feature~ branch and
are not going to lose anything.

#+begin_src sh
  git checkout -b new_feature    # Create and checkout a new branch
  git checkout old_feature_branch -- path/to/file/in/old_feature_branch
#+end_src

**NB** the ~--~ is a delimiter which indicates that what follows afterwards are not options.

** Trees instead of branches

One of the challenges of working on branches is that whilst its easy to switch between them if you have work in progress
you either need to ~git commit~ or ~git stash~ (and the ~git stash pop~ on returning to the branch) in order to
switch. An alternative model to this is to use [[id:ddcfed69-2ba5-442a-99b4-eaa5c7a9fe40][Git Worktree]].

** Tidy up Branches

It is good practice to delete branches both locally and on ~origin~ after they are done with. An article on doing so
locally is [[https://www.wisdomgeek.com/development/delete-git-branches-that-do-not-exist-on-remote/][Delete git branches that do not exist on remote - Wisdom Geek]].

* Merge Conflicts
:PROPERTIES:
:ID:       eea4a7d2-76b0-4328-9eca-cad7b6e1ff41
:mtime:    20230102213516 20230103103309
:ctime:    20230102213516 20230103103309
:END:

Merge conflicts arise when you have edited a file and someone else has edited the same point in the same file and their
changes have been merged before your Pull Request was made/approved. Git, whilst smart, doesn't know what to do in such
situations and so defers to the humans, asking them to resolve the conflict.

** Anatomy

Git conflicts are clearly marked in files.

** Resolving


* Git Stash
:PROPERTIES:
:ID:       f5784a68-fc79-4151-8737-28e6e43445de
:END:


Sometimes if you've work in progress (WIP) you may end up stashing your changes when you ~git pull~ as you'll be
informed that doing so would over-write unsaved changes and you should either ~git commit~ or ~git stash~. This later
strategy of [[https://www.git-scm.com/docs/git-stash][stashing]] is useful when you are not ready to ~git commit~ as you intend on coming back to your work. Its
straight-forward to make a stash...

#+begin_src sh
  git stash
#+end_src

You can view the list of stashes, which are specific to the branches on which they were created with either of the
following (~show~ gives greater detail).

#+begin_src sh
  git stash list
  stash@{0}: WIP on master: 70de7ca youtube-dl configuration
  stash@{1}: WIP on master: 6a8cdb0 Updating gitconfig/authinfo and install.R
#+end_src

** Applying Stashed Changes

When you return to your Work In Progress on the branch you are working on you likely want to restore the last saved
stash or another stash in from the history. This is achieved using the ~pop~ directive. Without any arguments it applies
the last stash, but its possible to specify the stash you wish to restore.

#+begin_src sh
  git stash pop
  git stash pop 6a8cdb0
  git stash pop stash@{1}
#+end_src

** Discarding Stashes
:PROPERTIES:
:mtime:    20230103103311 20230102213516
:ctime:    20230102213516
:END:

Sometimes you may not want to keep your stashes, you can discard the most recent or a specific stash with ~drop
[<stash>]~ or you can clear all stashes with ~clear~

#+begin_src sh
  git stash drop
  git stash drop stash@{1}
  git stash clear
#+end_src

* Git Bisect
:PROPERTIES:
:ID:       323647af-4d22-4b24-9763-320da9a1d76d
:mtime:    20230222123220
:ctime:    20230222123220
:END:

[[https://git-scm.com/docs/git-bisect][git bisect]] is a useful tool for debugging where an error has been introduced into a pipeline. It requires a starting
commit where code worked, and an end commit where it does.  A useful article is [[https://www.git-tower.com/learn/git/faq/git-bisect/][Using "git bisect" to Quickly Find Bugs]]
and this serves as a template for the following examples.

#+begin_src sh
  git bisect start
  git bisect bad HEAD
  git bisect good <hash>
#+end_src

Git will then automatically checkout the revisions in the middle of this range and we have to run our tests or builds to
check if things work, marking the commit as ~git bisect good~ or ~git bisect bad~. Git then repeats this process
splitting the commit range again. This is repeated until a bad commit is found and we have our problem.

On completion ~git bisect reset~ restores ~HEAD~.

This can be done in [[id:220d7ba9-d30e-4149-a25b-03796e098b0d][Magit]] of course!
* Hooks
:PROPERTIES:
:ID:       3e2b5f0c-2dff-45c1-ae9c-7cc43b5c81ae
:mtime:    20230910195251 20230910183057 20230102213516
:ctime:    20230102213516
:END:

Hooks are incredibly useful (not just in Git, but in general and form the basis of many [[id:3b6a27c8-6ef9-4133-95b9-302d2e4dbea3][CI/CD]] pipelines), but they also
run locally on various Git actions such as ~pre-commit~, ~post-commit~, ~pre-push~ or ~pre-pull~. Hooks are simple [[id:9c6257dc-cbef-4291-8369-b3dc6c173cf2][Bash]]
scripts that reside in ~.git/hooks~ with specific filenames that indicate at which stage they are to be run. Typically
this directory will be populated with various examples for the different hooks that are available if you have created
your repository locally.

** Pre-commit
:PROPERTIES:
:mtime:    20231115133558 20231022202227
:ctime:    20231022202227
:END:

[[https://pre-commit.com][Pre-commit]] and the associated service [[https://pre-commit.ci][pre-commit.ci]] are wonderful tools. I've written about them in a few blog posts and
even given a talk to the Research Computing group at the University of Leeds.

+ [[https://ns-rse.github.io/posts/pre-commit/][Pre-Commit : Protecting your future self]]
+ [[https://ns-rse.github.io/posts/pre-commit-updates/][Pre-Commit : Customising and Updating]]
+ [[https://ns-rse.github.io/posts/pre-commit-ci/][Pre-Commit.ci : Integrating Pre-Commit into CI/CD]]
+ [[https://ns-rse.github.io/pre-commit/#/title-slide][Slides]] ([[https://github.com/ns-rse/pre-commit][source]])

That doesn't cover everything though so more notes are in the [[id:c76767c4-2a49-42f8-a323-a6d6105e0bce][Pre-commit]] section and linked from there.


* Commit History
:PROPERTIES:
:ID:       612ae69f-f001-43cb-be32-fe5051e7368f
:mtime:    20231115114414
:ctime:    20231115114414
:END:

Git keeps a detailed history of commits that contain metadata and other useful information.

** Git Log

There are many options for viewing, formatting and searching the [[id:0b6eddb6-eb5c-4f26-aaea-beed3505f195][log]] history.

** Blame

[[https://www.git-scm.com/docs/git-blame][Git Blame]] shows who was responsible for changes to which lines of code, read more [[id:d8b70d14-06bd-46c5-97fc-5c8e4f2c3503][Git Blame]]. Sometimes though you don't
always want to use or acknowledge the blame. For example if you lint a bunch of pre-existing code you don't want the
blame applied to you, rather it should be applied to the original author. This is achieved using a
~.gitblame-ignore-revs~ file. I've written about that in the following article.

+ [[https://ns-rse.github.io/posts/whos_to_blame/][Who’s to Blame]]

** Reset and Revert

Useful article [[https://www.datacamp.com/tutorial/git-reset-revert-tutorial][here]].

* Git Aliases

Git has its own system for aliasing common commands, for now refer to the article on Git Blame ([[https://ns-rse.github.io/posts/whos_to_blame/][Who’s to Blame]]) for
examples of how to use aliases.

** Shell Aliases

It's useful to be aware of the options that are available to you for formatting your logs, but it can be cumbersome to
memorise them, particularly so when often your primary focus is on getting work done rather than becoming an expert in
the tools you use. To which end using [[id:c7d811f9-5e9f-43b9-9b0b-d647a399756c][Bash aliases]] to provide shortcuts to the formatting you want is invaluable. The
[[id:a1b78518-31e8-4fd3-a36f-d8f152832138][zsh]] shell comes with a bundle of aliases pre-configured, typically I just use ~glod~ which shows the graph in short
form, but you may find others to be more suited to your preferences, and if not you can always specify your own.

* Git Rebase

Git rebase is a powerful tool as it allows you to re-write history (i.e. the commit log). Read more at [[id:57ba7f41-cf41-493c-bbf4-9d1e05a0602d][Git Rebase]].


* IDE Integration

** Emacs Magit

If you use [[id:754f25a5-3429-4504-8a17-4efea1568eba][Emacs]] (and why wouldn't you?) then you should use [[https:magit.vc][Magit]] to manage your Git repositorclarity/evaluator/haspi/y and interactions with
forges such as GitHub and GitLab. It includes the ability to synchronise locally details of issues and pull requests
from the repositories forge (but this requires a little extra work that is well documented).

** RStudio

[[id:fbe4e0bc-038d-4aeb-aa48-e312f469678e][RStudio]] has support for Git and GitHub baked in.

** GitKraken
[[https://www.gitkraken.com/][GitKraken]] is dedicated to working with your Git repositories and interacting with forges. It has some basic IDE features
for editing your code but it is really focused on helping you work with Git.

* Searching History

That Git keeps a history of everything is /really, really/ useful because you can search it and find things in the past.

I've written more on that in [[id:dc40122d-b95d-4b57-a0a3-30fd0799c843][Git History]].

* Miscellaneous

There are tons of options to Git, here I document some that I've come across and found useful.

** --allow-empty

Sometimes you might want to force your CI/CD pipeline to run again, most of the time you can do this through the Actions
(GitHub) or Pipeline (GitLab) pages, but something like [[https://pre-commit.ci][pre-commit.ci]] can't be triggered from GitHub Actions. Instead
you can make an [[https://www.thread.house/2020/01/git-commit-allow-empty/][empty commit]] with the ~--allow-empty~ flag which would trigger the pipeline to run again.


* Data Version Control

It is often important to version control your data too, for more on this see [[id:2013cd50-f008-422a-ade1-b97d6bfc3a2a][Data Version Control]].


* Managing Multiple Repositories

Over time the number of repositories you have and use regularly will likely grow. A useful tool for managing these is
[[https://myrepos.branchable.com/][myrepos]] which helps manage multiple repositories (the command it provisions is ~mr~ for **m**y **r**epos).

In a `git` version controlled directory run ~mr register~ which sets up ~\~/.mrconfig~ you can then update them all (in
parallel!) with ~mr -j6 update~. Commands run on individual repositories can be customised.

* Teaching

I've ended up teaching people the basics of Git and GitHub using the excellent [[https://srse-git-github-zero2hero.netlify.app/][srse-git-github-zero2hero.netlify.app/]]
(Git Repo : [[https://github.com/RSE-Sheffield/git-github-zero-to-hero][RSE-Sheffield/git-github-zero-to-hero]]).  Feedback for this module often requested more advanced materials,
to which end I have undertaken developing an intermediate course [[id:09da049c-9288-4856-af3e-e67de566588b][Git Collaboration]].

* Links
+ [[https://git-scm.com][Git]]
+ [[https:magit.vc][Magit]]
+ [[https://www.gitkraken.com/][GitKraken]]

** Tools

+ [[http://gitignore.io/][gitignore.io]]
+ [[https://initialcommit.com/blog/git-sim][git-sim: Visually simulate Git operations in your own repos]]
+ [[https://github.com/wfxr/forgit][forgit]] eases use of Git at the command line
+ [[https://github.com/o2sh/onefetch][onefetch]] - command line utility for fast overview of a repository.

** Learning Resources

+ [[http://blog.anvard.org/conversational-git/][Conversational Git]]
+ [[https://git-scm.com/book/en/v2][Pro Git]]
+ [[https://gitbetter.substack.com/archive?sort=new][Git Better]]
+ [[https://ohshitgit.com/][Oh Shit, Git!?!]]
+ [[https://ohmygit.org/][Oh My Git!]] - a game for learning Git.
+ [[https://onlywei.github.io/explain-git-with-d3/#clean][Explain Git with D3]]
+ [[https://learngitbranching.js.org/][Learn Git Branching]]
+ [[https://srse-git-github-zero2hero.netlify.app/][Git & GitHub through GitKraken Client - From Zero to Hero]]
+ [[https://initialcommit.com/blog/git-sim][git-sim : visually simulate Git operations in your own repos]]
+ [[https://www.youtube.com/watch?v=_e5oq4JT4_8][Git Legit]] - Good video on how to use Git effectively, making atomic commits, rebasing, avoiding checkpoints to given a
  clean history.

** HowTos

*** Commit

+ [[https://cbea.ms/git-commit/][How to Write a Git Commit Message]]
+ [[http://www.pauline-vos.nl/atomic-commits/][Atomic Commits]] ([[https://www.pauline-vos.nl/git-legit-cheatsheet/][Git Legit Cheatsheet]])

*** Rebase

+ [[https://www.howtogeek.com/849210/git-rebase/][Git rebase: Everything You Need to Know]]
+ [[https://about.gitlab.com/blog/2022/11/08/rebase-in-real-life/][GitLab Blog | How to use Git rebase in real life]]
+ [[https://about.gitlab.com/blog/2022/10/06/take-advantage-of-git-rebase/][GitLab Blog | Take advantage of Git rebase]]
+ [[https://arialdomartini.github.io/no-reason-to-squash][No Reason to Squash]]
+ [[https://adamj.eu/tech/2023/10/31/git-force-push-safely/][Git: Force push safely with --force-with-lease and --force-if-includes - Adam Johnson]]
+ [[https://megakemp.com/2019/03/20/the-case-for-pull-rebase/][The Case for Pull Rebase]]
+ [[https://jvns.ca/blog/2023/11/06/rebasing-what-can-go-wrong-/][git rebase: what can go wrong?]]

*** Resetting

+ [[https://www.scmgalaxy.com/tutorials/git-commands-tutorials-and-example-git-reset-git-revert/][Git Reset and Revert Tutorial for Beginners]]


*** Signing

+ [[https://migusgroup.com/blog/sign-git-commits-securely-with-vaulted-ssh-keys/][Sign Git Commits Securely With Vaulted SSH Keys]]
+ [[https://gittuf.github.io][gittuf]] provides a security layer for Git using some concepts introduced by [[https://theupdateframework.io/][The Update Framework (TUF)]].

*** Misc

+ [[https://garrit.xyz/posts/2023-10-13-organizing-multiple-git-identities][Organizing multiple Git identities | Garrit's Notes]]
+ [[https://samwize.com/2022/12/15/tips-to-resolve-merge-conflicts-for-long-lived-branches/][How to resolve merge conflicts for long-lived branches | @samwize]]
+ [[https://csswizardry.com/2017/05/little-things-i-like-to-do-with-git/#praise-people][Little Things I Like to Do with Git – CSS Wizardry – Web Performance Optimisation]]
+ [[https://blog.trunk.io/minimum-viable-git-for-trunk-based-development-81a5da7a77a7][Minimize Git for maximum value]]
+ [[https://myme.no/posts/2023-01-22-git-commands-you-do-not-need.html][Git Commands You Probably Do Not Need]]
+ [[https://www.admin-magazine.com/Archive/2022/72/Versioned-backups-of-local-drives-with-Git][Git Versioned Backups » ADMIN Magazine]]
+ [[https://web.archive.org/web/20190207210108/http://stevelorek.com/how-to-shrink-a-git-repository.html][How to Shrink a Git Repository]]
+ [[https://jvns.ca/blog/2023/09/14/in-a-git-repository--where-do-your-files-live-/][In a git repository, where do your files live?]]
+ [[https://blog.meain.io/2023/what-is-in-dot-git/][What is in that .git directory?]]
+ [[https://alexwlchan.net/a-plumbers-guide-to-git/][A Plumber’s Guide to Git – alexwlchan]]

** Commits
+ [[https://dev.to/hornet_daemon/git-commit-patterns-5dm7][Git Commit Patterns]]

** Workflows

+ [[https://www.atlassian.com/git/tutorials/comparing-workflows][Atlassian : Comapring Workflows]]
+ [[https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow][Atlassian : Feature Branching]]
+ [[https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow][Atlassian : Gitflow Workflow]]
+ [[https://www.atlassian.com/git/tutorials/comparing-workflows/forking-workflow][Atlassian : Forking Workflow]]
+ [[https://datasift.github.io/gitflow/IntroducingGitFlow.html][Introducing GitFlow]]
+ [[https://memorici.de/posts/better-gitflow/][Better Gitflow]]

** Extensions

+ [[https://tissue.systemreboot.net/][tissue]] an issue tracker and project information management system built on plain text files and Git.
+ [[https://github.com/klaussilveira/gitlist][gitlist]] webUI to Git repositories.
+ [[https://octobox.io/][Octobox]] - manage GitHub Notifications in a WebUI.
+ [[https://github.com/MichaelMure/git-bug][git-bug: Distributed, offline-first bug tracker embedded in git, with bridges]]
+ [[https://github.com/dandavison/delta][delta: A syntax-highlighting pager for git, diff, and grep output]]
+ [[https://myrepos.branchable.com/][myrepos]]

** Related

+ [[https://github.com/dolthub/dolt][Dolt]] - Git for Data
+ [[https://dvc.org/][DVC]] - Data Version Control
+ [[https://mlflow.org/][MLFlow]] - Machline Learning experiment tracking
+ [[https://xethub.com/][XetHub]] - Large file/data storage with version control
+ [[https://kartproject.org/][Kart]] - Distributed version-control for geospatial and tabular data

** Alternatives

+ [[https://forgefed.org/][ForgeFed]]
+ [[https://www.fossil-scm.org/home/doc/trunk/www/index.wiki][Fossil]]
+ [[https://pijul.org/][Pijul]]
+ [[https://gitless.com/][Gitless]]
+ [[https://martinvonz.github.io/jj/][Jujutsu]]
+ [[https://www.monotone.ca/][Monotone]]
+ [[https://forgefriends.org/][forgefriends]]
+ [[https://www.gameoftrees.org/][Game of Trees]]
+ [[https://github.com/mitchellwrosen/mit][mitchellwrosen/mit: Git wrapper with a streamlined UX]]

*** Forges

**** Roll Your Own

+ [[https://forgejo.org/][Forgejo – Beyond coding. We forge.]]
+ [[https://sourcehut.org/][sourcehut - the hacker's forge]]
+ [[https://codeberg.org/][Codeberg.org]]

**** Hosted

+ [[https://about.gitly.eu/index.php][Gitly: Private Git Hosting made in EU.]]
** Internals

+ [[https://github.blog/2022-08-29-gits-database-internals-i-packed-object-store/][Git's database internals I : packed object store]]
+ [[https://github.blog/2022-08-30-gits-database-internals-ii-commit-history-queries/][Git’s database internals II: commit history queries]]
+ [[https://github.blog/2022-08-31-gits-database-internals-iii-file-history-queries/][Git’s database internals III: file history queries]]
+ [[https://github.blog/2022-09-01-gits-database-internals-iv-distributed-synchronization/][Git’s database internals IV: distributed synchronization]]
+ [[https://github.blog/2022-09-02-gits-database-internals-v-scalability/][Git’s database internals V: scalability]]
+ [[https://jvns.ca/blog/2023/09/14/in-a-git-repository--where-do-your-files-live-/][In a git repository, where do your files live?]]

** Misc

+ [[https://ozh.org/contribution/][Custom Github-like contribution graph]]
+ [[https://github.com/git-chglog/git-chglog/][GitHub - git-chglog/git-chglog: CHANGELOG generator]]
+ [[https://github.com/arzzen/git-quick-stats][arzzen/git-quick-stats: ▁▅▆▃▅ Git quick statistics is a simple and
  efficient way to access various statistics in git repository.]]
+ [[https://gitcute.cat/][Cute Commits]]
+ [[https://jvns.ca/blog/2023/10/20/some-miscellaneous-git-facts/][Some miscellaneous git facts]]
+ [[https://jvns.ca/blog/2023/11/01/confusing-git-terminology/][Confusing git terminology]]

** Research

+ [[https://journals.sagepub.com/doi/full/10.1177/2515245918754826][Curating Research Assets: A Tutorial on the Git Version Control System - Matti Vuorre, James P. Curley, 2018]]
+ [[https://www.tandfonline.com/doi/full/10.1080/10691898.2020.1848485][Implementing Version Control With Git and GitHub
  as a Learning Objective in Statistics and Data Science Courses]]

** Reviewing

+ [[https://davidism.com/github-pull-request-pitfalls/][GitHub Pull Request Pitfalls]]
+ [[https://code-review.tidyverse.org/][Tidyteam code review principles]] (derived from [[https://google.github.io/eng-practices/review/reviewer/][How to do a Code Review]])
+ [[https://www.pyopensci.org/software-peer-review/][pyOpenSci Software Peer Review Guidebook]]
