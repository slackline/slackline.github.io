:PROPERTIES:
:ID:       a53fa3c5-f091-4715-a1a4-a94071407abf
:mtime:    20240523145115 20240523132208 20240502105958 20231022214824 20230908084133 20230907222812 20230813184404 20230812222550 20230623080100 20230215101306
:ctime:    20230215101306
:END:
#+TITLE: Arch Linux
#+FILETAGS: :gnu:linux:arch:

I've used [[id:44b32b4e-1bef-49eb-b53c-86d9129cb29a][Gentoo]] for many years but I found my an ageing 12 year old laptop that compiling was taking longer and longer
(compared to my main system at least!). I also had a number of [[id:69864d74-8ec2-42e4-a227-f824a521a5ce][Raspberry Pis]] that I didn't want to have to setup cross
compiling environments in order to run Gentoo on. I still wanted a rolling distribution though that always had the
latest version of packages installed. Enter [[https://archlinux.org][Arch Linux]] and [[https://archlinuxarm.org/][Arch Linux ARM]].

* ~systemd~

By default Arch uses [[https://systemd.io][~systemd~]] for starting and running services.

** Services

To add a service

#+begin_src bash
systemctl enable --now <unit>.service
#+end_src

To start/stop/restart/status a service

#+begin_src bash
systemctl [start|stop|restart|status] <unit>.service
#+end_src

** ~netctl~

~netctl~ is a subunit specifically concerned with netwoking.

** ~journalctl~

~journalctl~ is a programme for reading the log files from ~systemd~. To follow logs for a specific service in real time
you can use ~journalctl -fu <unit>.service~.

* Pacman

Pacman is the default package manager on Arch and its good (although not as good as Portage!).

** Installing packages

Typically you synchronise the databases when installing a package you update the database.

#+begin-src
pacman -Syu <pkgname>
#+end-src


** Configuration

Configuration of ~pacman~ is via ~/etc/pacman.conf~ and the ~/etc/pacman.d/~ directory and is well documented within
each of the files. You can create hooks by adding them to ~/etc/pacman.d/hooks~. For example the following recompiles R
packages on upgrade.

#+begin_src
[Trigger]
Operation = Install
Operation = Upgrade
Type = Package
Target = r

[Action]
Description = Update R packages on upgrade
When = PostTransaction
Exec = /usr/bin/Rscript -e 'update.packages(ask = FALSE, checkBuilt = TRUE)'
#+end_src

** Trouble Shooting

*** Insufficient Space

My system is showing its age and I don't use it often, as a consequence I don't update daily/weekly and this means
~pacman -Syu~ can exceed the available space on the root partition. Its a good opportunity to clear out things you don't
need, but sometimes the problem persists.

You can get round this by installing/upgrading individual packages with ~pacman -S <package(s)>~ or you can set a
temporary storage when upgrading (i.e. to a partition that does have sufficient space) as advised [[https://unix.stackexchange.com/a/13090][here]] with ~pacman -Syu
--cache /path/with/more/space~.

*** Download timeouts

When performing large upgrades I found I regularly encountered timeouts and slow transfer rates. A solution to this is
to leverage the ~XferCommand~ option in ~/etc/pacman.conf~ which allows the configuration of an external programme
(e.g. ~wget~ or ~curl~) to perform the downloads.

*** Untrusted signatures

If you leave updates long enough you may find that packages that are downloaded do not have trusted signatures. This
means new people have joined the Arch team and signed the packages but your keyring is not up-to-date and so doesn't
recognise them. To solve this is to update the ~archlinux-keyring~ package first.

#+begin_src bash
pacman -S archlinux-keyring
#+end_src

** Downgrading Packages

[[https://wiki.archlinux.org/title/Downgrading_packages][Downgrading packages - ArchWiki]] covers everything in detail. Ideally use the ~pacman~ cache

#+begin_src sh
pacman -U file:///var/cache/pacman/pkg/package-old_version.pkg.tar.type
#+end_src

If the file is not in your local cache you can obtain older versions from the [[https://archive.archlinux.org/][Arch Linux Archive]] or one of its
[[https://gitlab.archlinux.org/archlinux/infrastructure/-/blob/master/docs/servers.md#archive-mirrors][mirrors]]. You can use ~wget~ to grab these files but remember to get the signature file too.

#+begin_src bash
cd /var/cache/pacman/pkg
wget https://archive.archlinux.org/packages/l/libgit2/libgit2-1%3A1.7.2-1-x86_64.pkg.tar.{zst,zst.sig}
#+end_src

To prevent packages from being updated again you should add them in a space delimited list to ~IgnorePkg~ in
~/etc/pacman.conf~

#+begin_src bash
IgnorePkg = libgit2
#+end_src

* AUR (Arch User Repository)

[[https://aur.archlinux.org/][AUR]] is a repository of user maintained packages outside of the main Pacman repository. Each package is maintained as a
git repository that the user can clone and then install. There are a few helper applications that wrap the functionality
of Pacman into a command users can use (since you typically install AUR packages as a user rather than as ~root~).

The [[https://github.com/Morganamilo/paru][paru]] package is written in [[id:3469c33e-7c61-46c7-b01e-655695f3b93c][Rust]], to install it run the following.

#+begin-src
sudo pacman -S --needed base-devel
git clone https://aur.archlinux.org/paru.git
cd paru
makepkg -sri
#+end-src

Once installed it functions pretty much like ~pacman~

** ~makepkg~ cores

Configure the number of cores used when compiling from source by adding the following to ~/etc/makepkg.conf~

#+begin_src conf
MAKEFLAG="-j$(nproc)"
#+end_src
