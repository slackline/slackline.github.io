:PROPERTIES:
:ID:       ea1499ab-dab2-49b1-8479-cb5a2fbd38bc
:mtime:    20250723125543 20240827191059 20240430154524 20240419202116 20231128211522 20231103145409 20230714224933 20230503073018 20230331230614 20230103103314 20221224191223 20230103103313 20230103103309 20230103103308
:ctime:    20221224191223 20230103103308
:END:
#+TITLE: Programming
#+DATE: [2022-02-15 Tue 21:07]
#+FILETAGS: :programming:theory:design patterns:refactoring:

Programming can be abstracted from the language in which it is written and the [[id:526272b2-904f-4656-b24c-fdefc4492fdc][Software]] which results.

* Data Structures

I picked up the book [[id:c006a2dc-166b-44c7-9473-6eb8ef6e7ec8][A Common Sense Guide to Data Structures and Algorithms (2nd Edition)]] to help improve my
understanding of these important aspects of programming.

* Algorithms

* SOLID Principles
:PROPERTIES:
:mtime:    20250723125708
:ctime:    20250723125708
:END:

* Design Patterns
:PROPERTIES:
:ID:       28961e24-0099-4440-bae1-87dac7c81ef1
:END:

** Python
+ [[https://www.lihil.cc/blog/design-patterns-you-should-unlearn-in-python-part1/][Design Patterns You Should Unlearn in Python (Part 1)]]
+ [[https://www.lihil.cc/blog/design-patterns-you-should-unlearn-in-python-part2][Design Patterns You Should Unlearn in Python (Part 2)]]
+ [[https://www.lihil.cc/blog/Most-Design-Patterns-Are-Just-Dependency-Injection-In-Disguise][Most Design Patterns Are Just Dependency Injection in Disguise]]

* [[id:55581960-395e-443c-bd5d-bc00c496b6ae][Linting]]

Linting is a process of static code analysis that aims to improve the quality of your code. Read more about [[id:55581960-395e-443c-bd5d-bc00c496b6ae][Linting]].

* Test Driven Development

* Refactoring

Often code is written in a rush to get something working and best practices aren't always followed, in part because the
requirements of the software are often hazy at the outset and only crystalise once work has progressed. This means that
code would often benefit from being refactored. This means re-writing it and simplifying the code, abstracting common
features out into reusable functions.

* Configuration

You will over time develop customised configurations for your preferred work environment, you can take steps to minimise
the pain involved when setting up new computers or systems you gain access to by using [[id:31304184-2fad-4cc5-824b-3ab4b9d2e126][dotfiles]] to manage such
configurations.

* Languages

There are a lot of languages out there to learn, in the past I've learnt some very basic C and Fortran but have mainly
worked with interpreted languages which don't require compiling. Various languages I have notes on (some more than
others!).

+ [[id:5b5d1562-ecb4-4199-b530-e7993723e112][Python]]
+ [[id:de9a18a7-b4ef-4a9f-ac99-68f3c76488e5][R]]
+ [[id:3469c33e-7c61-46c7-b01e-655695f3b93c][Rust]]
+ [[id:9c6257dc-cbef-4291-8369-b3dc6c173cf2][Bash]]


I don't dabble much in compiled languages but thought it worth making a note of [[https://justine.lol/cosmo3/][Cosmopolitan Third Edition]] which
compiles C/C++ across architectures and operating systems. Very clever!

* Conferences

I am unlikely to attend any conferences specifically on programming but these days you don't have to physically go
somewhere to attend conferences when they are often available online (either live or retrospectively).

+ [[id:f76ac811-6c1a-4aa6-9492-8cbae7cb50ca][Emacs Conf]]
+ [[id:cc3612e7-3ed5-4cca-b36d-0a4b20e8669d][NormConf]]

* Links

+ [[https://www.catharsisinsight.com/_files/ugd/fce7f8_f9d2fea4f1b9478baeb7e84ab1b63759.pdf]["It's like Coding in the Dark" : The need for learning cultures within coding teams]]
+ [[https://refactoring.guru/refactoring][Refactoring Guru : Refactoring]]
+ [[https://refactoring.guru/design-patterns][Refactoring Guru : Design Patterns]]
+ [[https://python-patterns.guide/][Python Design Patterns]]

** Parallelisation

+ [[https://ppc.cs.aalto.fi/][Programming Parallel Computers]]

** Misc

+ [[https://norasandler.com/2017/11/29/Write-a-Compiler.html][Writing a C Compiler, Part 1]]
+ [[https://www.pythonmorsels.com/programming-exercise-tips/][Solving programming exercises - Python Morsels]]
+ [[https://www.lihil.cc/blog/design-patterns-you-should-unlearn-in-python-part1][Design Patterns You Should Unlearn in Python-Part1]]

** Books

+ [[https://aosabook.org/en/][The Architecture of Open Source Applications]]
+ [[https://merely-useful.tech/py-rse/][Research Software Engineering with Python]]
+ [[https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/index.html][Structure and Interpretation of Computer Programms]]
  + [[https://mk12.github.io/sicp/exercise/index.html][SICP Study companion]]
