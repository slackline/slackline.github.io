:PROPERTIES:
:ID:       ea1499ab-dab2-49b1-8479-cb5a2fbd38bc
:END:
#+TITLE: Programming
#+DATE: [2022-02-15 Tue 21:07]
#+FILETAGS: %?

Programming can be abstracted from the language in which it is written and the [[id:526272b2-904f-4656-b24c-fdefc4492fdc][Software]] which results.

* Data Structures
:PROPERTIES:
:ID:       347000ec-6cec-4187-a998-9a96ad6f3946
:END:

* Algorithms
:PROPERTIES:
:ID:       c7298d65-4e43-447b-b6fd-968b8eef03db
:END:

* SOLID Principles
:PROPERTIES:
:ID:       4d2971f0-9dc1-4a51-b022-2b586c735fd2
:END:

* Design Patterns
:PROPERTIES:
:ID:       28961e24-0099-4440-bae1-87dac7c81ef1
:END:

* Linting
:PROPERTIES:
:ID:       55581960-395e-443c-bd5d-bc00c496b6ae
:END:

Linting is a process of automatically formatting your code to conform to specific coding styles. What these might be
depends on the language and the preferred style but there are a number of advantages to using linting on your code.

+ Reduce bugs.
+ Improve performance.
+ Mitigate against some security flaws.
+ Improve coding skills.
+ Consistent coding style.

All of which help reduce the [[https://en.wikipedia.org/wiki/Technical_debt][technical debt]] which reduces the mount of maintenance required.

These can be setup on a per language, or even per project basis to work from your IDE or in a given pipeline, but a
useful approach is to integrate something like [[https://megalinter.github.io/latest/][MegaLinter]] into your pipeline (GitHub Action, CI on GitLab etc.). A
useful article on doing so is [[https://nicolas.vuillamy.fr/improve-uniformize-and-secure-your-code-base-with-megalinter-62ebab422c1][Limit your technical debt and secure your code base using MegaLinter]].

* Test Driven Development
:PROPERTIES:
:ID:       119d0863-1d66-4fda-ac42-5806243f9c99
:END:

* Refactoring
:PROPERTIES:
:ID:       9b72d256-9d28-444d-86ca-a49197342b03
:END:

Often code is written in a rush to get something working and best practices aren't always followed, in part because the
requirements of the software are often hazy at the outset and only crystalise once work has progressed. This means that
code would often benefit from being refactored. This means re-writing it and simplifying the code, abstracting common
features out into reusable functions.

* Links
+ [[https://www.catharsisinsight.com/_files/ugd/fce7f8_f9d2fea4f1b9478baeb7e84ab1b63759.pdf]["It's like Coding in the Dark" : The need for learning cultures within coding teams]]
+ [[https://refactoring.guru/refactoring][Refactoring Guru : Refactoring]]
+ [[https://refactoring.guru/design-patterns][Refactoring Guru : Design Patterns]]
