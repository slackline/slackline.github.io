:PROPERTIES:
:ID:       9c6257dc-cbef-4291-8369-b3dc6c173cf2
:mtime:    20251028071257 20250829111129 20250804095803 20250527130700 20250323205301 20240901104651 20240610155824 20240419192502 20231231085056 20231030220403 20231012172230 20230915150059 20230912203523 20230911222141 20230722093604 20230714103949 20230528213012 20230519194008 20230330135624 20230326125853 20230310194006 20230224092946 20230105145245 20230103103313 20221231194258 20230103103312
:ctime:    20221231194258
:END:
#+TITLE: Bash
#+DATE: [2022-04-21 Thu 10:00]
#+FILETAGS: :bash:programming:linux:

Bash is the default shell on most GNU/Linux systems and its well worth learning how to use it as it is a powerful
scripting language. Day-to-day I actually use [[id:a1b78518-31e8-4fd3-a36f-d8f152832138][zsh]] to drive my command prompt as it contains a bunch of additional
functionality such as customised command prompts and a ton of built-in aliases that I find useful. But I still use Bash
scripts to accomplish small tasks.

* Arrays

** Array Length

You can find the length of an array using the ~${#array[@]}~ syntax.

#+begin_src bash
  EXT="flac"
  FILES=$(find . -type f -iname "*.${EXT}")
  # NB - This doesn't work correctly, the whole list rather than rows are taken for counting and it returns the number
  #      of characters not the number of lines?
  echo "Found ${#FILES[@]} of type ${EXT}"
#+end_src

* Bash Scripts

** Safe mode

It's useful to set a [[http://redsymbol.net/articles/unofficial-bash-strict-mode/][Unofficial Bash Strict Mode]] (see also [[https://wizardzines.com/comics/bash-errors/][b0rk Bash Errors]])

#+begin_src sh
set -euo pipefail
IFS=$'\n\t'
#+end_src


** Loops

There are the usual selection of loops ~for~ and ~while~

*** ~for~

#+begin_src
for in in $(seq 1 10); do
  echo ${i}
done
#+end_src

*** ~while~


** Setting Flags

Scripts can store options using the following pattern.

#+begin_src sh
set -euo pipefail

usage()
{
    echo "usage : flac2mp3 [ -d DIR ] [ -j JOBS ] [ -b BITRATE ]"
}

while getopts "d:j:b:?h" option
do
    case $option in
	d)
	    INPUT_DIR=${OPTARG};;
	j)
	    JOBS=${OPTARG};;
	b)
	    BITRATE=${OPTARG};;
	h|?)
            usage
            exit 0;;
    esac
done
#+end_src

** Coloured Messages

Get coloured ~echo~ from a script using the following function.


#+begin_src sh
  function print_stage() {
    echo -e " \e[33m*\e[39m \e[94m$1\e[39m"
}
#+end_src

** Asking for Input

A script can ask for input from users using the following ([[https://wiki.gentoo.org/wiki/LiveUSB#Automatic_drive-wide_installation_script][source]])

#+begin_src sh
  #!/bin/bash
  set -e
  FAVOURITE_COLOUR=${1:?Tell me your favouirite colour?}
  FAVOURITE_FOOD=%{2:?What is your favourite food?}
#+end_src

** Lint your Scripts

Lint your scripts with [[https://www.shellcheck.net/][shellcheck]] and of course you can use [[id:a29a1e50-3cf2-4d88-a71d-7c600fdf8f65][Emacs LSP]] to do so on the fly.

* Configuration

Configuration of Bash on a per-user basis is via ~\~/.bashrc~ / ~\~/.bash_profile~ / ~\~/.bash_aliases~
** Aliases
:PROPERTIES:
:ID:       c7d811f9-5e9f-43b9-9b0b-d647a399756c
:END:

*** Ignoring Aliases

Sometimes you /don't/ want an alias to be used, even if you have set it. You can access the unaliased form of a command
by encapsulating it in single quotes e.g. ~'ls'~

* Tips and Tricks

** Run the previous command

You can use ~!!~ to recall and execute the last command in [[https://shawnhooper.ca/2025/10/27/bash-history-command/][history]]. In and of itself no that useful but comes in handy
when combined with other commands such as others for example [[https://fosstodon.org/@salcode@phpc.social/115449044630395087][~git switch <new_remote_branch>~]] which hasn't been fetched
and will fail. You therefore...

#+begin_src sh
  $ git switch new_remote_branch
  fatal: invalid reference: new_remote_branch
  $ git fetch && !!
#+end_src

...although you should of course be using [[id:220d7ba9-d30e-4149-a25b-03796e098b0d][Magit]] to manage all [[id:3c905838-8de4-4bb6-9171-98c1332456be][Git]] things.

** Make a directory for every file

You can use [[http://www.gnu.org/software/bash/manual/bash.html#Shell-Parameter-Expansion][variable substitution]] to quickly make a directory for every file in a given location (from [[https://unix.stackexchange.com/a/220026/39149][here]]).

#+BEGIN_SRC bash eval:no
  cd path/to/directory
  FILE_EXT="txt"
  for x in *.txt; do
    mkdir "${x%\.txt}" && mv "$x" "${x%\.}"
  done
#+END_SRC

** Parameter Expansion

You can use [[https://stackoverflow.com/questions/19482123/extract-part-of-a-string-using-bash-cut-split/19482947#19482947][parameter expansion]] to extract components of strings.

#+begin_src bash
  TEST="user/repository"
  USER=${TEST%/*} # Retains everything BEFORE /
  REPO=${TEST#*/} # Retains everyting AFTER /
#+end_src

** Getting dates dynamically

You can get dates dynamically in output files courtesy of the ~date~ command...

#+begin_src bash
  touch new-file-$(date +%F)
  # Different formats
  $(date +%Y-%m-%d)
  $(date +%F) # equivalent to above
  $(date +$s) # seconds since epoch
  $(date +%Y-%m-%d-%H:%M:%S)
  $(date +%F-%X) # equivalent to above
#+end_src

** Print a value if a variable doesn't exist

If ~$somevar~ isn't defined then ~42~ will be printed (or used) instead...

#+begin_src bash
echo "${somevar-42}"
#+end_src

** Line-feed to carriage return

There is ~dos2unix~ command which does this but both [[id:16c65320-e19d-4bdc-ab55-c410860cddfa][sed]] and Bash can be used to do this conversion as can ~tr~anslate.

*** sed

#+begin_src shell
  sed -e 's/\r$//'
#+end_src

*** tr

#+begin_src shell
tr -d '\r'
#+end_src


* Command Line Tools

The power of the command line comes from pipping the output of one command to another. To which end there are a bunch of
useful command line tools for working with files.

** awk

[[id:4d64ea2c-b91a-4162-8d79-889b05b5ba80][awk]]

** find

[[id:af0aba11-91a9-4e79-89fb-1ae6ca55f3c8][find]]
** sed

[[id:16c65320-e19d-4bdc-ab55-c410860cddfa][sed]] is a ~s~tring ~ed~itor for processing text files at the command line.

** fzf

[[https://github.com/junegunn/fzf][fzf]] is a fuzzy completion tool. It integrates with Bash and [[id:a1b78518-31e8-4fd3-a36f-d8f152832138][zsh]][[id:a1b78518-31e8-4fd3-a36f-d8f152832138][ZSH]]

** gh

[[id:9a9076c8-7698-47b9-9cd3-c8b9e06d6694][gh_cli]]

** grep

[[id:1ffb126f-a7aa-4d26-a4d1-a7bfa8085abe][grep]]

** jq

[[id:a23966d2-0e34-4ebd-8a66-5d40c2ce6a43][jq]] is the awk/sed/grep tool for working with JSON files.

** most

An alternative Pager, install it on your system and you can test it with ~PAGER=most man ls~. If you want to make this
permanent you can add the following to ~/.bashrc~ / ~/.zshrc~

#+begin_src bash
  if command -v most > /dev/null 2>&1; then
    export PAGER="most"
  fi
#+end_src

** parallel

Bash has its own tool for parallel processing courtesy of [[https://www.gnu.org/software/parallel/][parallel]]. As with many parallelisation processes you need to
define a function that performs the single task you wish to undertake and the pass it a list of parameters to process.

An example script I've written is the following which converts FLAC files to MP3 in parallel

#+INCLUDE: "~/dotfiles/bin/flac2mp3" example sh

The key points are...

1. All FLAC files within the specified directory are located using ~find~.

#+begin_src sh
FILES=$(find "${INPUT_DIR}" -type f -name "*.flac")
#+end_src

2. A function ~_convert~ is defined and exported that takes a single argument (in this case a FLAC file path) and
   converts it to MPÂ£ using ~ffmpeg~

#+begin_src sh
_convert()
{
    echo "Converting file ${1}"
    ffmpeg -hide_banner -loglevel panic -i "${1}" -ab "${2}" -map_metadata 0 -id3v2_version 3 "${1}".mp3
}
export -f _convert
#+end_src

3. The list of files is then pipped into the ~parallel~ command that is called with the ~_convert~ function.

#+begin_src sh
echo "${FILES}" | parallel -q -j ${JOBS} _convert {} $BITRATE
#+end_src

** thefuck

[[https://github.com/nvbn/thefuck][thefuck]] is a tool for correcting your command line mistakes.

** xarg

[[id:48c0d280-8330-4f65-a5da-098ea186c6b6][xarg]] is a wonderful and simple tool for repeating actions on lists of objects.

** wgetpaste

[[id:dddcb716-b68c-4c94-b75c-167451208cf8][wgetpaste]] is a utility for pasting output to pastebins that is really neat.

* Aliases

You can, and should, use aliases anywhere you can.  Typically you'd set them in ~\~/.bash_aliases~.

#+begin_src bash
alias grep='grep --colour=auto'
alias l='ls -lha'
alias shutup='su -c "shutdown -h now"'
#+end_src

If you want to run a command that is aliased without the alias options such as ~grep~ in the above then you have a
couple of options.

#+begin_src bash
\grep
'grep' -n something *.R
#+end_src

* History

Having a history of what you have used in a shell is invaluable, you can search it for commands you have used in the
past. Under Bash this is saved in ~~/.bash_history~. It would be really neat to be able to share history between
systems. The tool [[id:f74f50d3-9d99-4082-8733-84f139fddea1][Atuin]] is invaluable for this.

* Links

** ~PS1~ Customisation
+ [[https://bashrcgenerator.com/][.bashrc generator: create your .bashrc PS1 with a drag and drop interface]]
+ [[https://stackoverflow.com/questions/4133904/ps1-line-with-git-current-branch-and-colors][command prompt - PS1 line with Git current branch and colors - Stack Overflow]]

** Shell Commands
+ [[https://explainshell.com/][Explain Shell]]

** Tools

+ [[https://docs.atuin.sh/][Atuin]] - context and (encrypted) synchronisation for your shell history.
+ [[https://diffy.org/][Diffy - share diff output in your browser]]

** Data Science at the Command Line

+ [[https://jeroenjanssens.com/dsatcl/][Data Science at the Command Line, 2e]]
+ [[https://opensource.com/article/20/11/machine-learning-bash][Create a machine learning model with Bash | Opensource.com]]

** Books

+ [[https://pressbooks.senecacollege.ca/uli101/][Developers Ultimate Guide : Linux Bash Scripting]]
