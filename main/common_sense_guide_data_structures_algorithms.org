:PROPERTIES:
:ID:       c006a2dc-166b-44c7-9473-6eb8ef6e7ec8
:mtime:    20230503072925 20230423214547 20230423204459
:ctime:    20230423204459
:END:
#+TITLE: A Common Sense Guide to Data Structures and Algorithms
#+FILETAGS: :data:algorithms:programming:efficiency:

I purchased [[https://pragprog.com/titles/jwdsal2/a-common-sense-guide-to-data-structures-and-algorithms-second-edition/][A Common-Sense Guide to Data Structures and Algorithms, Second Edition]] by Jay Wengrow from the excellent
publishers [[https://pragprog.com/][The Pragmatic Bookshelf]] with a view to improving my understanding of data structures and the algorithms I
write. There are various exercises throughout the book these are my solutions to them (in [[id:5b5d1562-ecb4-4199-b530-e7993723e112][Python]] and perhaps [[id:de9a18a7-b4ef-4a9f-ac99-68f3c76488e5][R]]) along
with notes I've made whilst reading.

* 01 Why Data Structures Matter
** Exercise
*** For an array containing 100 elements, provide the number of steps the following operations would take:
**** a. Reading
1 - just need to know the start.
**** b. Searching for a value not contained within the array
100 - have to search all elements to ensure its not there.
**** c. Insertion at the beginning of the array
101 - shift all elements right-wards then insert at the start.
**** d. Insertion at the end of the array
1 - just adding one to the end.
**** e. Deletion at the beginning of the array
100 - delete and shift remaining elements left.
**** f. Deletion at the end of the array
1 just cut off the last element
*** For an array-based set containing 100 elements, provide the number of steps the following operations would take:
**** a. Reading
1 - just need to know the start.
**** b. Searching for a value not contained within the array
100 - have to search all elements to ensure its not there.
**** c. Insertion of a new value at the beginning of the set
201 - Full search of the set (100) to ensure new value not there, then shift everything right (100) before inserting
(1).
**** d. Insertion of a new value at the end of the set
101 - Full search of the set (100) to ensure new value not there, then insert (1).
**** e. Deletion at the beginning of the set
100
**** f. Deletion at the end of the set
1
*** Normally the search operation in an array looks for the first instance of a given value.
But sometimes we may want to look for every instance of a given value. For example, say we want to count how many times
the value “apple” is found inside an array. How many steps would it take to find all the “apples”? Give your answer in
terms of N.
N
* 02 Why Algorithms Matter
** Exercises
*** 1. How many steps would it take to perform a linear search for the number 8 in the ordered array, [2, 4, 6, 8, 10, 12, 13]?

4 - Straight search of 4 steps.

*** 2. How many steps would binary search take for the previous example?

5 - Split in half (1) and we get the match (luckily!)

*** 3. What is the maximum number of steps it would take to perform a binary search on an array of size 100,000?

Calculate as the maximum number of divisions by 2 to give zero remainder, which is roughly 16.

* 03 O Yes! Big O Notation
** Exercises
*** 1. Use Big O Notation to describe the time complexity of the following function that determines whether a given year is a leap year:

#+begin_src
function isLeapYear(year) {
    return (year % 100 === 0) ? (year % 400 === 0) : (year % 4 === 0);
}
#+end_src

*** 2. Use Big O Notation to describe the time complexity of the following function that sums up all the numbers from a given array:

#+begin_src
function arraySum(array) {
    let sum = 0;
    for(let i = 0; i < array.length; i++) {
        sum += array[i];
    }
    return sum;
}
#+end_src

*** 3. The following function is based on the age-old analogy used to describe the power of compounding interest:
Imagine you have a chessboard and put a single grain of rice on one square. On the second square, you put 2 grains of
rice, since that is double the amount of rice on the previous square. On the third square, you put 4 grains. On the
fourth square, you put 8 grains, and on the fifth square, you put 16 grains, and so on. The following function
calculates which square you’ll need to place a certain number of rice grains. For example, for 16 grains, the function
will return 5, since you will place the 16 grains on the fifth square. Use Big O Notation to describe the time
complexity of this function, which is below:

#+begin_src
function chessboardSpace(numberOfGrains) {
    let chessboardSpaces = 1;
    let placedGrains = 1;
    while (placedGrains < numberOfGrains) {
        placedGrains *= 2;
        chessboardSpaces += 1;
    }
    return chessboardSpaces;
}
#+end_src
4. The following function accepts an array of strings and returns a new array
that only contains the strings that start with the character "a". Use Big O
Notation to describe the time complexity of the function:

#+begin_src
function selectAStrings(array) {
    let newArray = [];
    for(let i = 0; i < array.length; i++) {
        if (array[i].startsWith("a")) {
            newArray.push(array[i]);
        }
    }
    return newArray;
}
#+end_src
*** 5. The following function calculates the median from an ordered array. Describe its time complexity in terms of Big O Notation:

#+begin_src
function median(array) {
    const middle = Math.floor(array.length / 2);
    // If array has even amount of numbers:
    if (array.length % 2 === 0) {
        return (array[middle - 1] + array[middle]) / 2;
    } else { // If array has odd amount of numbers:
        return array[middle];
    }
}
#+end_src

* 04 Speeding Up Your Code with Big O
** Exercises
*** 1. Replace the question marks in the following table to describe how many steps occur for a given number of data elements across various types of Big O:
| NElements | O(N) | O(log N) | O(N2) |
|-----------+------+----------+-------|
|       100 | 100  | ?        | ?     |
|      2000 | ?    | ?        | ?     |

*** 2. If we have an O(N2) algorithm that processes an array and find that it takes 256 steps, what is the size of the array?
*** 3. Use Big O Notation to describe the time complexity of the following function. It finds the greatest product of any pair of two numbers within a given array:

#+begin_src
def greatestProduct(array):
    greatestProductSoFar = array[0] * array[1]
    for i, iVal in enumerate(array):
        for j, jVal in enumerate(array):
            if i != j and iVal * jVal > greatestProductSoFar:
                greatestProductSoFar = iVal * jVal
return greatestProductSoFar
#+end_src

*** 4. The following function finds the greatest single number within an array, but has an efficiency of O(N2). Rewrite the function so that it becomes a speedy O(N):

#+begin_src
def greatestNumber(array):
    for i in array:
    # Assume for now that i is the greatest:
    isIValTheGreatest = True
        for j in array:
        # If we find another value that is greater than i,
        # i is not the greatest:
        if j > i:
        isIValTheGreatest = False
    # If, by the time we checked all the other numbers, i
    # is still the greatest, it means that i is the greatest number:
    if isIValTheGreatest:
        return i
#+end_src

* 05 Optimising Code with and without Big O
** Exercises
*** 1. Use Big O Notation to describe the time complexity of an algorithm that takes 4N + 16 steps.
*** 2. Use Big O Notation to describe the time complexity of an algorithm that takes 2N2.
*** 3. Use Big O Notation to describe the time complexity of the following function, which returns the sum of all numbers of an array after the numbers have been doubled:

#+begin_src
def double_then_sum(array)
    doubled_array = []
    array.each do |number|
        doubled_array << number *= 2
    end
    sum = 0
    doubled_array.each do |number|
        sum += number
    end
    return sum
end

#+end_src
*** 4. Use Big O Notation to describe the time complexity of the following function, which accepts an array of strings and prints each string in multiple cases:
#+begin_src
def multiple_cases(array)
    array.each do |string|
        puts string.upcase
        puts string.downcase
        puts string.capitalize
    end
end
#+end_src

*** 5. The next function iterates over an array of numbers, and for each number whose index is even, it prints the sum of that number plus every number in the array. What is this function’s efficiency in terms of Big O Notation?
#+begin_src
def every_other(array)
    array.each_with_index do |number, index|
        if index.even?
            array.each do |other_number|
                puts number + other_number
            end
        end
    end
end
#+end_src

* 06 Optimising to for Optimistic Scenarios
** Exercises
*** 1. Use Big O Notation to describe the efficiency of an algorithm that takes 3N2 + 2N + 1 steps.
*** 2. Use Big O Notation to describe the efficiency of an algorithm that takes N + log N steps.
*** 3. The following function checks whether an array of numbers contains a pair of two numbers that add up to 10.

#+begin_src
function twoSum(array) {
    for (let i = 0; i < array.length; i++) {
        for (let j = 0; j < array.length; j++) {
            if (i !== j && array[i] + array[j] === 10) {
                return true;
            }
        }
    }
    return false;
}
#+end_src

What are the best-, average-, and worst-case scenarios? Then, express the worst-case scenario in terms of Big O
Notation.

*** 4. The following function returns whether or not a capital “X” is present within a string.

#+begin_src
function containsX(string) {
    foundX = false;
    for(let i = 0; i < string.length; i++) {
        if (string[i] === "X") {
            foundX = true;
        }
    }
    return foundX;
}
#+end_src

What is this function’s time complexity in terms of Big O Notation? Then, modify the code to improve the algorithm’s
efficiency for best- and average-case scenarios.
* 07 Big O in Everyday Code
** Exercises
*** 1. Use Big O Notation to describe the time complexity of the following function. The function returns true if the array is a “100-Sum Array,” and false if it is not.
A “100-Sum Array” meets the following criteria:
• Its first and last numbers add up to 100.
• Its second and second-to-last numbers add up to 100.
• Its third and third-to-last numbers add up to 100, and so on.
Here is the function:

#+begin_src
def one_hundred_sum?(array)
    left_index = 0
    right_index = array.length - 1
    while left_index < array.length / 2
        if array[left_index] + array[right_index] != 100
            return false
        end
    left_index += 1
    right_index -= 1
    end
    return true
end
#+end_src

*** 2. Use Big O Notation to describe the time complexity of the following function. It merges two sorted arrays together to create a new sorted array containing all the values from both arrays:
#+begin_src
def merge(array_1, array_2)
    new_array = []
    array_1_pointer = 0
    array_2_pointer = 0
    # Run the loop until we've reached end of both arrays:
    while array_1_pointer < array_1.length ||
        array_2_pointer < array_2.length
    # If we already reached the end of the first array,
    # add item from second array:
        if !array_1[array_1_pointer]
            new_array << array_2[array_2_pointer]
            array_2_pointer += 1
    # If we already reached the end of the second array,
    # add item from first array:
        elsif !array_2[array_2_pointer]
            new_array << array_1[array_1_pointer]
            array_1_pointer += 1
    # If the current number in first array is less than current
    # number in second array, add from first array:
        elsif array_1[array_1_pointer] < array_2[array_2_pointer]
            new_array << array_1[array_1_pointer]
            array_1_pointer += 1
    # If the current number in second array is less than or equal
    # to current number in first array, add from second array:
        else
            new_array << array_2[array_2_pointer]
            array_2_pointer += 1
        end
    end
    return new_array
end
#+end_src

*** 3. Use Big O Notation to describe the time complexity of the following function. This function solves a famous problem known as “finding a needle in the haystack.”

Both the needle and haystack are strings. For example, if the needle is "def" and the haystack is "abcdefghi", the
needle is contained somewhere in the haystack, as "def" is a substring of "abcdefghi". However, if the needle is "dd",
it cannot be found in the haystack of "abcdefghi". This function returns true or false, depending on whether the needle
can be found in the haystack:

#+begin_src
def find_needle(needle, haystack)
    needle_index = 0
    haystack_index = 0
    while haystack_index < haystack.length
        if needle[needle_index] == haystack[haystack_index]
            found_needle = true
            while needle_index < needle.length
                if needle[needle_index] != haystack[haystack_index + needle_index]
                    found_needle = false
                    break
                end
                needle_index += 1
            end
            return true if found_needle
            needle_index = 0
        end
        haystack_index += 1
    end
    return false
end
#+end_src

*** 4. Use Big O Notation to describe the time complexity of the following function. This function finds the greatest product of three numbers from a given array:
#+begin_src
def largest_product(array)
    largest_product_so_far = array[0] * array[1] * array[2]
    i = 0
    while i < array.length
        j = i + 1
        while j < array.length
            k = j + 1
            while k < array.length
                if array[i] * array[j] * array[k] > largest_product_so_far
                largest_product_so_far = array[i] * array[j] * array[k]
            end
            k += 1
        end
        j += 1
    end
    i += 1
    end
    return largest_product_so_far
end
#+end_src

*** 5. I once saw a joke aimed at HR people: “Want to immediately eliminate the unluckiest people from your hiring process? Just take half of the resumes on your desk and throw them in the trash.”

If we were to write software that kept reducing a pile of resumes until we had one left, it might take the approach of
alternating between throwing out the top half and the bottom half. That is, it will first eliminate the top half of the
pile, and then proceed to eliminate the bottom half of what remains. It keeps alternating between eliminating the top
and bottom until one lucky resume remains, and that’s who we’ll hire!

Describe the efficiency of this function in terms of Big O:
#+begin_src
def pick_resume(resumes)
    eliminate = "top"
    while resumes.length > 1
        if eliminate == "top"
            resumes = resumes[resumes.length / 2, resumes.length - 1]
            eliminate = "bottom"
        elsif eliminate == "bottom"
            resumes = resumes[0, resumes.length / 2]
            eliminate = "top"
        end
    end
    return resumes[0]
end
#+end_src

* 08 Blazing Fast Lookup Tables
** Exercises
* 09 Crafting Elegant Code with Stacks and Queues
** Exercises
* 10 Recursively Recurse with Recursion
** Exercises
* 11 Learning to Write in Recursive
** Exercises
* 12 Dynamic Programming
** Exercises
* 13 Recursive Algorithms for Speed
** Exercises
* 14 Node-Based Data Structures
** Exercises
* 15 Speeding Up All Things with Binary Search Trees
** Exercises
* 16 Keeping Your Priorities Straight with Heaps
** Exercises
* 17 It Doesn't Hurt to Trie
** Exercises
* 18 Connecting Everything with Graphs
** Exercises
* 19 Dealing With Space Constraints
** Exercises
* 20 Techniques for Code Optimisation
** Exercises
