:PROPERTIES:
:ID:       ce08bd82-0146-49cb-8a64-048ffe7210f2
:mtime:    20250928195946 20250528194258 20250527131216 20250512091228 20250414184409 20250224215214 20250124124540 20250102163117 20241227171141 20241216105142 20240510223935 20240417110830 20240317085317 20240315224355 20231231085314 20231210095348 20231126223255 20231126212041 20231126191413 20230504101907 20230103103313 20221229210308
:ctime:    20221229210308
:END:
#+TITLE: GnuPG
#+FILETAGS: :security:gpg:linux:yubikey:

GnuPG is a beast, it allows you to encrypt keys, sign commits in [[id:0859ef9e-834d-4e84-8e67-fa7593a61e0b][Git]] and more, its available for [[id:0e6300c6-7025-4f45-820d-4d9da82b41a6][Linux]], OSX and Windows.

A supposedly simpler alternative that I'm yet to explore is [[id:ee9d2bb3-1758-4ca7-b056-7d059ff2a3f5][Sequoia-PGP]]

* Key Management

Keys expire if a date is set, its ok not to have an expiry date for private keys (although its still recommended) but
its wise to set expiry dates for the public parts.

** Creating Keys

The following steps creates a master private key using ED25519 elliptic curve to sign, certify and authenticate.

#+begin_src
gpg2 --full-gen-key --expert
Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
   (7) DSA (set your own capabilities)
   (8) RSA (set your own capabilities)
   (9) ECC and ECC
  (10) ECC (sign only)
  (11) ECC (set your own capabilities)
  (13) Existing key
Your selection? 11
Possible actions for a ECDSA/EdDSA key: Sign Certify Authenticate
Current allowed actions: Sign Certify

   (S) Toggle the sign capability
   (A) Toggle the authenticate capability
   (Q) Finished
Your selection? Q

Please select which elliptic curve you want:
   (1) Curve 25519
   (3) NIST P-256
   (4) NIST P-384
   (5) NIST P-521
   (6) Brainpool P-256
   (7) Brainpool P-384
   (8) Brainpool P-512
   (9) secp256k1
Your selection? 1

Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years
Key is valid for? (0) 0
Key does not expire at all
Is this correct? (y/N) y
GnuPG needs to construct a user ID to identify your key.

Real name: John Doe
Email address: jdoe@protonmail.com
Comment:
You selected this USER-ID:
    "John Doe <jdoe@protonmail.com>"

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o
We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy.
gpg: key 0xC0A72D42633AADE1 marked as ultimately trusted
gpg: revocation certificate stored as '/home/amnesia/.gnupg/openpgp-revocs.d/C6425A1EDA82B023A90E382CC0A36B11781DEFF4.rev'
public and secret key created and signed.

pub   ed25519/0xC0A72D42633AADE1 2020-04-27 [C] [expires: 2070-04-15]
      Key fingerprint = C524 6A0A DE20 E283 A90E  382C C0A3 6B17 811F FED4
uid                              John Doe <jdoe@protonmail.com>
#+end_src

*** Encryption Key

We then create a sub-key for Encryption using Curve 25519, ideally you should set an expiration date for this.

#+begin_src bash
:~$ gpg --expert --edit-key 0xC0A72D42633AADE1
gpg (GnuPG) 2.2.12; Copyright (C) 2018 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.

gpg> addkey
Please select what kind of key you want:
   (3) DSA (sign only)
   (4) RSA (sign only)
   (5) Elgamal (encrypt only)
   (6) RSA (encrypt only)
  (10) ECC (sign only)
  (11) ECC (set your own capabilities)
  (12) ECC (encrypt only)
  (14) Existing key from car
Your selection? 12

Please select which elliptic curve you want:
   (1) Curve 22519 *default*
   (4) NIST P-384
   (6) Brainpool P-256
Your selection? 1

Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years
Key is valid for? (0) 0
Key does not expire at all
Is this correct? (y/N) y
Really create? y
<PROMPTED FOR PASSWORD>
#+end_src

*** Signing Key

Next we create a sub-key for Signing using Curve 25519, ideally you should set an expiration date for this.

#+begin_src bash
:~$ gpg --expert --edit-key 0xC0A72D42633AADE1
gpg (GnuPG) 2.2.12; Copyright (C) 2018 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.

gpg> addkey
Please select what kind of key you want:
   (3) DSA (sign only)
   (4) RSA (sign only)
   (5) Elgamal (encrypt only)
   (6) RSA (encrypt only)
  (10) ECC (sign only)
  (11) ECC (set your own capabilities)
  (12) ECC (encrypt only)
  (14) Existing key from car
Your selection? 10
Please select which elliptic curve you want:
   (1) Curve 22519 *default*
   (4) NIST P-384
   (6) Brainpool P-256
Your selection? 1
Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years
Key is valid for? (0) 0
Key does not expire at all
Is this correct? (y/N) y
Really create? y
<PROMPTED FOR PASSWORD>
#+end_src

*** Authentication Key

Finally we add a sub-key for Authentication using Curve 25519, again ideally you should set an expiration date for this.

#+begin_src bash
:~$ gpg --expert --edit-key 0xC0A72D42633AADE1
gpg (GnuPG) 2.2.12; Copyright (C) 2018 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.

gpg> addkey
Please select what kind of key you want:
   (3) DSA (sign only)
   (4) RSA (sign only)
   (5) Elgamal (encrypt only)
   (6) RSA (encrypt only)
  (10) ECC (sign only)
  (11) ECC (set your own capabilities)
  (12) ECC (encrypt only)
  (14) Existing key from car
Your selection? 11

Possible actions for this ECC key: Sign Authenticate
Current allowed actions: Sign

   (S) Toggle the sign capability
   (A) Toggle the authentication capability
   (Q) Finished

Your Selection: S

Possible actions for this ECC key: Sign Authenticate
Current allowed actions: Sign

   (S) Toggle the sign capability
   (A) Toggle the authentication capability
   (Q) Finished

Your Selection: A


Possible actions for this ECC key: Sign Authenticate
Current allowed actions: Authenticate

   (S) Toggle the sign capability
   (A) Toggle the authentication capability
   (Q) Finished

Your Selection: !

Please select which elliptic curve you want:
   (1) Curve 22519 *default*
   (4) NIST P-384
   (6) Brainpool P-256
   Your selection? 1

Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years
Key is valid for? (0) 0
Key does not expire at all
Is this correct? (y/N) y
Really create? y
<PROMPTED FOR PASSWORD>
#+end_src

** Deleting Keys

Deleting keys is straight-forward, if you have a secret key that needs deleting first.

#+begin_src bash
$ gpg2 --delete-secret-keys <KEY-ID>
$ gpg2 --delete-keys <KEY-ID>
#+end_src

** Exporting Keys


** Making public keys available

To effectively use GnuPG keys you need to share the public component so that others can use it to encrypt files they are
sending to you (only you will be able to decrypt it as your private key is something only you own).

The instructions on [[https://keys.openpgp.org/about/usage][openpgp.org]] are very clear, to make your key findable based on email address you should...

#+begin_src bash
  gpg --export your@email.net | curl -T - https://keys.openpgp.org
#+end_src

Once this is done you should visit the URL that is shown and click on the link to verify the email address, check your
inbox and then you have verified your email address.

** Copying to new systems

If you have an SSH connection available the simplest method is to ~rsync~ your ~\~/.gnupg~ directory to the new computer
and update the ownership recursively.

From your current system (assuming you have alias' setup in your [[id:ae1e9b97-feb0-4f1a-b804-b89edaf5a790][SSH]] configuration)...

#+begin_src
cd ~/.gnupg target_computer:~/.
#+end_src

On the ~target_computer~ then

#+begin_src
chown -R $USER:$USER ~/.gnupg/
#+end_src

If you don't have a secure connection you will have to look at using the ~--export~ and ~--export-secret-keys~ to
securely transfer them to a new system.

*** Android

Getting your keys on [[id:2c46e54a-d704-4e7e-bca3-d8c3e042ab43][Android]] to use can also present some challenges.

* GPG Forwarding over SSH

The ability to forward your GPG keys over SSH makes working on remote systems seamless. This has been supported as of
OpenSSH 6.7 and GnuPG >= 2.1.1. There is [[https://wiki.gnupg.org/AgentForwarding][official documentation]] on how to do this and I found a [[https://superuser.com/questions/161973/how-can-i-forward-a-gpg-key-via-ssh-agent][thread]] and [[https://blog.alt255.com/post/gpg_forwarding/][blog post]]
useful.

** GPG Configuration

On the **local** machine (that you SSH /from/) you need to know the location of ~agent-extra-socket~, this can be found
with the following...

#+begin_src
gpgconf --list-dir agent-extra-socket
#+end_src

On the **remote** machine (that you SSH /to/) you need to know the location of ~agent-socket~, this can be found in a
similar manner...

#+begin_src
gpgconf --list-dir agent-socket
#+end_src

Armed with this information you can now configure SSH.

** SSH Configuration

Add this information to your ~~/.ssh/config~ in the format shown below...

#+begin_src
Host gpgtunnel
  HostName server.domain
  RemoteForward <socket_on_remote_box> <extra_socket_on_local_box>
#+end_src

If I want to connect to ~kimura~  where ~agent-extra-socket~ is ~/run/user/1000/gnupg/S.gpg-agent-extra~ to ~crow~ where
~agent-socket~ is ~/run/user/1001/gnupg/S.gpg-agent~ I added the last line shown below.

#+begin_src
Host crow
     HostName 192.168.10.201
     Port 9876
     User user1
     IdentityFile ~/.ssh/id_ed25519
     ForwardAgent yes
     RemoteForward /run/user/1001/gnupg/S.gpg-agent /run/user/1000/gnupg/S.gpg-agent.extra
#+end_src

As mentioned should, if you have access to ~root~ add ~StreamLocalBindUnlink yes~ to ~/etc/ssh/sshd_config~ as this
removes stale sockets and with the correct ~RemoteForward~ entry use of GnuPG is seamless. Without it you have to first
remove the socket on the remote. How you do this will depend on your operating system for [[id:44b32b4e-1bef-49eb-b53c-86d9129cb29a][Gentoo]] and [[id:a53fa3c5-f091-4715-a1a4-a94071407abf][Arch]] Linux you can
edit ~/etc/ssh/sshd_config~ directly. If you're on [[id:c345f901-5a1f-4868-b8bf-bc352554ee58][NixOS]] you need to add it to via ~services.openssh.extraConfig~ since
it is not an explicitly defined configuration option.

* Yubikey and OpenPGP

[[https://support.yubico.com/hc/en-us/articles/360013790259-Using-Your-YubiKey-with-OpenPGP][Using Your YubiKey with OpenPGP – Yubico]] is the official documentation and worth reading in detail first, and then
again. Another very useful article is the [[https://docs.yubikey.wiki/v/gpg/import-to-yubikey/with-commandline][Yubikey Wiki - Commandline]]


** Changing PIN and Admin PIN

The default PIN (~123456~) and Admin PIN (~12345678~) can be edited using ~gpg2 --card-edit~. Once started enter ~admin~
and you can use the following commands to set the PIN, Admin PIN, Name, Gender

#+begin_src
gpg --card-edit

gpg/card> admin
Admin commands are allowed

gpg/card> passwd
gpg: OpenPGP card no. D2760001240103040006136798170000 detected

1 - change PIN
2 - unblock PIN
3 - change Admin PIN
4 - set the Reset Code
Q - quit

...
gpg/card> name
Cardholder's surname: Last
Cardholder's given name: First

gpg/card> sex
Salutation (M = Mr., F = Ms., or space): M/F

gpg/card> lang
Language preferences: gb

gpg/card> list
#+end_src

*** Sending Keys to Servers

Having your public key on a server means others can use it to encrypt and send you files.  Add ~standard-resolver~ as
the first line of ~\~/.gnupg/dirmngr.conf~~, kill the manager and then upload with the following.

#+begin_src bash
  gpgcong --kill dirmngr
gpg --keyserver hkps://keys.openpgp.org --send-keys <KEY_ID>
#+end_src

If successful you will receive an email at the email address associated with your key which contains instructions no how
to make the email address public.


** Import keys to Yubikey

The following are the steps described at [[https://support.yubico.com/hc/en-us/articles/360013790259-Using-Your-YubiKey-with-OpenPGP][Using Your YubiKey with OpenPGP – Yubico]] under /To import the key on your
Yubikey/. It moves both the Signature and Authentication keys to the Yubikey. After inserting your Yubikey go through
the following.

You can select which key you wish to move to card using ~key #~, select and move each of the subkeys in turn moving them
to your card and then ~save~. Note however that ~save~ removes the keys from your local system, you should make a backup
of them elsewhere _before_ doing this.

I'll repeat that...

**MAKE A BACKUP OF YOUR KEYS BEFORE DOING THIS, IT WILL REMOVE THEM FROM YOUR LOCAL SYSTEM**

#+begin_src bash
  gpg2 --edit-key <key-id>

  gpg> key 1

  gpg> keytocard
  Really move the primary key? (y/N) y
  Please select
     (1) Signature key
     (3) Authentication key
  Your selection? 1

  gpg> key 2
  gpg> keytocard
  Please select
     (2) Encryption key

  gpg> key 3
  Please select
     (3) Authenticaion key
#+end_src


* Pass the Standard UNIX Password Manager

[[https://www.passwordstore.org][~pass~]] is an excellent password manager that works on GNU/Linux and OSX systems (and can be setup to work on Windows
too). It encrypts passwords to the ~\~.password-store/~ directory in a hierarchical structure that reflects the site and
username that is stored. You can include more than just a single password in each file that holds information and all
files are encrypted with GnuPG to ensure they can only be viewed by you.

** Setup

** Changing Keys

At some point you may update your GnuPG key, for example it might have expired or you choose to use a more secure
algorithm such as Elliptic Curve, in which case you will have regenerated a new GnuPG key but you will have to update
the passwords saved by pass to use this new key. As explained [[https://superuser.com/a/1662151][here]] and in the [[https://git.zx2c4.com/password-store/about/][man pages]], when you ~pass init~ a
directory...

#+begin_quote
 If the specified gpg-id is different from the key used in any existing files, these files will be reencrypted to use
 the new id.
#+end_quote

It is recommended you make a backup of your existing directory /before/ changing things, that way you can easily
restore.

#+begin_src bash
cp -r ~/.password-store/ ~/.password-store-$(date +%Y%m%d)
#+end_src

You can then use id of your new key to encode the directory.

#+begin_src bash
  cd ~/.password-store/
  pass init
#+end_src

* OpenKeyChain

[[https://www.openkeychain.org/faq/][OpenKeychain]] is an Android application for working with GPG keys on mobile.

** Importing Keys

To import your key you must first export your private key and encrypt it with a strong one time password and /securely/
copy it to your mobile device. The [[https://www.openkeychain.org/faq/#what-is-the-best-way-to-transfer-my-own-key-to-openkeychain][the instructions]] are very clear, you have to choose a secure way of transferring the
file to your mobile device. I have done this over sFTP on my home network or by sending an email to myself using
ProtonMail which by default also encrypts peer-to-peer emails.

Once you've got the private key on your phone start OpenKeyChain and select to "Import Key", open the file and enter the
one time password that you created.




* Signing Git Commits

You need to configure [[id:3c905838-8de4-4bb6-9171-98c1332456be][Git]] to use the key you want to sign with which should be both secure and if you have subkeys
should have a signing element.

You can find these out using.

#+begin_src bash
gpg -K --keyid-format SHORT
src

If you have subkeys the signing one will be deonted with ~[S]~ at the end (after the creation date). You can use the
short code (after the type e.g. ~ed25519/########~) to then set your global signing key with...

#+begin_src bash
git config --global user.signingKey ########
#+end_src

You can then enable signing on a per-repository basis from within a repository with.

#+begin_src bash
git config --local commit.gpgsign true
#+end_src

This adds the following to ~./git/config~

#+begin_src
[commit]
    gpgsign = true
#+end_src

If you want to always sign all commits you can enable this globally which adds the same entry to ~\~/.gitconfig~.

#+begin_src bash
git config --global commit.gpgsign true
#+end_src

For more on signing Git commits see [[id:beef0eda-374a-4ea0-9894-967850fbe0ce][Git Signing]]

* Tips and Tricks

** Encrypt all files in a directory

[[https://skybert.net/unix/encrypt-all-files-in-dir-using-gpg/][Encrypt all files in dir using GPG | skybert.net]]

* Links

+ [[https://rgoulter.com/blog/posts/programming/2022-06-10-a-visual-explanation-of-gpg-subkeys.html][A Visual Explanation of GPG Subkeys - Richard Goulter's Blog]]

** Setup/Configuration

+ [[https://www.digitalneanderthal.com/post/gpg/][Generate GPG Keys With Curve Ed25519 | Digital Neanderthal]]
+ [[https://www.nayab.dev/opensource/tools/pgp-guide.html][A Developer's Guide to PGP Keys - Create, Use, Back Up, and Restore | Nayab Sayed]]

** Documentation

+ [[https://openpgp.foo/][Introduction | OpenPGP.foo]]
+ [[https://openpgp.dev/book/index.html][OpenPGP for application developers — OpenPGP for application developers]]

** Yubkiey

+ [[https://docs.yubikey.wiki/v/gpg/import-to-yubikey/with-commandline][Yubikey Wiki - Commandline]]
+ [[https://github.com/drduh/YubiKey-Guide][drduh/YubiKey-Guide: Guide to using YubiKey for GPG and SSH]]

** Apps

+ [[https://docs.passwordstore.app/][Android Password Store Documentation | Android Password Store Documentation]]

** Expiring/Updating Keys

+ [[https://kevin.gimbel.dev/blog/2024/04/oh-no-my-gpg-key-expired-like-every-year/][Oh no my gpg key expired (like every year) - Kevin.Gimbel.Dev/Blog]]

** Misc

+ [[https://proton.me/blog/openpgp-golang][Introducing GopenPGP, an open source encryption library for native applications | Proton]]
+ [[https://www.quantamagazine.org/how-public-key-cryptography-really-works-20241115/][How Public Key Cryptography Really Works | Quanta Magazine]]
+ [[https://anarc.at/blog/2020-03-17-git-gpg-verification/][How can I trust this git repository? - anarcat]]
