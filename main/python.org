:PROPERTIES:
:ID:       5b5d1562-ecb4-4199-b530-e7993723e112
:mtime:    20240111095218 20231231094423 20231203135526 20231128102207 20231116235015 20231105150910 20231105073358 20231103170452 20231024144239 20231002122344 20230920154939 20230915180115 20230911192604 20230623214025 20230616161729 20230526200945 20230520211006 20230319231255 20230224095542 20230223120221 20230222142114 20230125155804 20230124164157 20230105135432 20230103175234 20230103103310 20221217185215 20230103103308
:ctime:    20221217185215 20230103103308
:END:
#+TITLE: Python
#+DATE: [2022-02-13 Sun 20:49]
#+FILETAGS: :python:programming:statistics:

[[https://www.python.org][Python]] is a general interpreted programming language. Its been around a while and is very mature, you should by all
accounts be using Python > 3.7 although you may encounter situations where Python 2.* is still in use, even though its
end-of-life was [[https://endoflife.date/python][2010-07-03]]. There are of course lots of [[id:73be660e-298f-4ccb-900c-215b86b3f4d5][Tips and Tricks]].

* Topics

+ [[id:e4ba385c-7a04-4135-a469-167e73912f4c][Python I/O]]
+ [[id:4bf1c297-d00a-4857-9339-8017c27138c6][Virtual Environments]]
+ [[id:3f19e1ef-e5c4-45f1-822f-8d4d834acdbd][Typing]]
+ [[id:3cca0dfd-0c82-4685-b9ed-6314f7c8b78f][Pytest]]
+ [[id:5182239f-bd72-4889-b00e-fde6672efb8a][Debugging]]
+ Packages
  + MatplotLib
  + [[id:d7b0fb90-d668-4e31-bc2d-305f6ee14fc9][Numpy]]
  + Pandas
  + SciPy
  + [[id:d9176707-8c60-4557-a181-7780d3215cbe][Python Pickle]]
  + [[id:c3712eee-d30f-4dd4-b894-4721d094edd1][Jupyter Notebooks]]
+ Frameworks
  + [[id:0739c563-409c-48ce-b84b-eb4cecdbeb47][Toolz]]

* Linting

Linting is the process of following a specific coding style. This has many advantages in that it makes the code easier
to read and understand and can remove duplication. For Python the original guide is [[https://peps.python.org/pep-0008/][PEP 8 – Style Guide for Python Code]]
and there are various extensions such as [[https://www.python.org/dev/peps/pep-0484/][PEP 484 - Type Hints]] which expect type annotations to be applied. It can be
challenging to remember all of the rules though and so there are linters which work with your Integrated Development
Environment (IDE) to refactor your code on the fly applying the rules when saving a file so that code is consistently
structured before it goes out to peer-review.

+ [[https://pylint.org/][Pylint - code analysis for Python]]
+ [[https://flake8.pycqa.org/en/latest/][Flake8: Your Tool For Style Guide Enforcement]]
+ [[http://mypy-lang.org/][mypy - Optional Static Typing for Python]]
+ [[https://black.readthedocs.io/en/stable/][Black - the uncomprimising code formatter]]


You can also use the "AI" [[https://sourcery.ai/][Sourcery]] to "/Automatically Improve Python Code Quality/". For more on linting see [[id:55581960-395e-443c-bd5d-bc00c496b6ae][Linting]].

* Typing

Python is a "/dynamically typed language/" and this doesn't mean, as I first thought when I heard the term (having no
background in Computer Science!), that you type it interactively (that is the "/REPL/"!), rather it means that an object
can be of a given "type" (~string~, ~int~, ~float~, class types etc.) and this is determined at run-time and can change
on the fly.

Read more about [[id:3f19e1ef-e5c4-45f1-822f-8d4d834acdbd][Python Typing]].

* Testing

Testing is something I came across late in my programming adventure, but it is really something that should be learnt or
taught from the beginning as it has huge benefits as you progress through developing your code. It is so useful there is
even a popular paradigm of [[https://en.wikipedia.org/wiki/Test-driven_development][Test-driven development]] whereby tests are written /before/ any code is written.

In Python there is the built-in [[https://docs.python.org/3/library/unittest.html][unittest — Unit testing framework]] but a more popular one is [[id:3cca0dfd-0c82-4685-b9ed-6314f7c8b78f][Pytest]]

* Debugging


* Project Management

[[https://hatch.pypa.io/latest/][Hatch]] is a modern, extensible Python project manager that standardises the build system, eases publishing to PyPI and
helps with environment and version management.

* Packaging
:PROPERTIES:
:mtime:    20221217185215 20230103103309
:ctime:    20221217185215 20230103103309
:END:

At some point you are likely to want to create a package out of your code, read more on that at [[id:bb57f65e-58f4-45de-9620-901dc998f6d6][Python Packaging]].

* Data Structures
:PROPERTIES:
:ID:       8da3c4d1-e3ef-40ec-b2bd-1d5685c8fa51
:mtime:    20231103170452 20230103103314 20221217185215
:ctime:    20221217185215
:END:

** Strings
Pretty common data structure, read more about them [[id:507782d4-01ee-441f-b3e5-e6fe8f0980ad][Python Strings]]

** Numbers
:PROPERTIES:
:ID:       868ba2d6-b2ad-4f0f-9ad5-e8eeda4f7c5e
:END:
** Lists
:PROPERTIES:
:ID:       9eaeb648-e835-4b6b-8540-0ebfec2ba48d
:END:
** Dictionaries
:PROPERTIES:
:ID:       6bb3fd5e-63e3-43de-aecc-7c840f6d9819
:mtime:    20221217185215 20230103103312
:ctime:    20221217185215
:END:

Dictionaries can be pretty printed using the ~json.dumps()~ method.

#+BEGIN_SRC python :eval no
  import json
  sample_dict = {"z": 5, "a": [0, 1, 2], "m": {"e": 3902, "f": 3204}}
  print(json.dumps(sample_dict, indent=4, sort_keys=True))
#+END_SRC

** Tuples
:PROPERTIES:
:ID:       508c31b8-cbea-4b69-b134-e9ab50691e8e
:END:
** Sets
:PROPERTIES:
:ID:       13fb7bc5-0226-4071-b03b-08ca01fba5f0
:mtime:    20230103103308 20221217185215
:ctime:    20221217185215
:END:


* Decorators
:PROPERTIES:
:ID:       eb1027f2-0e37-4e60-9c41-d27de3e01243
:mtime:    20230222142114 20230105135432 20230103103313 20221217185215
:ctime:    20221217185215
:END:
Decorators are really useful, they save you time and effort by handling a lot of functionality that would take time to
write yourself. As you might expect there are a lot of decorators out there, for example [[id:3cca0dfd-0c82-4685-b9ed-6314f7c8b78f][Python Pytest]] has a bunch of
its own which make using certain functionality in writing tests simple.

Read more on different decorators at [[id:7303cb84-7406-43ed-81d0-bbd3c4961faa][python_decorators]]

* Debugging

Debugging is really useful, up your game by following [[https://www.youtube.com/watch?v=YKkyfz4cU8g][this example]].

* I/O
:PROPERTIES:
:ID:       c821f0a2-07d8-4713-907d-d4916b998fdc
:mtime:    20221217185215
:ctime:    20221217185215
:END:
Reading and writing data and files is fairly key to many things you will wish to do.

* Inherithance
:PROPERTIES:
:ID:       a74a48ce-a5a5-4368-8301-f1d965527993
:END:

* Logging
Logging is essential for reporting to users on the progress of their work. Read more on [[id:345cadc2-52a5-4c91-8de1-a45a98aaa5a8][logging]].

* Parallelisation

Python has a host of functionality for parallelisation. Read more on [[id:077cb9b0-a54e-45b0-abdf-1b8a5bb63aa9][Python Parallel Programming]].

* Typing and Validation
:PROPERTIES:
:ID:       e42e7d26-345d-4bab-ba48-473ac26f5161
:mtime:    20230520211006
:ctime:    20230520211006
:END:
Whilst Python is a dynamically typed language, which means that the type of [[id:8da3c4d1-e3ef-40ec-b2bd-1d5685c8fa51][data structure]] is determined on the fly when
running code, the typing of arguments and their subsequent validation can be invaluable. This is achieved by adding [[https://docs.python.org/3/library/typing.html][type
hints]] to your code, typically whenever a new variable is defined, whether that is in the main body of code or in a
function/method definition. For the later it is also sensible to add a type hint as to the type of object(s) that are
returned.  The consistency of type hints can be checked using [[http://mypy-lang.org/][mypy]] and input can be validated on the fly by using
[[id:ba02ecdf-c35f-4deb-8308-28341922c096][pydantic]].

I found [[https://kobzol.github.io/rust/python/2023/05/20/writing-python-like-its-rust.html][Writing Python like its Rust]] a really insightful read and will be endeavour to use this as well as pydantic in
future work.

* Iterators and Generators

There is more to Python ~for~ loops than meets the eye because they actually use ~iterators~ all over the place. A good
article detailing all this is [[https://opensource.com/article/18/3/loop-better-deeper-look-iteration-python][Loop better: A deeper look at iteration in Python | Opensource.com]].
* Profiling

[[id:dd7c615f-cd8b-426d-aec0-cfd3803437cc][Python profiling]] can be leveraged to find where the bottlenecks are in your workflow and where things can be sped up.

* Specific Topics

+ [[id:bb57f65e-58f4-45de-9620-901dc998f6d6][Packaging]]
+ [[id:4ca15b37-1436-45fc-8a81-7f1f03b0ee64][Useful Python Packages]].
+ [[id:7318aee8-c864-40cb-9462-4ce36ac56d35][Documentation]].
+ [[id:ec8e7ee9-0316-4de2-98c1-f775c20b0e35][Data Analysis and Visualisation]]
+ [[id:6938ec86-03df-48df-9491-118c14834aae][Image Analysis]]
+ [[id:bed915ef-acc7-474b-9074-744a6c0f8b43][Network Analysis]]

* Community

I'm yet to come across anything like the [[id:e7011db4-16fc-4cde-bb81-4d172cb0db14][R community]] but many Python users are enthusiastic and happy to share their
code and wisdom, whether that is via [[https://www.reddit.com/r/python][/r/python]] or other places.

* Links
+ [[https://www.python.org][Python]]
+ [[https://docs.python.org/3/][Official Documentation (3.10.3)]]
+ [[https://www.pythonmorsels.com/terms/][Python Terminology - Python Morsels]]

** Learning Resources

+ [[https://www.pythonmorsels.com/][Python Morsels -- Write better Python code]]
+ [[https://github.com/satwikkansal/wtfpython][What the f*ck Python?]]
+ [[https://aeturrell.github.io/python4DS/welcome.html][Python for Data Science]]

*** Real Python

Really good set of resources

+ [[https://realpython.com/][Python Tutorials]]

*** Design Patterns

+ [[https://realpython.com/inheritance-composition-python/][Inheritance and Composition: A Python OOP Guide]]
+ [[https://realpython.com/python-super/][Supercharge Your Classes with Python super()]]
+ [[https://realpython.com/factory-method-python/][The Factory Method Pattern and its Implementation in Python]]
+ [[https://python-patterns.guide/][Python Design Patterns]]

*** Misc

+ [[https://benhoyt.com/writings/python-api-design/][Designing Pythonic library APIs]]
+ [[https://opensource.com/article/18/3/loop-better-deeper-look-iteration-python][Loop better: A deeper look at iteration in Python]]

** GUI

+ [[https://pyapp-kit.github.io/magicgui/][magicgui]]

** Miscellaneous

+ [[https://pythonspeed.com/performance/][Speed up your code]]
+ [[https://pythonspeed.com/articles/json-memory-streaming/][Processing large JSON files in Python without running out of memory]]
+ [[https://posit.co/blog/top-python-package-picks/][Python made easy with Posit]]

** Podcasts

A good podcast is [[https://talkpython.fm/episodes/all][TalkPython]]

+ [[https://talkpython.fm/episodes/show/429/taming-flaky-tests][Taming Flaky Tests]]

** GUIs

+ [[https://nicegui.io/][NiceGUI]]
