:PROPERTIES:
:ID:       5b5d1562-ecb4-4199-b530-e7993723e112
:END:
#+TITLE: Python
#+DATE: [2022-02-13 Sun 20:49]
#+FILETAGS: :python:programming:statistics:

[[https://www.python.org][Python]] is a general interpreted programming language.

* Linting

Linting is the process of following a specific coding style. This has many advantages in that it makes the code easier
to read and understand. For Python the original guide is [[https://peps.python.org/pep-0008/][PEP 8 â€“ Style Guide for Python Code]] and there are various
extensions such as [[https://www.python.org/dev/peps/pep-0484/][PEP 484 - Type Hints]] which expect type annotations to be applied. It can be challenging to
remember all of the rules though and so there are linters which work with your Integrated Development Environment (IDE)
to refactor your code on the fly applying the rules when saving a file so that code is consistently structured before it
goes out to peer-review.

+ [[https://pylint.org/][Pylint - code analysis for Python]]
+ [[https://flake8.pycqa.org/en/latest/][Flake8: Your Tool For Style Guide Enforcement]]
+ [[http://mypy-lang.org/][mypy - Optional Static Typing for Python]]
+ [[https://black.readthedocs.io/en/stable/][Black - the uncomprimising code formatter]]


You can also "AI" to lint your code using services such as [[https://sourcery.ai/][Sourcery]] to "/Automatically Improve Python Code Quality/".

* Testing
:PROPERTIES:
:ID:       8f921470-1ed4-4f20-8520-5f8274f0bc3d
:END:

Testing is something I came across late in my programming adventure, but it is really something that should be learnt or
taught from the beginning as it has huge benefits as you progress through developing your code. It is so useful there is
even a popular paradigm of [[https://en.wikipedia.org/wiki/Test-driven_development][Test-driven development]] whereby tests are written /before/ any code is written.

** Pytest
:PROPERTIES:
:ID:       2acf0dff-79d6-417e-8f5c-5bd4e386fc22
:END:

[[https://docs.pytest.org/en/7.0.x/][pytest: helps you write better programs]] as its web-page states helps you write better programs.

Often when writing tests early on you might expect them to fail, you can use the ~@pytest.mark.xfail~ fixture to mark a
test as "expect to fail" and ~pytest~ will not halt and instead carry on with the rest of the tests.

*** Documentation Tests

I came across an article advocating [[https://simonwillison.net/2018/Jul/28/documentation-unit-tests/][Documentation unit tests]] and showing one approach to testing documentation.

* Data Structures
:PROPERTIES:
:ID:       8da3c4d1-e3ef-40ec-b2bd-1d5685c8fa51
:END:

** Strings
:PROPERTIES:
:ID:       21faef08-02b9-4a88-9db5-87e40a5d524a
:END:
** Numbers
:PROPERTIES:
:ID:       868ba2d6-b2ad-4f0f-9ad5-e8eeda4f7c5e
:END:
** Lists
:PROPERTIES:
:ID:       9eaeb648-e835-4b6b-8540-0ebfec2ba48d
:END:
** Dictionaries
:PROPERTIES:
:ID:       6bb3fd5e-63e3-43de-aecc-7c840f6d9819
:END:
** Tuples
:PROPERTIES:
:ID:       508c31b8-cbea-4b69-b134-e9ab50691e8e
:END:
** Sets
:PROPERTIES:
:ID:       13fb7bc5-0226-4071-b03b-08ca01fba5f0
:END:
** Types
:PROPERTIES:
:ID:       0325ed22-c17e-4c30-a8c6-bee38a2a74cc
:END:
Python is "dynamically typed" which for some time I thought meant you just type it out, but that is not the case. The
term means you do not /have/ to declare whether something is a string, integer, float, list and so forth up-front,
rather the type of an object is determined dynamically. This has some advantages, but it is also worth being explicit
about the types of data functions are expected to accept in order to avoid problems.
* I/O
:PROPERTIES:
:ID:       c821f0a2-07d8-4713-907d-d4916b998fdc
:END:
Reading and writing data and files is fairly key to many things you will wish to do.

* Inherithance
:PROPERTIES:
:ID:       a74a48ce-a5a5-4368-8301-f1d965527993
:END:
* Logging
:PROPERTIES:
:ID:       345cadc2-52a5-4c91-8de1-a45a98aaa5a8
:END:

* Parallelisation
:PROPERTIES:
:ID:       024c41bd-500b-4362-bd4e-fe27f00e6bdb
:END:


* Typing and Validation
:PROPERTIES:
:ID:       e42e7d26-345d-4bab-ba48-473ac26f5161
:END:
Whilst Python is a dynamically typed language, which means that the type of [[id:8da3c4d1-e3ef-40ec-b2bd-1d5685c8fa51][data structure]] is determined on the fly when
running code, the typing of arguments and their subsequent validation can be invaluable. Basic typing can be achieved by
using typehints and checked using mypy. Validation can be extended using [[id:ba02ecdf-c35f-4deb-8308-28341922c096][pydantic]]

* Data Analysis and Visualisation
:PROPERTIES:
:ID:       48ab38bc-4166-4a90-9b1e-214ae6f636ef
:END:
** Data Analysis
:PROPERTIES:
:ID:       f7c491f4-c557-4a68-916a-4e883a15e8ac
:END:
*** Pandas
:PROPERTIES:
:ID:       28963f75-6411-4e1b-b4d3-1d7e7510052c
:END:
*** Scikit-Learn
*** Statsmodels
** Visualisation
:PROPERTIES:
:ID:       4dc223eb-96f0-4188-a4a0-c5f86e5d89ba
:END:
*** Matplotlib
:PROPERTIES:
:ID:       43350ae9-bbef-487f-8661-1336974ffecd
:END:
*** Seaborn
:PROPERTIES:
:ID:       5f252cfd-fe8e-421f-9a51-958aed5da794
:END:
*** Plotnine
:PROPERTIES:
:ID:       1608b51b-a98e-4ffe-b157-c0ea959faeae
:END:
*** Holoviews
:PROPERTIES:
:ID:       a026ee5d-c965-4697-81e5-dc5153f6d8b3
:END:

* Community

I'm yet to come across anything like the [[id:e7011db4-16fc-4cde-bb81-4d172cb0db14][R community]]

* Links
+ [[https://www.python.org][Python]]


** Miscellaneous
+ [[https://pythonspeed.com/performance/][Speed up your code]]
+ [[https://pythonspeed.com/articles/json-memory-streaming/][Processing large JSON files in Python without running out of memory]]
