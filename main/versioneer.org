:PROPERTIES:
:ID:       32bdd209-92be-454e-9741-b1d453d1c0e2
:mtime:    20230312225956
:ctime:    20230312225956
:END:
* Versioneer
:PROPERTIES:
:CUSTOM_ID: versioneer
:END:

Enter [[https://github.com/python-versioneer/python-versioneer][versioneer]] which specifically sets out to handle this very problem.

#+BEGIN_QUOTE
This is a tool for managing a recorded version number in distutils/setuptools-based python projects. The goal is to
remove the tedious and error-prone "update the embedded version string" step from your release process. Making a new
release should be as easy as recording a new tag in your version-control system, and maybe making new tarballs.
#+END_QUOTE

The [[https://github.com/python-versioneer/python-versioneer/blob/master/INSTALL.md][installation instructions]] are concise and clear and should be easy to follow. Configuration is through a section in
~setup.cfg~ and typically the required style is ~pep440~ but it is worth being aware that ~versioneer~ produces versions
that indicates if you're branch ~HEAD~ is ahead of the last ~git tag~ that was applied and that these are not compliant
with [[https://peps.python.org/pep-0440/][PEP440]]. The side effect of this is that you will not be able to upload your package to [[https://pypi.org][PyPI]] either manually or via
a GitHub Action (more on this below). If you want to force PEP40 compliance then you should use ~style = pep440-pre~
which whilst indicating information about how far ahead of the last tag the current commit is still produces valid
PEP440 versions.

** Configure ~setup.cfg~/~pyproject.toml~

You need to add configuration to ~setup.cfg~ or ~pyproject.toml~. The ~versionfile_source~ /~versionfile_build~
directories are typically the package name if you have followed the structure suggested in the [previous
article](python-packages-3), but see the [[https://github.com/python-versioneer/python-versioneer/blob/master/INSTALL.md][versioneer documentation]] for further details. If your [[https://git-scm.com/book/en/v2/Git-Basics-Tagging][git tags]] contain a prefix
then you should include it. If your package unpacks to a specific directory then include it under ~parentdir_prefix~.

#+begin_src
[versioneer]
VCS = git
style = pep440
versionfile_source = <package_name>/_version.py
versionfile_build = <package_name>/_version.py
tag_prefix = v
parentdir_prefix =
#+end_src

#+begin_src
[tool.versioneer]
VCS = "git"
style = "pep440"
versionfile_source = "<package_name>/_version.py"
versionfile_build = "<package_name>/_version.py"
tag_prefix = ""
parentdir_prefix = ""
#+end_src

** Install

You can now install ~versioneer~ into your package, there are two options ~--vendor~ or ~--no-vendor~ to choose
between. Typically I would opt for ~--vendor~ as the non-vendored mode is experimental and requires additional
configuration options in ~pyproject.toml~ (see [[https://github.com/python-versioneer/python-versioneer/blob/master/INSTALL.md][versioneer documentation]] for further details).


#+begin_src bash :eval no
versioneer install --vendor
#+end_src

This will install files and stage them automatically, remember to stage your changes to ~setup.cfg~ / ~pyproject.toml~
before committing.

** Build

When it comes to building I found that the current version of [[https://pypa-build.readthedocs.io/en/latest/][build]] (0.8.0 as of writing) by default creates a virtual
environment to build the package under and this resulted in an error about ~versioneer~ not being installed (see [[https://github.com/python-versioneer/python-versioneer/issues/192][related
issue #192]], although I was using the default ~style = pep440~). My solution was to try using the ~--no-isolation~ (~-n~)
flag to build so that a virtual environment was not used.

#+BEGIN_SRC bash :eval no
  python -m build --no-isolation
  * Getting dependencies for sdist...

#+END_SRC

You should find your package builds and the resulting ~.tar.gz~ and ~.whl~ files include the version calculated by
~versioneer~ and that it will be based on the most recent tag. If your branch is ahead of the last tag then it will
include information on how far ahead it is.

** Excluding ~<package>/_version.py~

You may wish to exclude the ~<package>/_version.py~ from some of your linting if for example you are using
[[https://ns-rse.github.io/posts/pre-commit][pre-commit]].  At the command line you can exclude a file from being included in ~flake8~ analyses with
~--exclude=<patterns>~ and so at the command line you would.

#+CAPTION: ~flake8~ excluding ~_version.py~
#+BEGIN_SRC bash :eval no
flake8 --exclude=<package>/_version.py
#+END_SRC

If you are using ~pre-commit~ then you can exclude the ~_version.py~ file from different linting processes by modifying
the appropriate configuration files.

#+CAPTION: ~setup.cfg~ excluding ~_version.py~ from ~flake8~
#+BEGIN_SRC conf :eval no
[flake8]
max_line_length=120
docstring-convention=numpy
exclude =
    .git,
    __pycache__,
    docs/conf.py,
    build,
    dist,
    _version.py
#+END_SRC

#+CAPTION: ~.pylintrc~ excluding ~_version.py~ from ~pylint~
#+BEGIN_SRC conf :eval no
ignore=CVS,
       _version.py
#+END_SRC
