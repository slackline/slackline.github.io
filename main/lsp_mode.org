:PROPERTIES:
:ID:       04868965-8413-4d9d-8ecc-573570fec5b1
:END:
#+TITLE: LSP Mode
#+DATE: [2022-02-15 Tue 13:21]
#+FILETAGS: :emacs:programming:ide:

Emacs supports [[https://emacs-lsp.github.io/lsp-mode/][Language Server Protocol]] for a range of languages. This is a modularised way in which editors can be
turned into [[https://en.wikipedia.org/wiki/Integrated_development_environment][Integrated Development Environments (IDEs)]] where by code is automatically linted, functions options are
displayed whilst typing, variables can be renamed throughout who classes/packages and debugging is supported.

A multitude of [[https://emacs-lsp.github.io/lsp-mode/page/languages/][languages]] are supported under Emacs but the official documentation isn't always clear on how to setup and
configure these. Typically there are two components to setting up and configuring support for a given language.

1. The backend language server.
2. The Emacs lsp module to communicate with the backend.

* Bash

Support for Bash comes via the [[https://github.com/bash-lsp/bash-language-server][bash-language-server]], whilst support in Emacs is built-in to LSP-mode.

#+BEGIN_SRC bash
  npm install -g bash-language-server
#+END_SRC

To enable support ensure that you have a hook defined, at a bare minimum.

#+BEGIN_SRC elisp
  (use-package lsp-mode
    :commands lsp
    :hook
    (sh-mode . lsp))
#+END_SRC

* LaTeX

There are several options for [[id:e1c2cfef-1b43-47a8-a425-94e6ae58d917][LaTeX]] support, perhaps the most generic is provided by [[https://valentjn.github.io/ltex/index.html][LTeX]] which not only supports LaTeX
but also other languages such as [[id:0c371287-128d-4e46-8128-b2d4f5fc604c][Markdown]], [[id:169b9c5f-df34-46ab-b64f-8ee98946ee69][Org]], [[id:5b5d1562-ecb4-4199-b530-e7993723e112][Python]] reStructured Text, [[id:de9a18a7-b4ef-4a9f-ac99-68f3c76488e5][R]] Sweave and XHTML documents.

[[https://github.com/emacs-languagetool/lsp-ltex][lsp-ltex]] is the package to install to provide LTeX support via the Language Server Protocol, but you have to download
and install LTeX for instructions see [[https://valentjn.github.io/ltex/ltex-ls/installation.html][here]], but the package itself provides the command ~lsp-ltex-upgrade-ls~ and if the
LTeX server is not installed it will install it for you. You can configure ~lsp-ltex~ via ~use-package~ as shown below.

#+BEGIN_SRC elisp
  (use-package lsp-ltex
  :ensure t
  :hook (text-mode . (lambda ()
                       (require 'lsp-ltex)
                       (lsp))))
#+END_SRC
* Markdown

Support for Markdown was tricky to setup, the LSP Mode page points to a depricated ~unified-language-server~ instead
advising to use [[https://github.com/remarkjs/remark-language-server][remark-language-server]]. Installation is simple.

#+BEGIN_SRC bash
  npm install remark-language-server
#+END_SRC

Configuring Emacs LSP Mode to use this, less so and for the time being I've fallen back on just using the excellent
[[https://jblevins.org/projects/markdown-mode/][Markdown Mode for Emacs]].

* Python

There are multiple options available for [[id:5b5d1562-ecb4-4199-b530-e7993723e112][Python]] but because I'd used [[https://jedi.readthedocs.io/en/latest/][Jedi]], an autcompletion, static analysis and
refactoring library for Python, previously I opted for the [[https://github.com/pappasam/jedi-language-server][jedi-language-server]]. Under your default Virtual Environment
you need to install the language server.

#+BEGIN_SRC bash
  pip install -U jedi-language-server
#+END_SRC

In Emacs you need to install and configure [[https://github.com/fredcamps/lsp-jedi][lsp-jedi]].

#+BEGIN_SRC elisp
  (use-package lsp-jedi
  :ensure t
  :config
  (with-eval-after-load "lsp-mode"
    (add-to-list 'lsp-disabled-clients 'pyls)
    (add-to-list 'lsp-enabled-clients 'jedi)))
#+END_SRC

* Treemacs

* LSP UI

[[https://github.com/emacs-lsp/lsp-ui][LSP UI]] provides User Interface integration to LSP mode which means you can get fancy pop-ups showing you options for
different things. My configuration is below.

#+BEGIN_SRC elisp
  (use-package lsp-ui
  :ensure t
  :defer t
  :config
  (setq lsp-ui-doc-delay 1
	    lsp-ui-doc-enable t
	    lsp-ui-doc-header nil
        lsp-ui-doc-use-childframe t
        lsp-ui-doc-position 'top
        lsp-ui-doc-include-signature t
        lsp-ui-doc-use-childframe t
        lsp-ui-sideline-enable nil
        lsp-ui-flycheck-enable t
        lsp-ui-flycheck-list-position 'right
        lsp-ui-flycheck-live-reporting t
        lsp-ui-peek-enable t
        lsp-ui-peek-list-width 60
        lsp-ui-peek-peek-height 25
        lsp-ui-sideline-enable t
        lsp-ui-sideline-show-hover t
        lsp-ui-sideline-delay 3)
  :hook (lsp-mode . lsp-ui-mode)
  :bind (:map lsp-ui-mode-map
	          ("C-c i" . lsp-ui-imenu)))
#+END_SRC


* Full configuration

My current configuration for LSP mode can be found at [[https://gitlab.com/nshephard/emacs/-/blob/master/settings/lsp-settings.el][lsp-settings.el]]. The Python side of things is heavily based on that of [[ https://gitlab.com/nathanfurnal/dotemacs/-/snippets/2060535][Nathan
Furnal's Emacs Python Config]]. A copy of that is provided here for convenience but its a snap shot and things change so
check the source linked above for the most up-to-date.

#+BEGIN_SRC elisp
;; Provides workspaces with file browsing (tree file viewer)
;; and project management when coupled with `projectile`.
(use-package treemacs
  :ensure t
  :defer t
  :config
  (setq treemacs-no-png-images t
	  treemacs-width 24)
  :bind ("C-c t" . treemacs))


;; Provide LSP-mode for python, it requires a language server.
;; I use `lsp-pyright`. Know that you have to `M-x lsp-restart-workspace`
;; if you change the virtual environment in an open python buffer.
(use-package lsp-mode
  :ensure t
  :defer t
  :config
  (setq lsp-idle-delay 0.5
	lsp-enable-symbol-highlighting t)
  :commands (lsp lsp-deferred)
  :init (setq lsp-keymap-prefix "C-c l"
	      lsp-bash-highlight-parsing-errors t)
  :hook ((python-mode . lsp)
	     (bash-mode . lsp)
	     (dockerfile-mode . lsp)
	     (groovy-mode . lsp)
	     (html-mode . lsp)
	     (latex-mode . lsp)
	     ;; (markdown-mode . lsp)
	     (org-mode . lsp)
	     (R-mode . lsp)
	     (sh-mode . lsp)
         (terraform-mode . lsp)))

;; Provides completion, with the proper backend
;; it will provide Python completion.
(use-package company
  :ensure t
  :defer t
  :diminish
  :config
  (setq company-dabbrev-other-buffers t
        company-dabbrev-code-other-buffers t)
  :hook ((text-mode . company-mode)
         (prog-mode . company-mode)))

;; Provides visual help in the buffer
;; For example definitions on hover.
;; The `imenu` lets me browse definitions quickly.
;; https://github.com/emacs-lsp/lsp-ui
(use-package lsp-ui
  :ensure t
  :defer t
  :config
  (setq lsp-ui-doc-delay 1
	    lsp-ui-doc-enable t
	    lsp-ui-doc-header nil
        lsp-ui-doc-use-childframe t
        lsp-ui-doc-position 'top
        lsp-ui-doc-include-signature t
        lsp-ui-doc-use-childframe t
        lsp-ui-sideline-enable nil
        lsp-ui-flycheck-enable t
        lsp-ui-flycheck-list-position 'right
        lsp-ui-flycheck-live-reporting t
        lsp-ui-peek-enable t
        lsp-ui-peek-list-width 60
        lsp-ui-peek-peek-height 25
        lsp-ui-sideline-enable t
        lsp-ui-sideline-show-hover t
        lsp-ui-sideline-delay 3)
  :hook (lsp-mode . lsp-ui-mode)
  :bind (:map lsp-ui-mode-map
	          ("C-c i" . lsp-ui-imenu)))

;; LSP Treemacs
(use-package lsp-treemacs
  :ensure t
  :defer t
  :config
  (setq lsp-treemacs-sync-mode 1))

;; Integration with the debug server
(use-package dap-mode
  :ensure t
  :defer t
  :after lsp-mode
  :config
  (dap-auto-configure-mode))


;; Required to hide the modeline
(use-package hide-mode-line
  :ensure t
  :defer t)


;; Language servers
;; Read the docs for the different variables set in the config.
;; Python - pyright
(use-package lsp-pyright
  :ensure t
  :defer t
  :config
  (setq lsp-clients-python-library-directories '("/usr/" "~/miniconda3/pkgs"))
  (setq lsp-pyright-disable-language-service nil
	lsp-pyright-disable-organize-imports nil
	lsp-pyright-auto-import-completions t
	lsp-pyright-use-library-code-for-types t
	;; lsp-pyright-typeshed-paths
	;; lsp-pyright-diagnostic-mode
	lsp-pyright-typechecking-mode "basic"
	lsp-pyright-log-level 1
	;; lsp-pyright-auto-search-paths
	;; lsp-pyright-extra-paths
	lsp-pyright-venv-path "~/miniconda3/envs")
  :hook ((python-mode . (lambda ()
                          (require 'lsp-pyright) (lsp-deferred)))))

;; Python - Jedi
;; LSP Module : https://github.com/fredcamps/lsp-jedi
;; Server     : https://github.com/pappasam/jedi-language-server
(use-package lsp-jedi
  :ensure t
  :config
  (with-eval-after-load "lsp-mode"
    (add-to-list 'lsp-disabled-clients 'pyls)
    (add-to-list 'lsp-enabled-clients 'jedi)))

;; Python pyls
;; https://www.mattduck.com/lsp-python-getting-started.html

;; Python - Sourcery
;; https://github.com/sourcery-ai/sourcery/wiki/Emacs
(lsp-register-client
 (make-lsp-client :new-connection (lsp-stdio-connection '("sourcery" "lsp"))
                  :initialization-options '((token . "user_ajagq3NtzYEZHCChHXS1bXvaFFZpOb3f8AC666z0J_cCknj8OLZsDR31tK0")
                                            (extension_version . "emacs-lsp")
                                            (editor_version . "emacs"))
                  :activation-fn (lsp-activate-on "python")
                  :server-id 'sourcery
                  :add-on? t
                  :priority 2))
;; LTex
;; LSP Module : https://github.com/emacs-languagetool/lsp-ltex
;; Server     : https://valentjn.github.io/ltex/
(use-package lsp-ltex
  :ensure t
  :hook (text-mode . (lambda ()
                       (require 'lsp-ltex)
                       (lsp))))  ; or lsp-deferred
(use-package lsp-latex
  :ensure t
  :hook (text-mode . (lambda ()
                       (require 'lsp-latex)
                       (lsp))))
;; Julia
;; LSP Module : https://github.com/non-Jedi/lsp-julia
;; Server     :
(use-package lsp-julia
  :ensure t
  :config
  (setq lsp-julia-default-environment "~/.julia/environments/v1.5"))

;; Markdown
;; LSP Module : https://emacs-lsp.github.io/lsp-mode/page/lsp-markdown/
;; Server     : https://github.com/remarkjs/remark-language-server

;; Bash
;; https://github.com/bash-lsp/bash-language-server

;; R
;; https://emacs-lsp.github.io/lsp-mode/page/lsp-r/
#+END_SRC


* Links
+ [[https://emacs-lsp.github.io/lsp-mode/][LSP Mode - Language Server Protocol support for Emacs]]

** Language Servers
+ [[https://github.com/bash-lsp/bash-language-server][bash-language-server]]
+ [[https://valentjn.github.io/ltex/index.html][LTeX]]
+ [[https://github.com/pappasam/jedi-language-server][jedi-language-server]]
+ [[https://github.com/remarkjs/remark-language-server][remark-language-server]]

** LSP Mode Modules
+ [[https://github.com/fredcamps/lsp-jedi][lsp-jedi]]
+ [[https://github.com/non-Jedi/lsp-julia][lsp-julia]]
