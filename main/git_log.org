:PROPERTIES:
:ID:       0b6eddb6-eb5c-4f26-aaea-beed3505f195
:mtime:    20240224205636 20240205164459 20231115133528
:ctime:    20231115133528
:END:
#+TITLE: Git Log
#+FILETAGS: :git:log:history:search:regex:

* Git Short Log

A simple way to get the list of contributors is to

#+begin_src sh
  git shortlog -s -n -e
#+end_src

It can also be used to summarise contributions by combining with come command [[id:9c6257dc-cbef-4291-8369-b3dc6c173cf2][command line utilities]]. The following
formats commits by date (~YYYY-MM~), ~sorts~ them and then counts the number of ~uniq~ observations (from [[https://github.blog/2022-12-12-highlights-from-git-2-39/][here]]).

#+begin_src sh
  git log v2.38.0.. --date='format:%Y-%m' --format='%cd' | sort | uniq -c
#+end_src

* Evolution of code

You can list the evolution of classes or functions using ~git log -L :<function>:path/to/file.py~ ([[https://mastodon.social/@chmouel@fosstodon.org/111278958440113991][source]]) and it will
show a series of commits that have changed the function. Very neat.

* Searching for specific lines

You can search for a specific piece of text across the history of a given file ([[https://stackoverflow.com/questions/12591247/how-to-find-commit-when-line-was-deleted-removed][reference]]). If you don't know the file
that contained the line omit the

#+begin_src bash
git log -c -S'missingtext' [/path/to/file]
#+end_src

If you don't know where the files is you can use

#+begin_src bash
git log -c -S'missingtext' --source --all
#+end_src

* Find commit

** First commit

Find the first commit of the current branch using the following. Typically this will _always_ be the first commit on the
~main~/~master~) branch since a branch is the complete history of references upto the current ~HEAD~.

#+begin_src bash
  git log `git rev-list --max-parents=0 HEAD`
#+end_src

* Visualisation

There are, as noted above, a bunch of ways in changing the output of your code. [[id:a1b78518-31e8-4fd3-a36f-d8f152832138][ZSH]] has a number of built-in aliases for
how the log output should look but there are other tools available for visualising Git logs/graphs that are somewhat
easier on the eye.

** [[https://github.com/mlange-42/git-graph][~git-graph~]]

Written in [[id:3469c33e-7c61-46c7-b01e-655695f3b93c][Rust]] (like so many of the cool things these days) it produces very nice graphs.

** [[https://github.com/mlange-42/git-igitt][~git-igitt~]]

An extension of ~git-graph~ that is interactive.
