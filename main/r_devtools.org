:PROPERTIES:
:ID:       42c647ba-d166-4309-a0e4-8d28c3506d3d
:mtime:    20250521155010 20250521133236
:ctime:    20250521133236
:END:
#+TITLE: R devtools
#+FILETAGS: :r:packaging:development:

~devtools~ along with [[id:74019262-2ecd-4123-9089-33bae72d55de][usethis]] and [[id:91d9f0e3-1511-4f89-a6a1-6ec33e84c698][Roxygen2]] make package development a little bit less painful.

The [[https://devtools.r-lib.org/][devtools]] package should be your starting point for package development and has a bunch of useful functions for
initialising and working with packages.

To create a package use ~devtools::create_package()~, you can then activate [[id:0859ef9e-834d-4e84-8e67-fa7593a61e0b][Git]] for the repository using
~usethis::use_git()~, connect to [[id:52b4db29-ba21-4a8a-9b83-6e9a8dc02f41][GitHub]] using ~usethis::use_github()~ and set up automated package checks with
~usethis::use_github_action()~ or if you are using [[id:7cbd61f2-d6a5-4e67-af72-2a13a5e86faa][GitLab]] you can ~use_gitlab_ci()~. Creation of a package sets up the
basic structure, not all of the files/directories below are created automatically though, but are included as they
should be used/developed.

#+begin_src
DESCRIPTION
NAMESPACE
NEWS.md
README.Rmd
R/
tests/
man/
vignettes/
data/
tests/
#+end_src

** ~DESCRIPTION~ file

This is a file containing important meta-data about your package, it includes various fields such as package name,
title, version, URL, BugReports URL, authors (and allows inclusion of authors [[https://orcid.org/][ORCiD]]), a description, the license, and
importantly the imports that are required for the package to work.

** ~NAMESPACE~ file

This file /isn't/ created automatically on package creation but will be generated by [[https://roxygen2.r-lib.org/][roxygen2]] for you.

** ~man/~ directory

This directory holds documentation files. Some of it will be generated automatically from the documentation strings
written for functions and there are ~pre-commit~ hooks that ensure these are always kept up-to-date.

** ~vignettes/~ directory

Vignettes are short form (or longer) articles describing how to use the package.

** GitHub Actions

There are helper functions to add [[id:e19b6eb6-46b2-440a-ba35-be29feb33407][GitHub Actions]] to your repository.

*** ~use_github_action()~

Invoking ~use_github_action()~ within your package repository will prompt you for the type of action you wish to add to
it. There are, as of writing, three options.

#+begin_src
> use_github_action()
Which action do you want to add? (0 to exit)
(See <https://github.com/r-lib/actions/tree/v2/examples> for other options)

1: check-standard: Run `R CMD check` on Linux, macOS, and Windows
2: test-coverage: Compute test coverage and report to https://about.codecov.io
3: pr-commands: Add /document and /style commands for pull requests
#+end_src

Selecting one will write a file to ~/.github/workflows/<FILENAME>.yaml~ and then print out code to add a badge to your
repository.

#+begin_src
Selection: 1
✔ Adding '*.html' to '.github/.gitignore'
✔ Creating '.github/workflows/'
✔ Saving 'r-lib/actions/examples/check-standard.yaml@v2' to '.github/workflows/R-CMD-check.yaml'
• Learn more at <https://github.com/r-lib/actions/blob/v2/examples/README.md>.
• Copy and paste the following lines into 'README.Rmd':
  <!-- badges: start -->
  [![R-CMD-check](https://github.com/CUREd-Plus/cuRed/actions/workflows/R-CMD-check.yaml/badge.svg)](https://github.com/CUREd-Plus/cuRed/actions/workflows/R-CMD-check.yaml)
  <!-- badges: end -->
  [Copied to clipboard]
#+end_src


* Workflow

You need to load your packages functions and classes into memory this is done using ~devtools::load_all()~, however
before doing so you should check that the package "works" by using ~devtools::check()~ as errors in say the [[id:91d9f0e3-1511-4f89-a6a1-6ec33e84c698][Roxygen2]]
docstring can prevent a function from being included.

* Links

+ [[https://devtools.r-lib.org/][Tools to Make Developing R Packages Easier • devtools]]
