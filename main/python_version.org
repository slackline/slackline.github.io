:PROPERTIES:
:ID:       1fe19d13-aa30-48ae-a765-5f96c0b03484
:mtime:    20251031203622 20250808162948 20250730233018
:ctime:    20250730233018
:END:
#+TITLE: Python Versioning
#+FILETAGS: :python:versioning:


[[https://packaging.pypa.io/en/stable/version.html][Version Handling]] is fairly important and when you have highly complex [[https://packaging.python.org/en/latest/specifications/version-specifiers/][version specifiers]] the task becomes
challenging. But the ~packaging.version~ module is there to help.

* ~packaging.version~

The standard library (maybe, might be an add-on?) has the [[https://packaging.pypa.io/en/stable/version.html][~packaging.version~]] module which helps with handling the
extended [[https://packaging.python.org/en/latest/specifications/version-specifiers/][version specification]].

** ~parse()~

Of particular use is the [[https://packaging.pypa.io/en/stable/version.html#packaging.version.parse][~parse()~]] function which is the best approach to comparing versions.

#+NAME: parse
#+BEGIN_SRC python :tangle no
from packaging.version import parse as parse_version
if parse_version(__version__) <= parse_version("1.2.0-rc1"):
    print("We are Old!")
#+END_SRC

* Links

+ [[https://packaging.pypa.io/en/stable/version.html][Version Handling - Packaging]]
+ [[https://adamj.eu/tech/2025/07/30/python-check-package-version-importlib-metadata-version/][Python: check a package version with importlib.metadata.version() - Adam Johnson]]
+ [[https://github.com/hmallen/numpyencoder/pull/8#pullrequestreview-2909627932][Using parse_version to compare versions]]
