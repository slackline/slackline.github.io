:PROPERTIES:
:ID:       7318aee8-c864-40cb-9462-4ce36ac56d35
:END:
#+TITLE: Python Documentation
#+DATE: [2022-02-13 Sun 20:49]
#+FILETAGS: :python:programming:documentation:

* Docstrings

You should write docstrings for every module, class, method and function that you write. The original specification for
docstring conventions is [[https://peps.python.org/pep-0257/][PEP 257]]. Personally I find restructured text docstrings cumbersome and dense to read so prefer
[[https://numpydoc.readthedocs.io/en/latest/format.html][Numpydoc]] docstrings.

** IDE plugins

Many IDEs have plugins that aid with writing docstrings. Since I use [[id:754f25a5-3429-4504-8a17-4efea1568eba][Emacs]] I use [[https://github.com/douglasdavis/numpydoc.el][numpydoc.el]] to /Insert NumPy style
docstrings in Python functions./ It makes life considerably less painful as it saves a lot of typing.

* Sphinx
** Setup

The first step to generating your documentation via [[https://www.sphinx-doc.org/en/master/][Sphinx]] is to..

** Configuration

There are three key files to configuring Sphinx documentation for your project, ~index.rst~, ~docs/conf.py~ and
~docs/Makefile~.

*** ~index.rst~

This is equivalent and indeed is the basis of ~index.html~ on a web-site, its the first page that readers see when
viewing the documentation as HTML and is a "landing page". As we are using

#+BEGIN_SRC rst :eval no
  Welcome to some package's documentation!
  =====================================

  .. toctree::
      :maxdepth: 1
      :caption: Getting Started

      introduction
      installation
      usage
      contributing
      copying

  .. toctree::
     :maxdepth: 2
     :caption: API


  Indices and tables
  ==================

  * :ref:`genindex`
  * :ref:`modindex`
  * :ref:`search`

#+END_SRC

*** ~conf.py~

#+BEGIN_SRC python :eval no
  import os
import sys

import sphinx_rtd_theme

sys.path.insert(0, os.path.abspath(".."))

# Mock imports (things that can't be installed at do building time)

autodoc_mock_imports = ["numpy", "pandas", "matplotlib", "scipy"]

# -- Project information -----------------------------------------------------

project = "pgFinder"
copyright = "2022, pgFinder authors"
author = "pgFinder authors"

# The short X.Y version
version = ""
# The full version, including alpha/beta/rc tags
release = "0.0.1"


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.viewcode",
    "sphinx.ext.githubpages",
    "sphinx.ext.coverage",
    "sphinx.ext.napoleon",
    "sphinx.ext.numpydoc",
    "sphinx_rtd_theme",
    "myst_parser",
    "sphinx_markdown_tables",
    "sphinxcontrib.mermaid",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = {".rst": "restructuredtext", ".txt": "restructuredtext", ".md": "markdown"}

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# html_theme = 'sphinx_rtd_theme'
# html_theme = "haiku"
# html_theme = "renku"
html_theme = "pydata_sphinx_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {
    "show_nav_level": 2,
    "favicons": [
        {
            "rel": "icon",
            "sizes": "156x20",
            "href": "https://github.com/<organisation>/<project>/actions/workflows/ci-tests.yml/badge.svg",
        },
        {
            "rel": "icon",
            "sizes": "115x20",
            "href": "https://codecov.io/gh/<organisation>/<project>",
        },
    ],
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = [""]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "pgFinderdoc"


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, "pgFinder.tex", "pgFinder Documentation", [author], "manual"),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "pgFinder", "PgFinder Documentation", [author], 1)]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, "PgFinder", "PgFinder Documentation", author, "PgFinder", "Peptidoglycan Finder.", "Miscellaneous"),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ["search.html"]


# -- Extension configuration -------------------------------------------------

#+END_SRC

*** ~Makefile~

#+BEGIN_SRC makefile :eval no
  # Minimal makefile for Sphinx documentation
        #

        # You can set these variables from the command line, and also
        # from the environment for the first two.
        SPHINXOPTS     ?=
        SPHINXBUILD    ?= sphinx-build
        SOURCEDIR      = ./
        BUILDDIR       = _build
        SPHINXAPIBUILD ?= sphinx-apidoc

        # Put it first so that "make" without argument is like "make help".
        help:
        @$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)

        .PHONY: help Makefile

        # Catch-all target: route all unknown targets to Sphinx using the new
        # "make mode" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).
        %: Makefile
        @$(SPHINXAPIBUILD) -o "$(SOURCEDIR)" "../" --separate
        @$(SPHINXBUILD) -M $@ "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
#+END_SRC

** Autodoc

** Themes

There are many themes available, a good place to start is the [[https://sphinx-themes.org/][Sphinx Themes Gallery]], although not included there is  [[https://pydata-sphinx-theme.readthedocs.io/en/stable/index.html][The
PyData Sphinx Theme]].

* ReadTheDocs

You will invariably require somewhere to host your site, and this can be done for free (although consider making a
donation) using [[https://readthedocs.org/][Read the Docs]].

** Automated Deployment

Documentation can be deployed to ReadTheDocs automatically as part of your Git Workflow or GitLab CI.

*** Git Workflow

*** GitLab CI

* Links

** Docstrings
+ [[https://peps.python.org/pep-0257/][PEP 257]]
+ [[https://numpydoc.readthedocs.io/en/latest/format.html][Numpydoc]]

** Themes

+ [[https://sphinx-themes.org/][Sphinx Themes Gallery]]
+ [[https://pydata-sphinx-theme.readthedocs.io/en/stable/index.html][The PyData Sphinx Theme]]
