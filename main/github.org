:PROPERTIES:
:ID:       52b4db29-ba21-4a8a-9b83-6e9a8dc02f41
:mtime:    20230103103310 20221211233405
:ctime:    20221211233405
:END:
#+TITLE: GitHub
#+DATE: <2022-05-24 Tue 22:07>
#+FILETAGS: :git:programming:documentation:version control:github:

[[https://github.com][GitHub]] is an online service for sharing and collaborating on your [[id:3c905838-8de4-4bb6-9171-98c1332456be][Git]] version controlled projects. It is not the only
"forge" as such repositories are sometimes known that is available as there are other services available such as [[id:7cbd61f2-d6a5-4e67-af72-2a13a5e86faa][gitlab]]


* Configuration

** Adding SSH Keys

** GPG Keys


* GitHub Pages

* GitHub Actions

GitHub Actions allow you to perform Continuous Integration (CI)/Continuous Development (CD) actions, triggering certain
workflows and events based on pushes, commits, pulls, approvals and merges.

** Building Sphinx Documentation

A useful action if you have a Python project with documentation built and configured using [[https://www.sphinx-doc.org/][Sphinx]] is to have the
documentation built automatically by GitHub. An action for this is provided by [[https://github.com/marketplace/actions/sphinx-docs-to-github-pages][action-sphinx-docs-to-gh-pages]]. Save this
to your ~.github/workflows/~ directory (you can call it what you like but as always something descriptive is useful
e.g. ~sphinx_docx_to_gh_pages.yaml~). You will also need to create a ~devtools/conda-env/docs_env.yml~ file which
defines the Conda repository that is to be used for installing various Sphinx packages you are using. I found
~conda-forge~ didn't include all the packages I required and so I modified the ~run:~ section of the main YAML
configuration to install all required packages directly from PyPi using ~pip~.  When first setting things up you will
want to set the ~branch:~ in the main YAML configuration to reflect that on which you are doing the development so the
action is triggered on the branch and you can view the results. Stage, commit and push the two files and you should be
able to find the build being made by going to the commits page on the branch you are working on, initially there is a
yellow dot next to the commit you've just pushed which you can click on to see the actions being run.

When complete this creates a new branch called ~gh-pages~ which contains all of the HTML documentation that has been
created by Sphinx. You now need to configure your repository to use [[https://pages.github.com/][GitHub Pages]]. Go to ~Settings > Pages~ and select
the ~gh-pages~ branch and select the ~root~ directory and then ~Save~. You will get a link to the pages appear just
above these options. You can click on this and it may take a little while to build the pages but the will appear.

** Publishing to PyPI

It is possible to use a GitHub Action to automate [[id:5e1f167e-5c0c-4206-b2ac-6694e08524d8][publishing to PyPI from GitHub]].

* GitHub Blog

GitHub has an active blog and many of the articles are worth reading. I keep links to those I've read and think
worthwhile below.

* Links
** GitHub Pages
+ [[https://pages.github.com/][Websites for you and your projects, hosted directly from your GitHub repository.]]

** Configuration
+ [[https://github.com/repository-settings/app][repisotyr-settings/app]] Configure repositories via a config file.
** Automation
+ [[https://docs.github.com/en/actions][GitHub Actions Documentation]]
+ [[https://github.com/actions][GitHub Actions Library]]
+ [[https://github.com/marketplace?type=actions][GitHub Actions  Marketplace]]
+ [[https://ropensci.org/blog/2022/05/31/chatops-review-system-github/][Editorial Automation: Why & How to Set Up Chat-Ops for your Own Review System on GitHub]]

*** GitHub Actions
+ [[https://github.com/marketplace/actions/sphinx-docs-to-github-pages][Sphinx Docs to GitHub Pages]]
+ [[https://github.com/KanHarI/gpt-commit-summarizer][GPT Commit Summarizer]]

** GitHub Blog

*** OpenSource

+ [[https://github.blog/2022-09-02-gits-database-internals-v-scalability/][Git’s database internals V: scalability]]
+ [[https://github.blog/2022-09-01-gits-database-internals-iv-distributed-synchronization/][Git’s database internals IV: distributed synchronization]]
+ [[https://github.blog/2022-08-31-gits-database-internals-iii-file-history-queries/][Git’s database internals III: file history queries]]
+ [[https://github.blog/2022-08-30-gits-database-internals-ii-commit-history-queries/][Git’s database internals II: commit history queries]]
+ [[https://github.blog/2022-08-29-gits-database-internals-i-packed-object-store/][Git’s database internals I: packed object store]]
+ [[https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/][Include diagrams in your Markdown files with Mermaid]]
+ [[https://github.blog/2015-06-08-how-to-undo-almost-anything-with-git/][How to undo (almost) anything with Git]]

*** Engineering

+ [[https://github.blog/2022-06-30-write-better-commits-build-better-projects/][Write Better Commits, Build Better Projects]]

*** ReadME

+ [[https://github.com/readme/featured/open-source-minimalism][Open Source Minimalism]]
+ [[https://github.com/readme/featured/why-the-lucky-stiff][What we can learn from “_why”, the long lost open source developer]]
