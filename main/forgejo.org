:PROPERTIES:
:ID:       736537b3-75e0-4c24-9156-364937e0e8a2
:mtime:    20250212211450 20241221213704 20240708222139 20240708205417 20240309204131 20240215065336 20240214220237 20240214203455 20240213073417 20240211204231 20240211163700 20240211140707
:ctime:    20240211140707
:END:
#+TITLE: Forgejo
#+FILETAGS: :git:forges:hosting:

[[https://forgejo.org/][Forgejo]] is a fork of [[https://gitea.io][Gitea]]

* Self-hosting on Arch Linux

My OVH VPS runs [[id:a53fa3c5-f091-4715-a1a4-a94071407abf][Arch]] Linux and has more space than I use so I thought I would have a go at self-hosting Forgejo.

The installation [[https://wiki.archlinux.org/title/Gitea][instructions]] are for Gitea but I simply substituted every instance of ~gitea~ for ~foregjo~. I opted
for a MariaDB backend and setup a reverse proxy in [[id:3774439d-af75-453e-b3e9-9d578b6bec46][Nginx]] as per the instructions.

** Setting up MariaDB

Install, add a ~mysql~ user and make sure permissions are correct on the key directories.

#+begin_src bash
pacman -Syu mariadb
useradd mysql
chown -R mysql:root /run/mysqld /var/lib/mysql
#+end_src

It can be sensible to secure your MariaDB installation. The ~mariadb-secure-installation~ will guide you through the
various steps required to improve the security. One key step is setting a password for the ~root~ account.

#+begin_src bash
mariadb-secure-installation
#+end_src

It is also sensible to restrict access to the database to the local-host via Unix sockets. This is done by editing
~/etc/my.cnf.d/server.cnf~ and adding.

#+begin_src
[mariadb]
bind-address = localhost
skip-networking
#+end_src

You can now enabled the MariaDB service and start it.

#+begin_src bash
systemctl enable --now mariadb.service
#+end_src

** Configure Database and User

Next step is to setup a database for Forgejo to use and a user account to access it. Change ~password~ to something
secure.

#+begin_src sql
$ mysql -u root -p

mysql> CREATE DATABASE `forgejo` DEFAULT CHARACTER SET `utf8mb4` COLLATE `utf8mb4_unicode_ci`;
mysql> CREATE USER `gitea`@'localhost' IDENTIFIED BY 'password';
mysql> GRANT ALL PRIVILEGES ON `gitea`.* TO `gitea`@`localhost`;
mysql> FLUSH PRIVILEGES;
mysql> \q
#+end_src

You can check the user can connect to the database (**NB** : Installing ~forgejo~ created a user ~forgejo~ at the system
level, this is checking the MariaDB database user can access the account just created). You the ~password~ you used in
the above.

#+begin_src bash
$ mariadb -u forgejo -p -D forgejo
#+end_src

If you can connect ok go ahead and configure the Forgejo installation to connect to the database by editing
~/etc/forgejo/app.ini~ with the following values.

#+begin_src
DB_TYPE = mysql
HOST    = 127.0.0.1:3306 ; Can use /var/run/mysqld/mysqld.sock if using sockers as per above
NAME    = forgejo
USER    = forgejo
PASSWD  = passwd
#+end_src

You can now enable the ~forgejo.service~.

#+begin_src bash
systemctl enable --now forgejo.service
#+end_src

And you should be able to access the ~http://localhost:3306~ from the same computer. As I'm installing on my VPS I
tested this with ~lynx~ and success!

#+begin_quote
                                                                                                                       Installation - Gitea at Kimura (p1 of 2)
   This website works better with JavaScript.

Initial Configuration

   If you run Gitea inside Docker, please read the documentation before changing any settings.

Database Settings

   Gitea requires MySQL, PostgreSQL, MSSQL, SQLite3 or TiDB (MySQL protocol).
   Database Type
   postgres
   MySQL
   PostgreSQL
   MSSQL
   SQLite3
   Host 127.0.0.1:5432______
   Username gitea_______________
   Password ____________________
   Database Name gitea_______________ Note to MySQL users: please use the InnoDB storage engine and if you use "utf8mb4", your InnoDB version must be
   greater than 5.6 .
   SSL
   disable
   Disable
   Require
   Verify Full
   Schema ____________________ Leave blank for database default ("public").
   Charset
   utf8mb4
   utf8mb4
   Path /var/lib/gitea/data/ File path for the SQLite3 database.
   Enter an absolute path if you run Gitea as a service.

General Settings

   Site Title Gitea at Kimura_____ You can enter your company name here.
   Repository Root Path /var/lib/gitea/data/ Remote Git repositories will be saved to this directory.
   Git LFS Root Path /var/lib/gitea/data/ Files tracked by Git LFS will be stored in this directory. Leave empty to disable.
   Run As Username gitea_______________ Enter the operating system username that Gitea runs as. Note that this user must have access to the repository
   root path.
   Server Domain localhost___________ Domain or host address for the server.
   SSH Server Port 22__________________ Port number your SSH server listens on. Leave empty to disable.
   Gitea HTTP Listen Port 3000________________ Port number the Giteas web server will listen on.
   Gitea Base URL http://localhost:300 Base address for HTTP(S) clone URLs and email notifications.
   Log Path /var/lib/gitea/log__ Log files will be written to this directory.

Optional Settings

   Email Settings
#+end_quote

** Nginx reverse proxy

To be able to connect to the instance from anywhere other than the local computer I opted to use
[[id:3774439d-af75-453e-b3e9-9d578b6bec46][Nginx]] for a [[https://wiki.archlinux.org/title/Gitea#nginx][reverse proxy]]
(I use it to provide all my other web-sites so it was the natural choice for me).

~/etc/nginx/servers-available/forgejo.conf~ is the file suggested to put this in but I already have my sites configured
in a global ~/etc/nginx/nginx.conf~ so opted to add the following there.

I use [[https://letsencrypt.org/][Let's Encrypt]] to obtain certificates.

#+begin_src bash
certbot certonly --nginx -d forgejo.hopto.org
#+end_src

...and updated the ~ssl_certificate~ and ~ssl_certificate_key~ fields in the below ~server~ entry in
~/etc/nginx/nginx.conf~.

#+begin_src
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name forgejo.your.domain;

    ssl_certificate /path/to/fullchain.pem;
    ssl_certificate_key /path/to/privkey.pem;

    location / {
        client_max_body_size 512M;
        proxy_pass http://unix:/run/forgejo/forgejo.socket;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
#+end_src

The following then needs adding/enabling in ~/etc/forgejo/app.ini~.

#+begin_src
[server]
PROTOCOL                   = unix
DOMAIN                     = forgejo.your.domain
ROOT_URL                   = https://forgejo.your.domain
HTTP_ADDR                  = /run/forgejo/forgejo.socket
LOCAL_ROOT_URL             =

[session]
COOKIE_SECURE              = true
#+end_src

Restart both ~nginx.service~ and ~forgejo.service~.

#+begin_src bash
systemctl restart nginx.service
systemctl restart forgejo.service
#+end_src

* Security

** SSH Configuration

In ~/etc/forgejo/app.ini~ set the ~SSH_DOMAIN~ to the URL of your site, at the same time disable HTTP protocol by
setting ~DISABLE_HTTP_GIT~ to ~true~.

#+begin_src
SSH_DOMAIN       = forgejo.your.domain
DISABLE_HTTP_GIT = true
#+end_src

If you are /not/ using the built-in SSH server then you need to modify the ~/etc/ssh/sshd_config~ to accept the Git
Protocol by adding the following (and restarting the ~sshd~ process/service, done with systemd using ~systemctl restart
sshd.service~).

#+begin_src
AcceptEnv GIT_PROTOCOL
#+end_src

*** Non-default SSH Port

If your system SSH daemon uses a non-standard port (i.e. something other than ~22~) then you will need to set the port
explicitly in ~/etc/forgejo/app.ini~

#+begin_src
SSH_PORT = 12345
#+end_src

You will then find than the cloning instructions for adding an SSH remote are slightly different to the common syntax
(which is ~scp~ based) as the URL is prefixed with ~ssh://~ and the port number is included which as shown in the
example below.

#+begin_src bash
git remote add forgejo ssh://forgejo@forgejo.your.domain:562/<user_account>/test.git
#+end_src

** GPG Keys

The excellent article [[https://docs.codeberg.org/security/gpg-key/][Adding a GPG key to your account]] tells you all you need to know, I don't need to repeat what is
there, although I did find that it worked fine with my ED25519 signing key and I _didn't_ generate long unwieldy RSA
keys.

* Email

Typically [[id:28ffcc43-9dff-4de8-a211-277c5346a642][Git Forges]] will email users when certain conditions are met and Forgejo is no different. To utilise this you
have to have an SMTP or IMAP server configured to send the email on your behalf. Personally I use the brilliant
[[https://protonmail.com][ProtonMail]] whose products genuinely protect your [[id:b5000932-0fec-4353-acc4-0cb02127c9ac][Privacy]] unfortunately SMTP services are restricted to /Proton for
Business/ accounts which I don't have. The next best thing is therefore to configure my own [[id:2f138d75-ad63-4079-adbe-1c0cec2d0304][SMTP server]], I opted for
[[https://wiki.archlinux.org/title/Postfix][Postfix]].


** Postfix Configuration


* Runners

Runners make Continuous Integration possible. Under [[id:a53fa3c5-f091-4715-a1a4-a94071407abf][Arch Linux]] these are available from the AUR [[https://aur.archlinux.org/packages/forgejo-runner][~forgejo-runner~]]
package. It requires the Go language to be installed to build but this should be removed afterwards automatically.

#+begin_src bash
mkdir ~/aur
cd ~/aur
git clone https://aur.archlinux.org/forgejo-runner.git
cd forgejo-runner
makepkg -sri
#+end_src

Once installed refer to the [[https://forgejo.org/docs/next/admin/actions/][Forgejo Actions administrator guide]]. You will need to make sure there are both Docker and
Podman container services available to run the actions whose configurations are hosted elsewhere
(e.g. ~https://code.forgejo.org~).

** Configuration

You have to add the following to the default configuration (default values are not included by default as is the case
for many other aspects of the configuration).

#+begin_src
[actions]
ENABLED = true
DEFAULT_ACTIONS_URL = https://code.forgejo.org
ARTIFACT_RETENTION_DAYS = 30

[storage]
ACTIONS_LOG =
ARTIFACTS =
#+end_src

You then need to register runners.

* Emacs

You can interact with ForgeJo instances from [[id:754f25a5-3429-4504-8a17-4efea1568eba][Emacs]] using the [[https://codeberg.org/martianh/fj.el][fj.el]] package.

* Mirroring

I had some Python packages ([[https://gitlab.com/nshephard/tcx2gpx][tcx2gpx]] and [[https://gitlab.com/nshephard/mvdate][mvdate]]) setup on GitLab with Continuous Integration to publish the packages that
I wanted to retain whilst working out how to migrate the repositories to my self hosted Forgejo instance. I also wanted
to retain backup on GitLab should my VPS die completely (it has done [[https://www.theregister.com/2022/03/22/ovhcloud_fire_datacenter_report/][before]]). Unfortunately on the free tier on GitLab
it only supports Push mirroring (i.e. /GitLab > Forgejo/ and not /Forgejo > GitLab/). I therefore opted to use the
Migration feature of Forgejo to mirror the repository.

** Migration

Forgejo includes functionality to migrate data from other forges. In order to migrate all information including labels,
issues, merge requests, releases and milestones you need to generate a Personal Access Token with the appropriate
permissions on the Forge you wish to migrate from.


** Adding Remotes

Adding a secondary remote to a git repository is straight forward using ~git remote add <name> <target_url>~.

src bash
git remote add forgejo ssh://forgejo@forgejo.your.domain:562/<user_account>/test.git
#+end_src

You can now push and pull from ~git [fetch|push|pull] forgejo~ from Forgejo instance but because of the way mirroring is
setup pushing would be a bad idea as it would leave the main copy on GitLab behind.

* Backup

You can easily backup Forgejo to a zip using [[https://forgejo.org/docs/latest/admin/command-line/#dump][~forgejo dump command~]].
* Links

+ [[https://seanthegeek.net/1035/how-to-configure-a-nginx-reverse-proxy-with-lets-encrypt-certificates/][How to configure a nginx reverse proxy with Let's Encrypt certificates - seanthegeek.net]]
+ [[https://delightful.club/delightful-forgejo/][delightful Forgejo]] - a curated list of delightful Forgejo related projects and resources.

** Email
  + [[https://forgejo.org/docs/latest/admin/email-setup/][Email setup | Forgejo - Beyond coding. We forge.]]
  + [[https://proton.me/support/smtp-submission][How to set up SMTP to use business applications or devices with Proton Mail | Proton]]

** Mirroring
  + [[https://docs.gitlab.com/ee/user/project/repository/mirror/][Repository mirroring | GitLab]]
  + [[https://docs.gitlab.com/ee/user/project/repository/mirror/pull.html][Pull from a remote repository | GitLab]]

** Continuous Integration

+ [[https://forgejo.org/docs/next/user/actions/][Forgejo Actions user guide]]
+ [[https://forgejo.org/docs/next/admin/actions/][Forgejo Actions administrator guide]]
+ [[https://forgejo.org/docs/next/admin/runner-installation/][Forgejo Runner installation guide]]

** Emacs Support

+ [[https://codeberg.org/martianh/fj.el][fj.el]]
